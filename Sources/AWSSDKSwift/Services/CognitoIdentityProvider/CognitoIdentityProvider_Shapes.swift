// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CognitoIdentityProvider {

    public struct AccountTakeoverActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventAction", required: true, type: .enum), 
            AWSShapeMember(label: "Notify", required: true, type: .boolean)
        ]

        /// The event action.    BLOCK Choosing this action will block the request.    MFA_IF_CONFIGURED Throw MFA challenge if user has configured it, else allow the request.    MFA_REQUIRED Throw MFA challenge if user has configured it, else block the request.    NO_ACTION Allow the user sign-in.  
        public let eventAction: AccountTakeoverEventActionType
        /// Flag specifying whether to send a notification.
        public let notify: Bool

        public init(eventAction: AccountTakeoverEventActionType, notify: Bool) {
            self.eventAction = eventAction
            self.notify = notify
        }

        private enum CodingKeys: String, CodingKey {
            case eventAction = "EventAction"
            case notify = "Notify"
        }
    }

    public struct AccountTakeoverActionsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HighAction", required: false, type: .structure), 
            AWSShapeMember(label: "LowAction", required: false, type: .structure), 
            AWSShapeMember(label: "MediumAction", required: false, type: .structure)
        ]

        /// Action to take for a high risk.
        public let highAction: AccountTakeoverActionType?
        /// Action to take for a low risk.
        public let lowAction: AccountTakeoverActionType?
        /// Action to take for a medium risk.
        public let mediumAction: AccountTakeoverActionType?

        public init(highAction: AccountTakeoverActionType? = nil, lowAction: AccountTakeoverActionType? = nil, mediumAction: AccountTakeoverActionType? = nil) {
            self.highAction = highAction
            self.lowAction = lowAction
            self.mediumAction = mediumAction
        }

        private enum CodingKeys: String, CodingKey {
            case highAction = "HighAction"
            case lowAction = "LowAction"
            case mediumAction = "MediumAction"
        }
    }

    public enum AccountTakeoverEventActionType: String, CustomStringConvertible, Codable {
        case block = "BLOCK"
        case mfaIfConfigured = "MFA_IF_CONFIGURED"
        case mfaRequired = "MFA_REQUIRED"
        case noAction = "NO_ACTION"
        public var description: String { return self.rawValue }
    }

    public struct AccountTakeoverRiskConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Actions", required: true, type: .structure), 
            AWSShapeMember(label: "NotifyConfiguration", required: false, type: .structure)
        ]

        /// Account takeover risk configuration actions
        public let actions: AccountTakeoverActionsType
        /// The notify configuration used to construct email notifications.
        public let notifyConfiguration: NotifyConfigurationType?

        public init(actions: AccountTakeoverActionsType, notifyConfiguration: NotifyConfigurationType? = nil) {
            self.actions = actions
            self.notifyConfiguration = notifyConfiguration
        }

        public func validate() throws {
            try notifyConfiguration?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case notifyConfiguration = "NotifyConfiguration"
        }
    }

    public struct AddCustomAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomAttributes", required: true, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// An array of custom attributes, such as Mutable and Name.
        public let customAttributes: [SchemaAttributeType]
        /// The user pool ID for the user pool where you want to add custom attributes.
        public let userPoolId: String

        public init(customAttributes: [SchemaAttributeType], userPoolId: String) {
            self.customAttributes = customAttributes
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try customAttributes.forEach {
                try $0.validate()
            }
            try validate(customAttributes, name:"customAttributes", max: 25)
            try validate(customAttributes, name:"customAttributes", min: 1)
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case customAttributes = "CustomAttributes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AddCustomAttributesResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminAddUserToGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The group name.
        public let groupName: String
        /// The username for the user.
        public let username: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, username: String, userPoolId: String) {
            self.groupName = groupName
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(groupName, name:"groupName", max: 128)
            try validate(groupName, name:"groupName", min: 1)
            try validate(groupName, name:"groupName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminConfirmSignUpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user name for which you want to confirm user registration.
        public let username: String
        /// The user pool ID for which you want to confirm user registration.
        public let userPoolId: String

        public init(username: String, userPoolId: String) {
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminConfirmSignUpResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminCreateUserConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowAdminCreateUserOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "InviteMessageTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "UnusedAccountValidityDays", required: false, type: .integer)
        ]

        /// Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
        public let allowAdminCreateUserOnly: Bool?
        /// The message template to be used for the welcome message to new users. See also Customizing User Invitation Messages.
        public let inviteMessageTemplate: MessageTemplateType?
        /// The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter. The default value for this parameter is 7.   If you set a value for TemporaryPasswordValidityDays in PasswordPolicy, that value will be used and UnusedAccountValidityDays will be deprecated for that user pool.  
        public let unusedAccountValidityDays: Int32?

        public init(allowAdminCreateUserOnly: Bool? = nil, inviteMessageTemplate: MessageTemplateType? = nil, unusedAccountValidityDays: Int32? = nil) {
            self.allowAdminCreateUserOnly = allowAdminCreateUserOnly
            self.inviteMessageTemplate = inviteMessageTemplate
            self.unusedAccountValidityDays = unusedAccountValidityDays
        }

        public func validate() throws {
            try inviteMessageTemplate?.validate()
            try validate(unusedAccountValidityDays, name:"unusedAccountValidityDays", max: 365)
            try validate(unusedAccountValidityDays, name:"unusedAccountValidityDays", min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case allowAdminCreateUserOnly = "AllowAdminCreateUserOnly"
            case inviteMessageTemplate = "InviteMessageTemplate"
            case unusedAccountValidityDays = "UnusedAccountValidityDays"
        }
    }

    public struct AdminCreateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DesiredDeliveryMediums", required: false, type: .list), 
            AWSShapeMember(label: "ForceAliasCreation", required: false, type: .boolean), 
            AWSShapeMember(label: "MessageAction", required: false, type: .enum), 
            AWSShapeMember(label: "TemporaryPassword", required: false, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "ValidationData", required: false, type: .list)
        ]

        /// Specify "EMAIL" if email will be used to send the welcome message. Specify "SMS" if the phone number will be used. The default value is "SMS". More than one value can be specified.
        public let desiredDeliveryMediums: [DeliveryMediumType]?
        /// This parameter is only used if the phone_number_verified or email_verified attribute is set to True. Otherwise, it is ignored. If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.
        public let forceAliasCreation: Bool?
        /// Set to "RESEND" to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to "SUPPRESS" to suppress sending the message. Only one value can be specified.
        public let messageAction: MessageActionType?
        /// The user's temporary password. This password must conform to the password policy that you specified when you created the user pool. The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins. This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you. The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter.
        public let temporaryPassword: String?
        /// An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (in or in the Attributes tab of the console) must be supplied either by you (in your call to AdminCreateUser) or by the user (when he or she signs up in response to your welcome message). For custom attributes, you must prepend the custom: prefix to the attribute name. To send a message inviting the user to sign up, you must specify the user's email address or phone number. This can be done in your call to AdminCreateUser or in the Users tab of the Amazon Cognito console for managing your user pools. In your call to AdminCreateUser, you can set the email_verified attribute to True, and you can set the phone_number_verified attribute to True. (You can also do this by calling .)    email: The email address of the user to whom the message that contains the code and username will be sent. Required if the email_verified attribute is set to True, or if "EMAIL" is specified in the DesiredDeliveryMediums parameter.    phone_number: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phone_number_verified attribute is set to True, or if "SMS" is specified in the DesiredDeliveryMediums parameter.  
        public let userAttributes: [AttributeType]?
        /// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
        public let username: String
        /// The user pool ID for the user pool where the user will be created.
        public let userPoolId: String
        /// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain. To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process. The user's validation data is not persisted.
        public let validationData: [AttributeType]?

        public init(desiredDeliveryMediums: [DeliveryMediumType]? = nil, forceAliasCreation: Bool? = nil, messageAction: MessageActionType? = nil, temporaryPassword: String? = nil, userAttributes: [AttributeType]? = nil, username: String, userPoolId: String, validationData: [AttributeType]? = nil) {
            self.desiredDeliveryMediums = desiredDeliveryMediums
            self.forceAliasCreation = forceAliasCreation
            self.messageAction = messageAction
            self.temporaryPassword = temporaryPassword
            self.userAttributes = userAttributes
            self.username = username
            self.userPoolId = userPoolId
            self.validationData = validationData
        }

        public func validate() throws {
            try validate(temporaryPassword, name:"temporaryPassword", max: 256)
            try validate(temporaryPassword, name:"temporaryPassword", min: 6)
            try validate(temporaryPassword, name:"temporaryPassword", pattern: "[\\S]+")
            try userAttributes?.forEach {
                try $0.validate()
            }
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
            try validationData?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case desiredDeliveryMediums = "DesiredDeliveryMediums"
            case forceAliasCreation = "ForceAliasCreation"
            case messageAction = "MessageAction"
            case temporaryPassword = "TemporaryPassword"
            case userAttributes = "UserAttributes"
            case username = "Username"
            case userPoolId = "UserPoolId"
            case validationData = "ValidationData"
        }
    }

    public struct AdminCreateUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]

        /// The newly created user.
        public let user: UserType?

        public init(user: UserType? = nil) {
            self.user = user
        }

        public func validate() throws {
            try user?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct AdminDeleteUserAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserAttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// An array of strings representing the user attribute names you wish to delete. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributeNames: [String]
        /// The user name of the user from which you would like to delete attributes.
        public let username: String
        /// The user pool ID for the user pool where you want to delete user attributes.
        public let userPoolId: String

        public init(userAttributeNames: [String], username: String, userPoolId: String) {
            self.userAttributeNames = userAttributeNames
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try userAttributeNames.forEach {
                try validate($0, name:"userAttributeNames[]", max: 32)
                try validate($0, name:"userAttributeNames[]", min: 1)
                try validate($0, name:"userAttributeNames[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributeNames = "UserAttributeNames"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminDeleteUserAttributesResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminDeleteUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user name of the user you wish to delete.
        public let username: String
        /// The user pool ID for the user pool where you want to delete the user.
        public let userPoolId: String

        public init(username: String, userPoolId: String) {
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminDisableProviderForUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: true, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user to be disabled.
        public let user: ProviderUserIdentifierType
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(user: ProviderUserIdentifierType, userPoolId: String) {
            self.user = user
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try user.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminDisableProviderForUserResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminDisableUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user name of the user you wish to disable.
        public let username: String
        /// The user pool ID for the user pool where you want to disable the user.
        public let userPoolId: String

        public init(username: String, userPoolId: String) {
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminDisableUserResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminEnableUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user name of the user you wish to enable.
        public let username: String
        /// The user pool ID for the user pool where you want to enable the user.
        public let userPoolId: String

        public init(username: String, userPoolId: String) {
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminEnableUserResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminForgetDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The device key.
        public let deviceKey: String
        /// The user name.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(deviceKey: String, username: String, userPoolId: String) {
            self.deviceKey = deviceKey
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(deviceKey, name:"deviceKey", max: 55)
            try validate(deviceKey, name:"deviceKey", min: 1)
            try validate(deviceKey, name:"deviceKey", pattern: "[\\w-]+_[0-9a-f-]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminGetDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The device key.
        public let deviceKey: String
        /// The user name.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(deviceKey: String, username: String, userPoolId: String) {
            self.deviceKey = deviceKey
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(deviceKey, name:"deviceKey", max: 55)
            try validate(deviceKey, name:"deviceKey", min: 1)
            try validate(deviceKey, name:"deviceKey", pattern: "[\\w-]+_[0-9a-f-]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminGetDeviceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: true, type: .structure)
        ]

        /// The device.
        public let device: DeviceType

        public init(device: DeviceType) {
            self.device = device
        }

        public func validate() throws {
            try device.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
        }
    }

    public struct AdminGetUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user name of the user you wish to retrieve.
        public let username: String
        /// The user pool ID for the user pool where you want to get information about the user.
        public let userPoolId: String

        public init(username: String, userPoolId: String) {
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminGetUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "MFAOptions", required: false, type: .list), 
            AWSShapeMember(label: "PreferredMfaSetting", required: false, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .list), 
            AWSShapeMember(label: "UserCreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "UserLastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "UserMFASettingList", required: false, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserStatus", required: false, type: .enum)
        ]

        /// Indicates that the status is enabled.
        public let enabled: Bool?
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]?
        /// The user's preferred MFA setting.
        public let preferredMfaSetting: String?
        /// An array of name-value pairs representing user attributes.
        public let userAttributes: [AttributeType]?
        /// The date the user was created.
        public let userCreateDate: TimeStamp?
        /// The date the user was last modified.
        public let userLastModifiedDate: TimeStamp?
        /// The list of the user's MFA settings.
        public let userMFASettingList: [String]?
        /// The user name of the user about whom you are receiving information.
        public let username: String
        /// The user status. Can be one of the following:   UNCONFIRMED - User has been created but not confirmed.   CONFIRMED - User has been confirmed.   ARCHIVED - User is no longer active.   COMPROMISED - User is disabled due to a potential security threat.   UNKNOWN - User status is not known.   RESET_REQUIRED - User is confirmed, but the user must request a code and reset his or her password before he or she can sign in.   FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change his or her password to a new value before doing anything else.   
        public let userStatus: UserStatusType?

        public init(enabled: Bool? = nil, mFAOptions: [MFAOptionType]? = nil, preferredMfaSetting: String? = nil, userAttributes: [AttributeType]? = nil, userCreateDate: TimeStamp? = nil, userLastModifiedDate: TimeStamp? = nil, userMFASettingList: [String]? = nil, username: String, userStatus: UserStatusType? = nil) {
            self.enabled = enabled
            self.mFAOptions = mFAOptions
            self.preferredMfaSetting = preferredMfaSetting
            self.userAttributes = userAttributes
            self.userCreateDate = userCreateDate
            self.userLastModifiedDate = userLastModifiedDate
            self.userMFASettingList = userMFASettingList
            self.username = username
            self.userStatus = userStatus
        }

        public func validate() throws {
            try mFAOptions?.forEach {
                try $0.validate()
            }
            try userAttributes?.forEach {
                try $0.validate()
            }
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case mFAOptions = "MFAOptions"
            case preferredMfaSetting = "PreferredMfaSetting"
            case userAttributes = "UserAttributes"
            case userCreateDate = "UserCreateDate"
            case userLastModifiedDate = "UserLastModifiedDate"
            case userMFASettingList = "UserMFASettingList"
            case username = "Username"
            case userStatus = "UserStatus"
        }
    }

    public struct AdminInitiateAuthRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "AuthFlow", required: true, type: .enum), 
            AWSShapeMember(label: "AuthParameters", required: false, type: .map), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "ClientMetadata", required: false, type: .map), 
            AWSShapeMember(label: "ContextData", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The analytics metadata for collecting Amazon Pinpoint metrics for AdminInitiateAuth calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The authentication flow for this call to execute. The API action will depend on this value. For example:    REFRESH_TOKEN_AUTH will take in a valid refresh token and return new tokens.    USER_SRP_AUTH will take in USERNAME and SRP_A and return the SRP variables to be used for next challenge execution.    USER_PASSWORD_AUTH will take in USERNAME and PASSWORD and return the next challenge or tokens.   Valid values include:    USER_SRP_AUTH: Authentication flow for the Secure Remote Password (SRP) protocol.    REFRESH_TOKEN_AUTH/REFRESH_TOKEN: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.    CUSTOM_AUTH: Custom authentication flow.    ADMIN_NO_SRP_AUTH: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.    USER_PASSWORD_AUTH: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool.   
        public let authFlow: AuthFlowType
        /// The authentication parameters. These are inputs corresponding to the AuthFlow that you are invoking. The required values depend on the value of AuthFlow:   For USER_SRP_AUTH: USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY    For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: REFRESH_TOKEN (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY    For ADMIN_NO_SRP_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), PASSWORD (required), DEVICE_KEY    For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY   
        public let authParameters: [String: String]?
        /// The app client ID.
        public let clientId: String
        /// This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.
        public let clientMetadata: [String: String]?
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let contextData: ContextDataType?
        /// The ID of the Amazon Cognito user pool.
        public let userPoolId: String

        public init(analyticsMetadata: AnalyticsMetadataType? = nil, authFlow: AuthFlowType, authParameters: [String: String]? = nil, clientId: String, clientMetadata: [String: String]? = nil, contextData: ContextDataType? = nil, userPoolId: String) {
            self.analyticsMetadata = analyticsMetadata
            self.authFlow = authFlow
            self.authParameters = authParameters
            self.clientId = clientId
            self.clientMetadata = clientMetadata
            self.contextData = contextData
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsMetadata = "AnalyticsMetadata"
            case authFlow = "AuthFlow"
            case authParameters = "AuthParameters"
            case clientId = "ClientId"
            case clientMetadata = "ClientMetadata"
            case contextData = "ContextData"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminInitiateAuthResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]

        /// The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, ChallengeName, ChallengeParameters, and Session are returned.
        public let authenticationResult: AuthenticationResultType?
        /// The name of the challenge which you are responding to with this call. This is returned to you in the AdminInitiateAuth response if you need to pass another challenge.    MFA_SETUP: If MFA is required, users who do not have at least one of the MFA methods set up are presented with an MFA_SETUP challenge. The user must set up at least one MFA type to continue to authenticate.    SELECT_MFA_TYPE: Selects the MFA type. Valid MFA options are SMS_MFA for text SMS MFA, and SOFTWARE_TOKEN_MFA for TOTP software token MFA.    SMS_MFA: Next challenge is to supply an SMS_MFA_CODE, delivered via SMS.    PASSWORD_VERIFIER: Next challenge is to supply PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, and TIMESTAMP after the client-side SRP calculations.    CUSTOM_CHALLENGE: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.    DEVICE_SRP_AUTH: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.    DEVICE_PASSWORD_VERIFIER: Similar to PASSWORD_VERIFIER, but for devices only.    ADMIN_NO_SRP_AUTH: This is returned if you need to authenticate with USERNAME and PASSWORD directly. An app client must be enabled to use this flow.    NEW_PASSWORD_REQUIRED: For users which are required to change their passwords after successful first login. This challenge should be passed with NEW_PASSWORD and any other required attributes.  
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. These are returned to you in the AdminInitiateAuth response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (AdminRespondToAuthChallenge). All challenges require USERNAME and SECRET_HASH (if applicable). The value of the USER_ID_FOR_SRP attribute will be the user's actual username, not an alias (such as email address or phone number), even if you specified an alias in your call to AdminInitiateAuth. This is because, in the AdminRespondToAuthChallenge API ChallengeResponses, the USERNAME attribute cannot be an alias.
        public let challengeParameters: [String: String]?
        /// The session which should be passed both ways in challenge-response calls to the service. If AdminInitiateAuth or AdminRespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next AdminRespondToAuthChallenge API call.
        public let session: String?

        public init(authenticationResult: AuthenticationResultType? = nil, challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, session: String? = nil) {
            self.authenticationResult = authenticationResult
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.session = session
        }

        public func validate() throws {
            try authenticationResult?.validate()
            try validate(session, name:"session", max: 2048)
            try validate(session, name:"session", min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationResult = "AuthenticationResult"
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case session = "Session"
        }
    }

    public struct AdminLinkProviderForUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationUser", required: true, type: .structure), 
            AWSShapeMember(label: "SourceUser", required: true, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The existing user in the user pool to be linked to the external identity provider user account. Can be a native (Username + Password) Cognito User Pools user or a federated user (for example, a SAML or Facebook user). If the user doesn't exist, an exception is thrown. This is the user that is returned when the new user (with the linked identity provider attribute) signs in. For a native username + password user, the ProviderAttributeValue for the DestinationUser should be the username in the user pool. For a federated user, it should be the provider-specific user_id. The ProviderAttributeName of the DestinationUser is ignored. The ProviderName should be set to Cognito for users in Cognito user pools.
        public let destinationUser: ProviderUserIdentifierType
        /// An external identity provider account for a user who does not currently exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user. If the SourceUser is a federated social identity provider user (Facebook, Google, or Login with Amazon), you must set the ProviderAttributeName to Cognito_Subject. For social identity providers, the ProviderName will be Facebook, Google, or LoginWithAmazon, and Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for id, sub, and user_id, respectively. The ProviderAttributeValue for the user must be the same value as the id, sub, or user_id value found in the social identity provider token.  For SAML, the ProviderAttributeName can be any value that matches a claim in the SAML assertion. If you wish to link SAML users based on the subject of the SAML assertion, you should map the subject to a claim through the SAML identity provider and submit that claim name as the ProviderAttributeName. If you set ProviderAttributeName to Cognito_Subject, Cognito will automatically parse the default unique identifier found in the subject from the SAML token.
        public let sourceUser: ProviderUserIdentifierType
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(destinationUser: ProviderUserIdentifierType, sourceUser: ProviderUserIdentifierType, userPoolId: String) {
            self.destinationUser = destinationUser
            self.sourceUser = sourceUser
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try destinationUser.validate()
            try sourceUser.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case destinationUser = "DestinationUser"
            case sourceUser = "SourceUser"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminLinkProviderForUserResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminListDevicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The limit of the devices request.
        public let limit: Int32?
        /// The pagination token.
        public let paginationToken: String?
        /// The user name.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(limit: Int32? = nil, paginationToken: String? = nil, username: String, userPoolId: String) {
            self.limit = limit
            self.paginationToken = paginationToken
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(limit, name:"limit", max: 60)
            try validate(limit, name:"limit", min: 0)
            try validate(paginationToken, name:"paginationToken", min: 1)
            try validate(paginationToken, name:"paginationToken", pattern: "[\\S]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case paginationToken = "PaginationToken"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminListDevicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Devices", required: false, type: .list), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string)
        ]

        /// The devices in the list of devices response.
        public let devices: [DeviceType]?
        /// The pagination token.
        public let paginationToken: String?

        public init(devices: [DeviceType]? = nil, paginationToken: String? = nil) {
            self.devices = devices
            self.paginationToken = paginationToken
        }

        public func validate() throws {
            try devices?.forEach {
                try $0.validate()
            }
            try validate(paginationToken, name:"paginationToken", min: 1)
            try validate(paginationToken, name:"paginationToken", pattern: "[\\S]+")
        }

        private enum CodingKeys: String, CodingKey {
            case devices = "Devices"
            case paginationToken = "PaginationToken"
        }
    }

    public struct AdminListGroupsForUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The limit of the request to list groups.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The username for the user.
        public let username: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(limit: Int32? = nil, nextToken: String? = nil, username: String, userPoolId: String) {
            self.limit = limit
            self.nextToken = nextToken
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(limit, name:"limit", max: 60)
            try validate(limit, name:"limit", min: 0)
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminListGroupsForUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The groups that the user belongs to.
        public let groups: [GroupType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?

        public init(groups: [GroupType]? = nil, nextToken: String? = nil) {
            self.groups = groups
            self.nextToken = nextToken
        }

        public func validate() throws {
            try groups?.forEach {
                try $0.validate()
            }
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "Groups"
            case nextToken = "NextToken"
        }
    }

    public struct AdminListUserAuthEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The maximum number of authentication events to return.
        public let maxResults: Int32?
        /// A pagination token.
        public let nextToken: String?
        /// The user pool username or an alias.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, username: String, userPoolId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(maxResults, name:"maxResults", max: 60)
            try validate(maxResults, name:"maxResults", min: 0)
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminListUserAuthEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthEvents", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The response object. It includes the EventID, EventType, CreationDate, EventRisk, and EventResponse.
        public let authEvents: [AuthEventType]?
        /// A pagination token.
        public let nextToken: String?

        public init(authEvents: [AuthEventType]? = nil, nextToken: String? = nil) {
            self.authEvents = authEvents
            self.nextToken = nextToken
        }

        public func validate() throws {
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
        }

        private enum CodingKeys: String, CodingKey {
            case authEvents = "AuthEvents"
            case nextToken = "NextToken"
        }
    }

    public struct AdminRemoveUserFromGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The group name.
        public let groupName: String
        /// The username for the user.
        public let username: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, username: String, userPoolId: String) {
            self.groupName = groupName
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(groupName, name:"groupName", max: 128)
            try validate(groupName, name:"groupName", min: 1)
            try validate(groupName, name:"groupName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminResetUserPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user name of the user whose password you wish to reset.
        public let username: String
        /// The user pool ID for the user pool where you want to reset the user's password.
        public let userPoolId: String

        public init(username: String, userPoolId: String) {
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminResetUserPasswordResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminRespondToAuthChallengeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "ChallengeName", required: true, type: .enum), 
            AWSShapeMember(label: "ChallengeResponses", required: false, type: .map), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "ContextData", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The analytics metadata for collecting Amazon Pinpoint metrics for AdminRespondToAuthChallenge calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The challenge name. For more information, see .
        public let challengeName: ChallengeNameType
        /// The challenge responses. These are inputs corresponding to the value of ChallengeName, for example:    SMS_MFA: SMS_MFA_CODE, USERNAME, SECRET_HASH (if app client is configured with client secret).    PASSWORD_VERIFIER: PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, TIMESTAMP, USERNAME, SECRET_HASH (if app client is configured with client secret).    ADMIN_NO_SRP_AUTH: PASSWORD, USERNAME, SECRET_HASH (if app client is configured with client secret).     NEW_PASSWORD_REQUIRED: NEW_PASSWORD, any other required attributes, USERNAME, SECRET_HASH (if app client is configured with client secret).    The value of the USERNAME attribute must be the user's actual username, not an alias (such as email address or phone number). To make this easier, the AdminInitiateAuth response includes the actual username value in the USERNAMEUSER_ID_FOR_SRP attribute, even if you specified an alias in your call to AdminInitiateAuth.
        public let challengeResponses: [String: String]?
        /// The app client ID.
        public let clientId: String
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let contextData: ContextDataType?
        /// The session which should be passed both ways in challenge-response calls to the service. If InitiateAuth or RespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?
        /// The ID of the Amazon Cognito user pool.
        public let userPoolId: String

        public init(analyticsMetadata: AnalyticsMetadataType? = nil, challengeName: ChallengeNameType, challengeResponses: [String: String]? = nil, clientId: String, contextData: ContextDataType? = nil, session: String? = nil, userPoolId: String) {
            self.analyticsMetadata = analyticsMetadata
            self.challengeName = challengeName
            self.challengeResponses = challengeResponses
            self.clientId = clientId
            self.contextData = contextData
            self.session = session
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(session, name:"session", max: 2048)
            try validate(session, name:"session", min: 20)
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsMetadata = "AnalyticsMetadata"
            case challengeName = "ChallengeName"
            case challengeResponses = "ChallengeResponses"
            case clientId = "ClientId"
            case contextData = "ContextData"
            case session = "Session"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminRespondToAuthChallengeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]

        /// The result returned by the server in response to the authentication request.
        public let authenticationResult: AuthenticationResultType?
        /// The name of the challenge. For more information, see .
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. For more information, see .
        public let challengeParameters: [String: String]?
        /// The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?

        public init(authenticationResult: AuthenticationResultType? = nil, challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, session: String? = nil) {
            self.authenticationResult = authenticationResult
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.session = session
        }

        public func validate() throws {
            try authenticationResult?.validate()
            try validate(session, name:"session", max: 2048)
            try validate(session, name:"session", min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationResult = "AuthenticationResult"
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case session = "Session"
        }
    }

    public struct AdminSetUserMFAPreferenceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSMfaSettings", required: false, type: .structure), 
            AWSShapeMember(label: "SoftwareTokenMfaSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The SMS text message MFA settings.
        public let sMSMfaSettings: SMSMfaSettingsType?
        /// The time-based one-time password software token MFA settings.
        public let softwareTokenMfaSettings: SoftwareTokenMfaSettingsType?
        /// The user pool username or alias.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(sMSMfaSettings: SMSMfaSettingsType? = nil, softwareTokenMfaSettings: SoftwareTokenMfaSettingsType? = nil, username: String, userPoolId: String) {
            self.sMSMfaSettings = sMSMfaSettings
            self.softwareTokenMfaSettings = softwareTokenMfaSettings
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case sMSMfaSettings = "SMSMfaSettings"
            case softwareTokenMfaSettings = "SoftwareTokenMfaSettings"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminSetUserMFAPreferenceResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminSetUserPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "Permanent", required: false, type: .boolean), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        public let password: String
        public let permanent: Bool?
        public let username: String
        public let userPoolId: String

        public init(password: String, permanent: Bool? = nil, username: String, userPoolId: String) {
            self.password = password
            self.permanent = permanent
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(password, name:"password", max: 256)
            try validate(password, name:"password", min: 6)
            try validate(password, name:"password", pattern: "[\\S]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case password = "Password"
            case permanent = "Permanent"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminSetUserPasswordResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminSetUserSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MFAOptions", required: true, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]
        /// The user name of the user for whom you wish to set user settings.
        public let username: String
        /// The user pool ID for the user pool where you want to set the user's settings, such as MFA options.
        public let userPoolId: String

        public init(mFAOptions: [MFAOptionType], username: String, userPoolId: String) {
            self.mFAOptions = mFAOptions
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try mFAOptions.forEach {
                try $0.validate()
            }
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case mFAOptions = "MFAOptions"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminSetUserSettingsResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminUpdateAuthEventFeedbackRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventId", required: true, type: .string), 
            AWSShapeMember(label: "FeedbackValue", required: true, type: .enum), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The authentication event ID.
        public let eventId: String
        /// The authentication event feedback value.
        public let feedbackValue: FeedbackValueType
        /// The user pool username.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(eventId: String, feedbackValue: FeedbackValueType, username: String, userPoolId: String) {
            self.eventId = eventId
            self.feedbackValue = feedbackValue
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(eventId, name:"eventId", max: 50)
            try validate(eventId, name:"eventId", min: 1)
            try validate(eventId, name:"eventId", pattern: "[\\w+-]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case feedbackValue = "FeedbackValue"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminUpdateAuthEventFeedbackResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminUpdateDeviceStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "DeviceRememberedStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The device key.
        public let deviceKey: String
        /// The status indicating whether a device has been remembered or not.
        public let deviceRememberedStatus: DeviceRememberedStatusType?
        /// The user name.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(deviceKey: String, deviceRememberedStatus: DeviceRememberedStatusType? = nil, username: String, userPoolId: String) {
            self.deviceKey = deviceKey
            self.deviceRememberedStatus = deviceRememberedStatus
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(deviceKey, name:"deviceKey", max: 55)
            try validate(deviceKey, name:"deviceKey", min: 1)
            try validate(deviceKey, name:"deviceKey", pattern: "[\\w-]+_[0-9a-f-]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case deviceRememberedStatus = "DeviceRememberedStatus"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminUpdateDeviceStatusResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminUpdateUserAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserAttributes", required: true, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]
        /// The user name of the user for whom you want to update user attributes.
        public let username: String
        /// The user pool ID for the user pool where you want to update user attributes.
        public let userPoolId: String

        public init(userAttributes: [AttributeType], username: String, userPoolId: String) {
            self.userAttributes = userAttributes
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try userAttributes.forEach {
                try $0.validate()
            }
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributes = "UserAttributes"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminUpdateUserAttributesResponse: AWSShape {


        public init() {
        }

    }

    public struct AdminUserGlobalSignOutRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user name.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(username: String, userPoolId: String) {
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminUserGlobalSignOutResponse: AWSShape {


        public init() {
        }

    }

    public enum AdvancedSecurityModeType: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case audit = "AUDIT"
        case enforced = "ENFORCED"
        public var description: String { return self.rawValue }
    }

    public enum AliasAttributeType: String, CustomStringConvertible, Codable {
        case phoneNumber = "phone_number"
        case email = "email"
        case preferredUsername = "preferred_username"
        public var description: String { return self.rawValue }
    }

    public struct AnalyticsConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", required: true, type: .string), 
            AWSShapeMember(label: "ExternalId", required: true, type: .string), 
            AWSShapeMember(label: "RoleArn", required: true, type: .string), 
            AWSShapeMember(label: "UserDataShared", required: false, type: .boolean)
        ]

        /// The application ID for an Amazon Pinpoint application.
        public let applicationId: String
        /// The external ID.
        public let externalId: String
        /// The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
        public let roleArn: String
        /// If UserDataShared is true, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
        public let userDataShared: Bool?

        public init(applicationId: String, externalId: String, roleArn: String, userDataShared: Bool? = nil) {
            self.applicationId = applicationId
            self.externalId = externalId
            self.roleArn = roleArn
            self.userDataShared = userDataShared
        }

        public func validate() throws {
            try validate(applicationId, name:"applicationId", pattern: "^[0-9a-fA-F]+$")
            try validate(roleArn, name:"roleArn", max: 2048)
            try validate(roleArn, name:"roleArn", min: 20)
            try validate(roleArn, name:"roleArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case externalId = "ExternalId"
            case roleArn = "RoleArn"
            case userDataShared = "UserDataShared"
        }
    }

    public struct AnalyticsMetadataType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsEndpointId", required: false, type: .string)
        ]

        /// The endpoint ID.
        public let analyticsEndpointId: String?

        public init(analyticsEndpointId: String? = nil) {
            self.analyticsEndpointId = analyticsEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsEndpointId = "AnalyticsEndpointId"
        }
    }

    public struct AssociateSoftwareTokenRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: false, type: .string), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]

        /// The access token.
        public let accessToken: String?
        /// The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
        public let session: String?

        public init(accessToken: String? = nil, session: String? = nil) {
            self.accessToken = accessToken
            self.session = session
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(session, name:"session", max: 2048)
            try validate(session, name:"session", min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case session = "Session"
        }
    }

    public struct AssociateSoftwareTokenResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretCode", required: false, type: .string), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]

        /// A unique generated shared secret code that is used in the TOTP algorithm to generate a one time code.
        public let secretCode: String?
        /// The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
        public let session: String?

        public init(secretCode: String? = nil, session: String? = nil) {
            self.secretCode = secretCode
            self.session = session
        }

        public func validate() throws {
            try validate(secretCode, name:"secretCode", min: 16)
            try validate(secretCode, name:"secretCode", pattern: "[A-Za-z0-9]+")
            try validate(session, name:"session", max: 2048)
            try validate(session, name:"session", min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case secretCode = "SecretCode"
            case session = "Session"
        }
    }

    public enum AttributeDataType: String, CustomStringConvertible, Codable {
        case string = "String"
        case number = "Number"
        case datetime = "DateTime"
        case boolean = "Boolean"
        public var description: String { return self.rawValue }
    }

    public struct AttributeType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The name of the attribute.
        public let name: String
        /// The value of the attribute.
        public let value: String?

        public init(name: String, value: String? = nil) {
            self.name = name
            self.value = value
        }

        public func validate() throws {
            try validate(name, name:"name", max: 32)
            try validate(name, name:"name", min: 1)
            try validate(name, name:"name", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(value, name:"value", max: 2048)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct AuthEventType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeResponses", required: false, type: .list), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "EventContextData", required: false, type: .structure), 
            AWSShapeMember(label: "EventFeedback", required: false, type: .structure), 
            AWSShapeMember(label: "EventId", required: false, type: .string), 
            AWSShapeMember(label: "EventResponse", required: false, type: .enum), 
            AWSShapeMember(label: "EventRisk", required: false, type: .structure), 
            AWSShapeMember(label: "EventType", required: false, type: .enum)
        ]

        /// The challenge responses.
        public let challengeResponses: [ChallengeResponseType]?
        /// The creation date
        public let creationDate: TimeStamp?
        /// The user context data captured at the time of an event request. It provides additional information about the client from which event the request is received.
        public let eventContextData: EventContextDataType?
        /// A flag specifying the user feedback captured at the time of an event request is good or bad. 
        public let eventFeedback: EventFeedbackType?
        /// The event ID.
        public let eventId: String?
        /// The event response.
        public let eventResponse: EventResponseType?
        /// The event risk.
        public let eventRisk: EventRiskType?
        /// The event type.
        public let eventType: EventType?

        public init(challengeResponses: [ChallengeResponseType]? = nil, creationDate: TimeStamp? = nil, eventContextData: EventContextDataType? = nil, eventFeedback: EventFeedbackType? = nil, eventId: String? = nil, eventResponse: EventResponseType? = nil, eventRisk: EventRiskType? = nil, eventType: EventType? = nil) {
            self.challengeResponses = challengeResponses
            self.creationDate = creationDate
            self.eventContextData = eventContextData
            self.eventFeedback = eventFeedback
            self.eventId = eventId
            self.eventResponse = eventResponse
            self.eventRisk = eventRisk
            self.eventType = eventType
        }

        private enum CodingKeys: String, CodingKey {
            case challengeResponses = "ChallengeResponses"
            case creationDate = "CreationDate"
            case eventContextData = "EventContextData"
            case eventFeedback = "EventFeedback"
            case eventId = "EventId"
            case eventResponse = "EventResponse"
            case eventRisk = "EventRisk"
            case eventType = "EventType"
        }
    }

    public enum AuthFlowType: String, CustomStringConvertible, Codable {
        case userSrpAuth = "USER_SRP_AUTH"
        case refreshTokenAuth = "REFRESH_TOKEN_AUTH"
        case refreshToken = "REFRESH_TOKEN"
        case customAuth = "CUSTOM_AUTH"
        case adminNoSrpAuth = "ADMIN_NO_SRP_AUTH"
        case userPasswordAuth = "USER_PASSWORD_AUTH"
        public var description: String { return self.rawValue }
    }

    public struct AuthenticationResultType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: false, type: .string), 
            AWSShapeMember(label: "ExpiresIn", required: false, type: .integer), 
            AWSShapeMember(label: "IdToken", required: false, type: .string), 
            AWSShapeMember(label: "NewDeviceMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "RefreshToken", required: false, type: .string), 
            AWSShapeMember(label: "TokenType", required: false, type: .string)
        ]

        /// The access token.
        public let accessToken: String?
        /// The expiration period of the authentication result in seconds.
        public let expiresIn: Int32?
        /// The ID token.
        public let idToken: String?
        /// The new device metadata from an authentication result.
        public let newDeviceMetadata: NewDeviceMetadataType?
        /// The refresh token.
        public let refreshToken: String?
        /// The token type.
        public let tokenType: String?

        public init(accessToken: String? = nil, expiresIn: Int32? = nil, idToken: String? = nil, newDeviceMetadata: NewDeviceMetadataType? = nil, refreshToken: String? = nil, tokenType: String? = nil) {
            self.accessToken = accessToken
            self.expiresIn = expiresIn
            self.idToken = idToken
            self.newDeviceMetadata = newDeviceMetadata
            self.refreshToken = refreshToken
            self.tokenType = tokenType
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(idToken, name:"idToken", pattern: "[A-Za-z0-9-_=.]+")
            try newDeviceMetadata?.validate()
            try validate(refreshToken, name:"refreshToken", pattern: "[A-Za-z0-9-_=.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case expiresIn = "ExpiresIn"
            case idToken = "IdToken"
            case newDeviceMetadata = "NewDeviceMetadata"
            case refreshToken = "RefreshToken"
            case tokenType = "TokenType"
        }
    }

    public enum ChallengeName: String, CustomStringConvertible, Codable {
        case password = "Password"
        case mfa = "Mfa"
        public var description: String { return self.rawValue }
    }

    public enum ChallengeNameType: String, CustomStringConvertible, Codable {
        case smsMfa = "SMS_MFA"
        case softwareTokenMfa = "SOFTWARE_TOKEN_MFA"
        case selectMfaType = "SELECT_MFA_TYPE"
        case mfaSetup = "MFA_SETUP"
        case passwordVerifier = "PASSWORD_VERIFIER"
        case customChallenge = "CUSTOM_CHALLENGE"
        case deviceSrpAuth = "DEVICE_SRP_AUTH"
        case devicePasswordVerifier = "DEVICE_PASSWORD_VERIFIER"
        case adminNoSrpAuth = "ADMIN_NO_SRP_AUTH"
        case newPasswordRequired = "NEW_PASSWORD_REQUIRED"
        public var description: String { return self.rawValue }
    }

    public enum ChallengeResponse: String, CustomStringConvertible, Codable {
        case success = "Success"
        case failure = "Failure"
        public var description: String { return self.rawValue }
    }

    public struct ChallengeResponseType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeResponse", required: false, type: .enum)
        ]

        /// The challenge name
        public let challengeName: ChallengeName?
        /// The challenge response.
        public let challengeResponse: ChallengeResponse?

        public init(challengeName: ChallengeName? = nil, challengeResponse: ChallengeResponse? = nil) {
            self.challengeName = challengeName
            self.challengeResponse = challengeResponse
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case challengeResponse = "ChallengeResponse"
        }
    }

    public struct ChangePasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string), 
            AWSShapeMember(label: "PreviousPassword", required: true, type: .string), 
            AWSShapeMember(label: "ProposedPassword", required: true, type: .string)
        ]

        /// The access token.
        public let accessToken: String
        /// The old password.
        public let previousPassword: String
        /// The new password.
        public let proposedPassword: String

        public init(accessToken: String, previousPassword: String, proposedPassword: String) {
            self.accessToken = accessToken
            self.previousPassword = previousPassword
            self.proposedPassword = proposedPassword
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(previousPassword, name:"previousPassword", max: 256)
            try validate(previousPassword, name:"previousPassword", min: 6)
            try validate(previousPassword, name:"previousPassword", pattern: "[\\S]+")
            try validate(proposedPassword, name:"proposedPassword", max: 256)
            try validate(proposedPassword, name:"proposedPassword", min: 6)
            try validate(proposedPassword, name:"proposedPassword", pattern: "[\\S]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case previousPassword = "PreviousPassword"
            case proposedPassword = "ProposedPassword"
        }
    }

    public struct ChangePasswordResponse: AWSShape {


        public init() {
        }

    }

    public struct CodeDeliveryDetailsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .string), 
            AWSShapeMember(label: "DeliveryMedium", required: false, type: .enum), 
            AWSShapeMember(label: "Destination", required: false, type: .string)
        ]

        /// The attribute name.
        public let attributeName: String?
        /// The delivery medium (email message or phone number).
        public let deliveryMedium: DeliveryMediumType?
        /// The destination for the code delivery details.
        public let destination: String?

        public init(attributeName: String? = nil, deliveryMedium: DeliveryMediumType? = nil, destination: String? = nil) {
            self.attributeName = attributeName
            self.deliveryMedium = deliveryMedium
            self.destination = destination
        }

        public func validate() throws {
            try validate(attributeName, name:"attributeName", max: 32)
            try validate(attributeName, name:"attributeName", min: 1)
            try validate(attributeName, name:"attributeName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case deliveryMedium = "DeliveryMedium"
            case destination = "Destination"
        }
    }

    public struct CompromisedCredentialsActionsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventAction", required: true, type: .enum)
        ]

        /// The event action.
        public let eventAction: CompromisedCredentialsEventActionType

        public init(eventAction: CompromisedCredentialsEventActionType) {
            self.eventAction = eventAction
        }

        private enum CodingKeys: String, CodingKey {
            case eventAction = "EventAction"
        }
    }

    public enum CompromisedCredentialsEventActionType: String, CustomStringConvertible, Codable {
        case block = "BLOCK"
        case noAction = "NO_ACTION"
        public var description: String { return self.rawValue }
    }

    public struct CompromisedCredentialsRiskConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Actions", required: true, type: .structure), 
            AWSShapeMember(label: "EventFilter", required: false, type: .list)
        ]

        /// The compromised credentials risk configuration actions.
        public let actions: CompromisedCredentialsActionsType
        /// Perform the action for these events. The default is to perform all events if no event filter is specified.
        public let eventFilter: [EventFilterType]?

        public init(actions: CompromisedCredentialsActionsType, eventFilter: [EventFilterType]? = nil) {
            self.actions = actions
            self.eventFilter = eventFilter
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case eventFilter = "EventFilter"
        }
    }

    public struct ConfirmDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string), 
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "DeviceSecretVerifierConfig", required: false, type: .structure)
        ]

        /// The access token.
        public let accessToken: String
        /// The device key.
        public let deviceKey: String
        /// The device name.
        public let deviceName: String?
        /// The configuration of the device secret verifier.
        public let deviceSecretVerifierConfig: DeviceSecretVerifierConfigType?

        public init(accessToken: String, deviceKey: String, deviceName: String? = nil, deviceSecretVerifierConfig: DeviceSecretVerifierConfigType? = nil) {
            self.accessToken = accessToken
            self.deviceKey = deviceKey
            self.deviceName = deviceName
            self.deviceSecretVerifierConfig = deviceSecretVerifierConfig
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(deviceKey, name:"deviceKey", max: 55)
            try validate(deviceKey, name:"deviceKey", min: 1)
            try validate(deviceKey, name:"deviceKey", pattern: "[\\w-]+_[0-9a-f-]+")
            try validate(deviceName, name:"deviceName", max: 1024)
            try validate(deviceName, name:"deviceName", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case deviceKey = "DeviceKey"
            case deviceName = "DeviceName"
            case deviceSecretVerifierConfig = "DeviceSecretVerifierConfig"
        }
    }

    public struct ConfirmDeviceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserConfirmationNecessary", required: false, type: .boolean)
        ]

        /// Indicates whether the user confirmation is necessary to confirm the device response.
        public let userConfirmationNecessary: Bool?

        public init(userConfirmationNecessary: Bool? = nil) {
            self.userConfirmationNecessary = userConfirmationNecessary
        }

        private enum CodingKeys: String, CodingKey {
            case userConfirmationNecessary = "UserConfirmationNecessary"
        }
    }

    public struct ConfirmForgotPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "ConfirmationCode", required: true, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]

        /// The Amazon Pinpoint analytics metadata for collecting metrics for ConfirmForgotPassword calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The app client ID of the app associated with the user pool.
        public let clientId: String
        /// The confirmation code sent by a user's request to retrieve a forgotten password. For more information, see 
        public let confirmationCode: String
        /// The password sent by a user's request to retrieve a forgotten password.
        public let password: String
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// The user name of the user for whom you want to enter a code to retrieve a forgotten password.
        public let username: String

        public init(analyticsMetadata: AnalyticsMetadataType? = nil, clientId: String, confirmationCode: String, password: String, secretHash: String? = nil, userContextData: UserContextDataType? = nil, username: String) {
            self.analyticsMetadata = analyticsMetadata
            self.clientId = clientId
            self.confirmationCode = confirmationCode
            self.password = password
            self.secretHash = secretHash
            self.userContextData = userContextData
            self.username = username
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(confirmationCode, name:"confirmationCode", max: 2048)
            try validate(confirmationCode, name:"confirmationCode", min: 1)
            try validate(confirmationCode, name:"confirmationCode", pattern: "[\\S]+")
            try validate(password, name:"password", max: 256)
            try validate(password, name:"password", min: 6)
            try validate(password, name:"password", pattern: "[\\S]+")
            try validate(secretHash, name:"secretHash", max: 128)
            try validate(secretHash, name:"secretHash", min: 1)
            try validate(secretHash, name:"secretHash", pattern: "[\\w+=/]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsMetadata = "AnalyticsMetadata"
            case clientId = "ClientId"
            case confirmationCode = "ConfirmationCode"
            case password = "Password"
            case secretHash = "SecretHash"
            case userContextData = "UserContextData"
            case username = "Username"
        }
    }

    public struct ConfirmForgotPasswordResponse: AWSShape {


        public init() {
        }

    }

    public struct ConfirmSignUpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "ConfirmationCode", required: true, type: .string), 
            AWSShapeMember(label: "ForceAliasCreation", required: false, type: .boolean), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]

        /// The Amazon Pinpoint analytics metadata for collecting metrics for ConfirmSignUp calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The ID of the app client associated with the user pool.
        public let clientId: String
        /// The confirmation code sent by a user's request to confirm registration.
        public let confirmationCode: String
        /// Boolean to be specified to force user confirmation irrespective of existing alias. By default set to False. If this parameter is set to True and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to False, the API will throw an AliasExistsException error.
        public let forceAliasCreation: Bool?
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// The user name of the user whose registration you wish to confirm.
        public let username: String

        public init(analyticsMetadata: AnalyticsMetadataType? = nil, clientId: String, confirmationCode: String, forceAliasCreation: Bool? = nil, secretHash: String? = nil, userContextData: UserContextDataType? = nil, username: String) {
            self.analyticsMetadata = analyticsMetadata
            self.clientId = clientId
            self.confirmationCode = confirmationCode
            self.forceAliasCreation = forceAliasCreation
            self.secretHash = secretHash
            self.userContextData = userContextData
            self.username = username
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(confirmationCode, name:"confirmationCode", max: 2048)
            try validate(confirmationCode, name:"confirmationCode", min: 1)
            try validate(confirmationCode, name:"confirmationCode", pattern: "[\\S]+")
            try validate(secretHash, name:"secretHash", max: 128)
            try validate(secretHash, name:"secretHash", min: 1)
            try validate(secretHash, name:"secretHash", pattern: "[\\w+=/]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsMetadata = "AnalyticsMetadata"
            case clientId = "ClientId"
            case confirmationCode = "ConfirmationCode"
            case forceAliasCreation = "ForceAliasCreation"
            case secretHash = "SecretHash"
            case userContextData = "UserContextData"
            case username = "Username"
        }
    }

    public struct ConfirmSignUpResponse: AWSShape {


        public init() {
        }

    }

    public struct ContextDataType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodedData", required: false, type: .string), 
            AWSShapeMember(label: "HttpHeaders", required: true, type: .list), 
            AWSShapeMember(label: "IpAddress", required: true, type: .string), 
            AWSShapeMember(label: "ServerName", required: true, type: .string), 
            AWSShapeMember(label: "ServerPath", required: true, type: .string)
        ]

        /// Encoded data containing device fingerprinting details, collected using the Amazon Cognito context data collection library.
        public let encodedData: String?
        /// HttpHeaders received on your server in same order.
        public let httpHeaders: [HttpHeader]
        /// Source IP address of your user.
        public let ipAddress: String
        /// Your server endpoint where this API is invoked.
        public let serverName: String
        /// Your server path where this API is invoked. 
        public let serverPath: String

        public init(encodedData: String? = nil, httpHeaders: [HttpHeader], ipAddress: String, serverName: String, serverPath: String) {
            self.encodedData = encodedData
            self.httpHeaders = httpHeaders
            self.ipAddress = ipAddress
            self.serverName = serverName
            self.serverPath = serverPath
        }

        private enum CodingKeys: String, CodingKey {
            case encodedData = "EncodedData"
            case httpHeaders = "HttpHeaders"
            case ipAddress = "IpAddress"
            case serverName = "ServerName"
            case serverPath = "ServerPath"
        }
    }

    public struct CreateGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "Precedence", required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// A string containing the description of the group.
        public let description: String?
        /// The name of the group. Must be unique.
        public let groupName: String
        /// A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher or null Precedence values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the cognito:roles and cognito:preferred_role claims in the user's tokens. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim is not set in users' tokens. The default Precedence value is null.
        public let precedence: Int32?
        /// The role ARN for the group.
        public let roleArn: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(description: String? = nil, groupName: String, precedence: Int32? = nil, roleArn: String? = nil, userPoolId: String) {
            self.description = description
            self.groupName = groupName
            self.precedence = precedence
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(description, name:"description", max: 2048)
            try validate(groupName, name:"groupName", max: 128)
            try validate(groupName, name:"groupName", min: 1)
            try validate(groupName, name:"groupName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(precedence, name:"precedence", min: 0)
            try validate(roleArn, name:"roleArn", max: 2048)
            try validate(roleArn, name:"roleArn", min: 20)
            try validate(roleArn, name:"roleArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case groupName = "GroupName"
            case precedence = "Precedence"
            case roleArn = "RoleArn"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .structure)
        ]

        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        public func validate() throws {
            try group?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
        }
    }

    public struct CreateIdentityProviderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeMapping", required: false, type: .map), 
            AWSShapeMember(label: "IdpIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "ProviderDetails", required: true, type: .map), 
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "ProviderType", required: true, type: .enum), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// A mapping of identity provider attributes to standard and custom user pool attributes.
        public let attributeMapping: [String: String]?
        /// A list of identity provider identifiers.
        public let idpIdentifiers: [String]?
        /// The identity provider details, such as MetadataURL and MetadataFile.
        public let providerDetails: [String: String]
        /// The identity provider name.
        public let providerName: String
        /// The identity provider type.
        public let providerType: IdentityProviderTypeType
        /// The user pool ID.
        public let userPoolId: String

        public init(attributeMapping: [String: String]? = nil, idpIdentifiers: [String]? = nil, providerDetails: [String: String], providerName: String, providerType: IdentityProviderTypeType, userPoolId: String) {
            self.attributeMapping = attributeMapping
            self.idpIdentifiers = idpIdentifiers
            self.providerDetails = providerDetails
            self.providerName = providerName
            self.providerType = providerType
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try idpIdentifiers?.forEach {
                try validate($0, name:"idpIdentifiers[]", max: 40)
                try validate($0, name:"idpIdentifiers[]", min: 1)
                try validate($0, name:"idpIdentifiers[]", pattern: "[\\w\\s+=.@-]+")
            }
            try validate(idpIdentifiers, name:"idpIdentifiers", max: 50)
            try validate(idpIdentifiers, name:"idpIdentifiers", min: 0)
            try validate(providerName, name:"providerName", max: 32)
            try validate(providerName, name:"providerName", min: 1)
            try validate(providerName, name:"providerName", pattern: "[^_][\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}][^_]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeMapping = "AttributeMapping"
            case idpIdentifiers = "IdpIdentifiers"
            case providerDetails = "ProviderDetails"
            case providerName = "ProviderName"
            case providerType = "ProviderType"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateIdentityProviderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]

        /// The newly created identity provider object.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        public func validate() throws {
            try identityProvider.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public struct CreateResourceServerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Identifier", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Scopes", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located. For example, https://my-weather-api.example.com.
        public let identifier: String
        /// A friendly name for the resource server.
        public let name: String
        /// A list of scopes. Each scope is map, where the keys are name and description.
        public let scopes: [ResourceServerScopeType]?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(identifier: String, name: String, scopes: [ResourceServerScopeType]? = nil, userPoolId: String) {
            self.identifier = identifier
            self.name = name
            self.scopes = scopes
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(identifier, name:"identifier", max: 256)
            try validate(identifier, name:"identifier", min: 1)
            try validate(identifier, name:"identifier", pattern: "[\\x21\\x23-\\x5B\\x5D-\\x7E]+")
            try validate(name, name:"name", max: 256)
            try validate(name, name:"name", min: 1)
            try validate(name, name:"name", pattern: "[\\w\\s+=,.@-]+")
            try scopes?.forEach {
                try $0.validate()
            }
            try validate(scopes, name:"scopes", max: 25)
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case name = "Name"
            case scopes = "Scopes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateResourceServerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceServer", required: true, type: .structure)
        ]

        /// The newly created resource server.
        public let resourceServer: ResourceServerType

        public init(resourceServer: ResourceServerType) {
            self.resourceServer = resourceServer
        }

        public func validate() throws {
            try resourceServer.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case resourceServer = "ResourceServer"
        }
    }

    public struct CreateUserImportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "JobName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The role ARN for the Amazon CloudWatch Logging role for the user import job.
        public let cloudWatchLogsRoleArn: String
        /// The job name for the user import job.
        public let jobName: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(cloudWatchLogsRoleArn: String, jobName: String, userPoolId: String) {
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.jobName = jobName
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(cloudWatchLogsRoleArn, name:"cloudWatchLogsRoleArn", max: 2048)
            try validate(cloudWatchLogsRoleArn, name:"cloudWatchLogsRoleArn", min: 20)
            try validate(cloudWatchLogsRoleArn, name:"cloudWatchLogsRoleArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(jobName, name:"jobName", max: 128)
            try validate(jobName, name:"jobName", min: 1)
            try validate(jobName, name:"jobName", pattern: "[\\w\\s+=,.@-]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case jobName = "JobName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateUserImportJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]

        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        public func validate() throws {
            try userImportJob?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public struct CreateUserPoolClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedOAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlowsUserPoolClient", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowedOAuthScopes", required: false, type: .list), 
            AWSShapeMember(label: "AnalyticsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CallbackURLs", required: false, type: .list), 
            AWSShapeMember(label: "ClientName", required: true, type: .string), 
            AWSShapeMember(label: "DefaultRedirectURI", required: false, type: .string), 
            AWSShapeMember(label: "ExplicitAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "GenerateSecret", required: false, type: .boolean), 
            AWSShapeMember(label: "LogoutURLs", required: false, type: .list), 
            AWSShapeMember(label: "ReadAttributes", required: false, type: .list), 
            AWSShapeMember(label: "RefreshTokenValidity", required: false, type: .integer), 
            AWSShapeMember(label: "SupportedIdentityProviders", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "WriteAttributes", required: false, type: .list)
        ]

        /// Set to code to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint. Set to token to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.
        public let allowedOAuthFlows: [OAuthFlowType]?
        /// Set to True if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        public let allowedOAuthFlowsUserPoolClient: Bool?
        /// A list of allowed OAuth scopes. Currently supported values are "phone", "email", "openid", and "Cognito".
        public let allowedOAuthScopes: [String]?
        /// The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.
        public let analyticsConfiguration: AnalyticsConfigurationType?
        /// A list of allowed redirect (callback) URLs for the identity providers. A redirect URI must:   Be an absolute URI.   Be registered with the authorization server.   Not include a fragment component.   See OAuth 2.0 - Redirection Endpoint. Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
        public let callbackURLs: [String]?
        /// The client name for the user pool client you would like to create.
        public let clientName: String
        /// The default redirect URI. Must be in the CallbackURLs list. A redirect URI must:   Be an absolute URI.   Be registered with the authorization server.   Not include a fragment component.   See OAuth 2.0 - Redirection Endpoint. Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
        public let defaultRedirectURI: String?
        /// The explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// Boolean to specify whether you want to generate a secret for the user pool client being created.
        public let generateSecret: Bool?
        /// A list of allowed logout URLs for the identity providers.
        public let logoutURLs: [String]?
        /// The read attributes.
        public let readAttributes: [String]?
        /// The time limit, in days, after which the refresh token is no longer valid and cannot be used.
        public let refreshTokenValidity: Int32?
        /// A list of provider names for the identity providers that are supported on this client. The following are supported: COGNITO, Facebook, Google and LoginWithAmazon.
        public let supportedIdentityProviders: [String]?
        /// The user pool ID for the user pool where you want to create a user pool client.
        public let userPoolId: String
        /// The user pool attributes that the app client can write to. If your app client allows users to sign in through an identity provider, this array must include all attributes that are mapped to identity provider attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If your app client lacks write access to a mapped attribute, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see Specifying Identity Provider Attribute Mappings for Your User Pool.
        public let writeAttributes: [String]?

        public init(allowedOAuthFlows: [OAuthFlowType]? = nil, allowedOAuthFlowsUserPoolClient: Bool? = nil, allowedOAuthScopes: [String]? = nil, analyticsConfiguration: AnalyticsConfigurationType? = nil, callbackURLs: [String]? = nil, clientName: String, defaultRedirectURI: String? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, generateSecret: Bool? = nil, logoutURLs: [String]? = nil, readAttributes: [String]? = nil, refreshTokenValidity: Int32? = nil, supportedIdentityProviders: [String]? = nil, userPoolId: String, writeAttributes: [String]? = nil) {
            self.allowedOAuthFlows = allowedOAuthFlows
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.allowedOAuthScopes = allowedOAuthScopes
            self.analyticsConfiguration = analyticsConfiguration
            self.callbackURLs = callbackURLs
            self.clientName = clientName
            self.defaultRedirectURI = defaultRedirectURI
            self.explicitAuthFlows = explicitAuthFlows
            self.generateSecret = generateSecret
            self.logoutURLs = logoutURLs
            self.readAttributes = readAttributes
            self.refreshTokenValidity = refreshTokenValidity
            self.supportedIdentityProviders = supportedIdentityProviders
            self.userPoolId = userPoolId
            self.writeAttributes = writeAttributes
        }

        public func validate() throws {
            try validate(allowedOAuthFlows, name:"allowedOAuthFlows", max: 3)
            try validate(allowedOAuthFlows, name:"allowedOAuthFlows", min: 0)
            try allowedOAuthScopes?.forEach {
                try validate($0, name:"allowedOAuthScopes[]", max: 256)
                try validate($0, name:"allowedOAuthScopes[]", min: 1)
                try validate($0, name:"allowedOAuthScopes[]", pattern: "[\\x21\\x23-\\x5B\\x5D-\\x7E]+")
            }
            try validate(allowedOAuthScopes, name:"allowedOAuthScopes", max: 25)
            try analyticsConfiguration?.validate()
            try callbackURLs?.forEach {
                try validate($0, name:"callbackURLs[]", max: 1024)
                try validate($0, name:"callbackURLs[]", min: 1)
                try validate($0, name:"callbackURLs[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(callbackURLs, name:"callbackURLs", max: 100)
            try validate(callbackURLs, name:"callbackURLs", min: 0)
            try validate(clientName, name:"clientName", max: 128)
            try validate(clientName, name:"clientName", min: 1)
            try validate(clientName, name:"clientName", pattern: "[\\w\\s+=,.@-]+")
            try validate(defaultRedirectURI, name:"defaultRedirectURI", max: 1024)
            try validate(defaultRedirectURI, name:"defaultRedirectURI", min: 1)
            try validate(defaultRedirectURI, name:"defaultRedirectURI", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try logoutURLs?.forEach {
                try validate($0, name:"logoutURLs[]", max: 1024)
                try validate($0, name:"logoutURLs[]", min: 1)
                try validate($0, name:"logoutURLs[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(logoutURLs, name:"logoutURLs", max: 100)
            try validate(logoutURLs, name:"logoutURLs", min: 0)
            try readAttributes?.forEach {
                try validate($0, name:"readAttributes[]", max: 2048)
                try validate($0, name:"readAttributes[]", min: 1)
            }
            try validate(refreshTokenValidity, name:"refreshTokenValidity", max: 3650)
            try validate(refreshTokenValidity, name:"refreshTokenValidity", min: 0)
            try supportedIdentityProviders?.forEach {
                try validate($0, name:"supportedIdentityProviders[]", max: 32)
                try validate($0, name:"supportedIdentityProviders[]", min: 1)
                try validate($0, name:"supportedIdentityProviders[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
            try writeAttributes?.forEach {
                try validate($0, name:"writeAttributes[]", max: 2048)
                try validate($0, name:"writeAttributes[]", min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case allowedOAuthFlows = "AllowedOAuthFlows"
            case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
            case allowedOAuthScopes = "AllowedOAuthScopes"
            case analyticsConfiguration = "AnalyticsConfiguration"
            case callbackURLs = "CallbackURLs"
            case clientName = "ClientName"
            case defaultRedirectURI = "DefaultRedirectURI"
            case explicitAuthFlows = "ExplicitAuthFlows"
            case generateSecret = "GenerateSecret"
            case logoutURLs = "LogoutURLs"
            case readAttributes = "ReadAttributes"
            case refreshTokenValidity = "RefreshTokenValidity"
            case supportedIdentityProviders = "SupportedIdentityProviders"
            case userPoolId = "UserPoolId"
            case writeAttributes = "WriteAttributes"
        }
    }

    public struct CreateUserPoolClientResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolClient", required: false, type: .structure)
        ]

        /// The user pool client that was just created.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        public func validate() throws {
            try userPoolClient?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolClient = "UserPoolClient"
        }
    }

    public struct CreateUserPoolDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomDomainConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Domain", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application. Provide this parameter only if you want to use a custom domain for your user pool. Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain instead. For more information about the hosted domain and custom domains, see Configuring a User Pool Domain.
        public let customDomainConfig: CustomDomainConfigType?
        /// The domain string.
        public let domain: String
        /// The user pool ID.
        public let userPoolId: String

        public init(customDomainConfig: CustomDomainConfigType? = nil, domain: String, userPoolId: String) {
            self.customDomainConfig = customDomainConfig
            self.domain = domain
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try customDomainConfig?.validate()
            try validate(domain, name:"domain", max: 63)
            try validate(domain, name:"domain", min: 1)
            try validate(domain, name:"domain", pattern: "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case customDomainConfig = "CustomDomainConfig"
            case domain = "Domain"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateUserPoolDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontDomain", required: false, type: .string)
        ]

        /// The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
        public let cloudFrontDomain: String?

        public init(cloudFrontDomain: String? = nil) {
            self.cloudFrontDomain = cloudFrontDomain
        }

        public func validate() throws {
            try validate(cloudFrontDomain, name:"cloudFrontDomain", max: 63)
            try validate(cloudFrontDomain, name:"cloudFrontDomain", min: 1)
            try validate(cloudFrontDomain, name:"cloudFrontDomain", pattern: "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$")
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontDomain = "CloudFrontDomain"
        }
    }

    public struct CreateUserPoolRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdminCreateUserConfig", required: false, type: .structure), 
            AWSShapeMember(label: "AliasAttributes", required: false, type: .list), 
            AWSShapeMember(label: "AutoVerifiedAttributes", required: false, type: .list), 
            AWSShapeMember(label: "DeviceConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EmailConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EmailVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailVerificationSubject", required: false, type: .string), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "Policies", required: false, type: .structure), 
            AWSShapeMember(label: "PoolName", required: true, type: .string), 
            AWSShapeMember(label: "Schema", required: false, type: .list), 
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "UsernameAttributes", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolAddOns", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolTags", required: false, type: .map), 
            AWSShapeMember(label: "VerificationMessageTemplate", required: false, type: .structure)
        ]

        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username.
        public let aliasAttributes: [AliasAttributeType]?
        /// The attributes to be auto-verified. Possible values: email, phone_number.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// The device configuration.
        public let deviceConfiguration: DeviceConfigurationType?
        /// The email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// A string representing the email verification message.
        public let emailVerificationMessage: String?
        /// A string representing the email verification subject.
        public let emailVerificationSubject: String?
        /// The Lambda trigger configuration information for the new user pool.  In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you will need to make an extra call to add permission for these event sources to invoke your Lambda function.  For more information on using the Lambda API to add permission, see  AddPermission .  For adding permission using the AWS CLI, see  add-permission . 
        public let lambdaConfig: LambdaConfigType?
        /// Specifies MFA configuration details.
        public let mfaConfiguration: UserPoolMfaType?
        /// The policies associated with the new user pool.
        public let policies: UserPoolPolicyType?
        /// A string used to name the user pool.
        public let poolName: String
        /// An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
        public let schema: [SchemaAttributeType]?
        /// A string representing the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// A string representing the SMS verification message.
        public let smsVerificationMessage: String?
        /// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
        public let usernameAttributes: [UsernameAttributeType]?
        /// Used to enable advanced security risk detection. Set the key AdvancedSecurityMode to the value "AUDIT".
        public let userPoolAddOns: UserPoolAddOnsType?
        /// The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
        public let userPoolTags: [String: String]?
        /// The template for the verification message that the user sees when the app requests permission to access the user's information.
        public let verificationMessageTemplate: VerificationMessageTemplateType?

        public init(adminCreateUserConfig: AdminCreateUserConfigType? = nil, aliasAttributes: [AliasAttributeType]? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, deviceConfiguration: DeviceConfigurationType? = nil, emailConfiguration: EmailConfigurationType? = nil, emailVerificationMessage: String? = nil, emailVerificationSubject: String? = nil, lambdaConfig: LambdaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil, policies: UserPoolPolicyType? = nil, poolName: String, schema: [SchemaAttributeType]? = nil, smsAuthenticationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, smsVerificationMessage: String? = nil, usernameAttributes: [UsernameAttributeType]? = nil, userPoolAddOns: UserPoolAddOnsType? = nil, userPoolTags: [String: String]? = nil, verificationMessageTemplate: VerificationMessageTemplateType? = nil) {
            self.adminCreateUserConfig = adminCreateUserConfig
            self.aliasAttributes = aliasAttributes
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
            self.emailConfiguration = emailConfiguration
            self.emailVerificationMessage = emailVerificationMessage
            self.emailVerificationSubject = emailVerificationSubject
            self.lambdaConfig = lambdaConfig
            self.mfaConfiguration = mfaConfiguration
            self.policies = policies
            self.poolName = poolName
            self.schema = schema
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.usernameAttributes = usernameAttributes
            self.userPoolAddOns = userPoolAddOns
            self.userPoolTags = userPoolTags
            self.verificationMessageTemplate = verificationMessageTemplate
        }

        public func validate() throws {
            try adminCreateUserConfig?.validate()
            try emailConfiguration?.validate()
            try validate(emailVerificationMessage, name:"emailVerificationMessage", max: 20000)
            try validate(emailVerificationMessage, name:"emailVerificationMessage", min: 6)
            try validate(emailVerificationMessage, name:"emailVerificationMessage", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*")
            try validate(emailVerificationSubject, name:"emailVerificationSubject", max: 140)
            try validate(emailVerificationSubject, name:"emailVerificationSubject", min: 1)
            try validate(emailVerificationSubject, name:"emailVerificationSubject", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+")
            try lambdaConfig?.validate()
            try policies?.validate()
            try validate(poolName, name:"poolName", max: 128)
            try validate(poolName, name:"poolName", min: 1)
            try validate(poolName, name:"poolName", pattern: "[\\w\\s+=,.@-]+")
            try schema?.forEach {
                try $0.validate()
            }
            try validate(schema, name:"schema", max: 50)
            try validate(schema, name:"schema", min: 1)
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", max: 140)
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", min: 6)
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", pattern: ".*\\{####\\}.*")
            try smsConfiguration?.validate()
            try validate(smsVerificationMessage, name:"smsVerificationMessage", max: 140)
            try validate(smsVerificationMessage, name:"smsVerificationMessage", min: 6)
            try validate(smsVerificationMessage, name:"smsVerificationMessage", pattern: ".*\\{####\\}.*")
            try verificationMessageTemplate?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case adminCreateUserConfig = "AdminCreateUserConfig"
            case aliasAttributes = "AliasAttributes"
            case autoVerifiedAttributes = "AutoVerifiedAttributes"
            case deviceConfiguration = "DeviceConfiguration"
            case emailConfiguration = "EmailConfiguration"
            case emailVerificationMessage = "EmailVerificationMessage"
            case emailVerificationSubject = "EmailVerificationSubject"
            case lambdaConfig = "LambdaConfig"
            case mfaConfiguration = "MfaConfiguration"
            case policies = "Policies"
            case poolName = "PoolName"
            case schema = "Schema"
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case smsConfiguration = "SmsConfiguration"
            case smsVerificationMessage = "SmsVerificationMessage"
            case usernameAttributes = "UsernameAttributes"
            case userPoolAddOns = "UserPoolAddOns"
            case userPoolTags = "UserPoolTags"
            case verificationMessageTemplate = "VerificationMessageTemplate"
        }
    }

    public struct CreateUserPoolResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPool", required: false, type: .structure)
        ]

        /// A container for the user pool details.
        public let userPool: UserPoolType?

        public init(userPool: UserPoolType? = nil) {
            self.userPool = userPool
        }

        public func validate() throws {
            try userPool?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case userPool = "UserPool"
        }
    }

    public struct CustomDomainConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.
        public let certificateArn: String

        public init(certificateArn: String) {
            self.certificateArn = certificateArn
        }

        public func validate() throws {
            try validate(certificateArn, name:"certificateArn", max: 2048)
            try validate(certificateArn, name:"certificateArn", min: 20)
            try validate(certificateArn, name:"certificateArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
        }
    }

    public enum DefaultEmailOptionType: String, CustomStringConvertible, Codable {
        case confirmWithLink = "CONFIRM_WITH_LINK"
        case confirmWithCode = "CONFIRM_WITH_CODE"
        public var description: String { return self.rawValue }
    }

    public struct DeleteGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The name of the group.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, userPoolId: String) {
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(groupName, name:"groupName", max: 128)
            try validate(groupName, name:"groupName", min: 1)
            try validate(groupName, name:"groupName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DeleteIdentityProviderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The identity provider name.
        public let providerName: String
        /// The user pool ID.
        public let userPoolId: String

        public init(providerName: String, userPoolId: String) {
            self.providerName = providerName
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(providerName, name:"providerName", max: 32)
            try validate(providerName, name:"providerName", min: 1)
            try validate(providerName, name:"providerName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "ProviderName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DeleteResourceServerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Identifier", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The identifier for the resource server.
        public let identifier: String
        /// The user pool ID for the user pool that hosts the resource server.
        public let userPoolId: String

        public init(identifier: String, userPoolId: String) {
            self.identifier = identifier
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(identifier, name:"identifier", max: 256)
            try validate(identifier, name:"identifier", min: 1)
            try validate(identifier, name:"identifier", pattern: "[\\x21\\x23-\\x5B\\x5D-\\x7E]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DeleteUserAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string), 
            AWSShapeMember(label: "UserAttributeNames", required: true, type: .list)
        ]

        /// The access token used in the request to delete user attributes.
        public let accessToken: String
        /// An array of strings representing the user attribute names you wish to delete. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributeNames: [String]

        public init(accessToken: String, userAttributeNames: [String]) {
            self.accessToken = accessToken
            self.userAttributeNames = userAttributeNames
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try userAttributeNames.forEach {
                try validate($0, name:"userAttributeNames[]", max: 32)
                try validate($0, name:"userAttributeNames[]", min: 1)
                try validate($0, name:"userAttributeNames[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case userAttributeNames = "UserAttributeNames"
        }
    }

    public struct DeleteUserAttributesResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteUserPoolClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The app client ID of the app associated with the user pool.
        public let clientId: String
        /// The user pool ID for the user pool where you want to delete the client.
        public let userPoolId: String

        public init(clientId: String, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DeleteUserPoolDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The domain string.
        public let domain: String
        /// The user pool ID.
        public let userPoolId: String

        public init(domain: String, userPoolId: String) {
            self.domain = domain
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(domain, name:"domain", max: 63)
            try validate(domain, name:"domain", min: 1)
            try validate(domain, name:"domain", pattern: "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DeleteUserPoolDomainResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteUserPoolRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user pool ID for the user pool you want to delete.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct DeleteUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]

        /// The access token from a request to delete a user.
        public let accessToken: String

        public init(accessToken: String) {
            self.accessToken = accessToken
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
        }
    }

    public enum DeliveryMediumType: String, CustomStringConvertible, Codable {
        case sms = "SMS"
        case email = "EMAIL"
        public var description: String { return self.rawValue }
    }

    public struct DescribeIdentityProviderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The identity provider name.
        public let providerName: String
        /// The user pool ID.
        public let userPoolId: String

        public init(providerName: String, userPoolId: String) {
            self.providerName = providerName
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(providerName, name:"providerName", max: 32)
            try validate(providerName, name:"providerName", min: 1)
            try validate(providerName, name:"providerName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "ProviderName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DescribeIdentityProviderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]

        /// The identity provider that was deleted.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        public func validate() throws {
            try identityProvider.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public struct DescribeResourceServerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Identifier", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The identifier for the resource server
        public let identifier: String
        /// The user pool ID for the user pool that hosts the resource server.
        public let userPoolId: String

        public init(identifier: String, userPoolId: String) {
            self.identifier = identifier
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(identifier, name:"identifier", max: 256)
            try validate(identifier, name:"identifier", min: 1)
            try validate(identifier, name:"identifier", pattern: "[\\x21\\x23-\\x5B\\x5D-\\x7E]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DescribeResourceServerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceServer", required: true, type: .structure)
        ]

        /// The resource server.
        public let resourceServer: ResourceServerType

        public init(resourceServer: ResourceServerType) {
            self.resourceServer = resourceServer
        }

        public func validate() throws {
            try resourceServer.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case resourceServer = "ResourceServer"
        }
    }

    public struct DescribeRiskConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The app client ID.
        public let clientId: String?
        /// The user pool ID.
        public let userPoolId: String

        public init(clientId: String? = nil, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DescribeRiskConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RiskConfiguration", required: true, type: .structure)
        ]

        /// The risk configuration.
        public let riskConfiguration: RiskConfigurationType

        public init(riskConfiguration: RiskConfigurationType) {
            self.riskConfiguration = riskConfiguration
        }

        public func validate() throws {
            try riskConfiguration.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case riskConfiguration = "RiskConfiguration"
        }
    }

    public struct DescribeUserImportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(jobId, name:"jobId", max: 55)
            try validate(jobId, name:"jobId", min: 1)
            try validate(jobId, name:"jobId", pattern: "import-[0-9a-zA-Z-]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DescribeUserImportJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]

        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        public func validate() throws {
            try userImportJob?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public struct DescribeUserPoolClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The app client ID of the app associated with the user pool.
        public let clientId: String
        /// The user pool ID for the user pool you want to describe.
        public let userPoolId: String

        public init(clientId: String, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DescribeUserPoolClientResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolClient", required: false, type: .structure)
        ]

        /// The user pool client from a server response to describe the user pool client.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        public func validate() throws {
            try userPoolClient?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolClient = "UserPoolClient"
        }
    }

    public struct DescribeUserPoolDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", required: true, type: .string)
        ]

        /// The domain string.
        public let domain: String

        public init(domain: String) {
            self.domain = domain
        }

        public func validate() throws {
            try validate(domain, name:"domain", max: 63)
            try validate(domain, name:"domain", min: 1)
            try validate(domain, name:"domain", pattern: "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$")
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
        }
    }

    public struct DescribeUserPoolDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainDescription", required: false, type: .structure)
        ]

        /// A domain description object containing information about the domain.
        public let domainDescription: DomainDescriptionType?

        public init(domainDescription: DomainDescriptionType? = nil) {
            self.domainDescription = domainDescription
        }

        public func validate() throws {
            try domainDescription?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case domainDescription = "DomainDescription"
        }
    }

    public struct DescribeUserPoolRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user pool ID for the user pool you want to describe.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct DescribeUserPoolResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPool", required: false, type: .structure)
        ]

        /// The container of metadata returned by the server to describe the pool.
        public let userPool: UserPoolType?

        public init(userPool: UserPoolType? = nil) {
            self.userPool = userPool
        }

        public func validate() throws {
            try userPool?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case userPool = "UserPool"
        }
    }

    public struct DeviceConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeRequiredOnNewDevice", required: false, type: .boolean), 
            AWSShapeMember(label: "DeviceOnlyRememberedOnUserPrompt", required: false, type: .boolean)
        ]

        /// Indicates whether a challenge is required on a new device. Only applicable to a new device.
        public let challengeRequiredOnNewDevice: Bool?
        /// If true, a device is only remembered on user prompt.
        public let deviceOnlyRememberedOnUserPrompt: Bool?

        public init(challengeRequiredOnNewDevice: Bool? = nil, deviceOnlyRememberedOnUserPrompt: Bool? = nil) {
            self.challengeRequiredOnNewDevice = challengeRequiredOnNewDevice
            self.deviceOnlyRememberedOnUserPrompt = deviceOnlyRememberedOnUserPrompt
        }

        private enum CodingKeys: String, CodingKey {
            case challengeRequiredOnNewDevice = "ChallengeRequiredOnNewDevice"
            case deviceOnlyRememberedOnUserPrompt = "DeviceOnlyRememberedOnUserPrompt"
        }
    }

    public enum DeviceRememberedStatusType: String, CustomStringConvertible, Codable {
        case remembered = "remembered"
        case notRemembered = "not_remembered"
        public var description: String { return self.rawValue }
    }

    public struct DeviceSecretVerifierConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PasswordVerifier", required: false, type: .string), 
            AWSShapeMember(label: "Salt", required: false, type: .string)
        ]

        /// The password verifier.
        public let passwordVerifier: String?
        /// The salt.
        public let salt: String?

        public init(passwordVerifier: String? = nil, salt: String? = nil) {
            self.passwordVerifier = passwordVerifier
            self.salt = salt
        }

        private enum CodingKeys: String, CodingKey {
            case passwordVerifier = "PasswordVerifier"
            case salt = "Salt"
        }
    }

    public struct DeviceType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceAttributes", required: false, type: .list), 
            AWSShapeMember(label: "DeviceCreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeviceKey", required: false, type: .string), 
            AWSShapeMember(label: "DeviceLastAuthenticatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeviceLastModifiedDate", required: false, type: .timestamp)
        ]

        /// The device attributes.
        public let deviceAttributes: [AttributeType]?
        /// The creation date of the device.
        public let deviceCreateDate: TimeStamp?
        /// The device key.
        public let deviceKey: String?
        /// The date in which the device was last authenticated.
        public let deviceLastAuthenticatedDate: TimeStamp?
        /// The last modified date of the device.
        public let deviceLastModifiedDate: TimeStamp?

        public init(deviceAttributes: [AttributeType]? = nil, deviceCreateDate: TimeStamp? = nil, deviceKey: String? = nil, deviceLastAuthenticatedDate: TimeStamp? = nil, deviceLastModifiedDate: TimeStamp? = nil) {
            self.deviceAttributes = deviceAttributes
            self.deviceCreateDate = deviceCreateDate
            self.deviceKey = deviceKey
            self.deviceLastAuthenticatedDate = deviceLastAuthenticatedDate
            self.deviceLastModifiedDate = deviceLastModifiedDate
        }

        public func validate() throws {
            try deviceAttributes?.forEach {
                try $0.validate()
            }
            try validate(deviceKey, name:"deviceKey", max: 55)
            try validate(deviceKey, name:"deviceKey", min: 1)
            try validate(deviceKey, name:"deviceKey", pattern: "[\\w-]+_[0-9a-f-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case deviceAttributes = "DeviceAttributes"
            case deviceCreateDate = "DeviceCreateDate"
            case deviceKey = "DeviceKey"
            case deviceLastAuthenticatedDate = "DeviceLastAuthenticatedDate"
            case deviceLastModifiedDate = "DeviceLastModifiedDate"
        }
    }

    public struct DomainDescriptionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AWSAccountId", required: false, type: .string), 
            AWSShapeMember(label: "CloudFrontDistribution", required: false, type: .string), 
            AWSShapeMember(label: "CustomDomainConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "S3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]

        /// The AWS account ID for the user pool owner.
        public let aWSAccountId: String?
        /// The ARN of the CloudFront distribution.
        public let cloudFrontDistribution: String?
        /// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
        public let customDomainConfig: CustomDomainConfigType?
        /// The domain string.
        public let domain: String?
        /// The S3 bucket where the static files for this domain are stored.
        public let s3Bucket: String?
        /// The domain status.
        public let status: DomainStatusType?
        /// The user pool ID.
        public let userPoolId: String?
        /// The app version.
        public let version: String?

        public init(aWSAccountId: String? = nil, cloudFrontDistribution: String? = nil, customDomainConfig: CustomDomainConfigType? = nil, domain: String? = nil, s3Bucket: String? = nil, status: DomainStatusType? = nil, userPoolId: String? = nil, version: String? = nil) {
            self.aWSAccountId = aWSAccountId
            self.cloudFrontDistribution = cloudFrontDistribution
            self.customDomainConfig = customDomainConfig
            self.domain = domain
            self.s3Bucket = s3Bucket
            self.status = status
            self.userPoolId = userPoolId
            self.version = version
        }

        public func validate() throws {
            try customDomainConfig?.validate()
            try validate(domain, name:"domain", max: 63)
            try validate(domain, name:"domain", min: 1)
            try validate(domain, name:"domain", pattern: "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$")
            try validate(s3Bucket, name:"s3Bucket", max: 1024)
            try validate(s3Bucket, name:"s3Bucket", min: 3)
            try validate(s3Bucket, name:"s3Bucket", pattern: "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
            try validate(version, name:"version", max: 20)
            try validate(version, name:"version", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aWSAccountId = "AWSAccountId"
            case cloudFrontDistribution = "CloudFrontDistribution"
            case customDomainConfig = "CustomDomainConfig"
            case domain = "Domain"
            case s3Bucket = "S3Bucket"
            case status = "Status"
            case userPoolId = "UserPoolId"
            case version = "Version"
        }
    }

    public enum DomainStatusType: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case deleting = "DELETING"
        case updating = "UPDATING"
        case active = "ACTIVE"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct EmailConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailSendingAccount", required: false, type: .enum), 
            AWSShapeMember(label: "ReplyToEmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: false, type: .string)
        ]

        /// Specifies whether Amazon Cognito emails your users by using its built-in email functionality or your Amazon SES email configuration. Specify one of the following values:  COGNITO_DEFAULT  When Amazon Cognito emails your users, it uses its built-in email functionality. When you use the default option, Amazon Cognito allows only a limited number of emails each day for your user pool. For typical production environments, the default email limit is below the required delivery volume. To achieve a higher delivery volume, specify DEVELOPER to use your Amazon SES email configuration. To look up the email delivery limit for the default option, see Limits in Amazon Cognito in the Amazon Cognito Developer Guide. The default FROM address is no-reply@verificationemail.com. To customize the FROM address, provide the ARN of an Amazon SES verified email address for the SourceArn parameter.  DEVELOPER  When Amazon Cognito emails your users, it uses your Amazon SES configuration. Amazon Cognito calls Amazon SES on your behalf to send email from your verified email address. When you use this option, the email delivery limits are the same limits that apply to your Amazon SES verified email address in your AWS account. If you use this option, you must provide the ARN of an Amazon SES verified email address for the SourceArn parameter. Before Amazon Cognito can email your users, it requires additional permissions to call Amazon SES on your behalf. When you update your user pool with this option, Amazon Cognito creates a service-linked role, which is a type of IAM role, in your AWS account. This role contains the permissions that allow Amazon Cognito to access Amazon SES and send email messages with your address. For more information about the service-linked role that Amazon Cognito creates, see Using Service-Linked Roles for Amazon Cognito in the Amazon Cognito Developer Guide.  
        public let emailSendingAccount: EmailSendingAccountType?
        /// The destination to which the receiver of the email should reply to.
        public let replyToEmailAddress: String?
        /// The Amazon Resource Name (ARN) of a verified email address in Amazon SES. This email address is used in one of the following ways, depending on the value that you specify for the EmailSendingAccount parameter:   If you specify COGNITO_DEFAULT, Amazon Cognito uses this address as the custom FROM address when it emails your users by using its built-in email account.   If you specify DEVELOPER, Amazon Cognito emails your users with this address by calling Amazon SES on your behalf.  
        public let sourceArn: String?

        public init(emailSendingAccount: EmailSendingAccountType? = nil, replyToEmailAddress: String? = nil, sourceArn: String? = nil) {
            self.emailSendingAccount = emailSendingAccount
            self.replyToEmailAddress = replyToEmailAddress
            self.sourceArn = sourceArn
        }

        public func validate() throws {
            try validate(replyToEmailAddress, name:"replyToEmailAddress", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(sourceArn, name:"sourceArn", max: 2048)
            try validate(sourceArn, name:"sourceArn", min: 20)
            try validate(sourceArn, name:"sourceArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
        }

        private enum CodingKeys: String, CodingKey {
            case emailSendingAccount = "EmailSendingAccount"
            case replyToEmailAddress = "ReplyToEmailAddress"
            case sourceArn = "SourceArn"
        }
    }

    public enum EmailSendingAccountType: String, CustomStringConvertible, Codable {
        case cognitoDefault = "COGNITO_DEFAULT"
        case developer = "DEVELOPER"
        public var description: String { return self.rawValue }
    }

    public struct EventContextDataType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "City", required: false, type: .string), 
            AWSShapeMember(label: "Country", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "Timezone", required: false, type: .string)
        ]

        /// The user's city.
        public let city: String?
        /// The user's country.
        public let country: String?
        /// The user's device name.
        public let deviceName: String?
        /// The user's IP address.
        public let ipAddress: String?
        /// The user's time zone.
        public let timezone: String?

        public init(city: String? = nil, country: String? = nil, deviceName: String? = nil, ipAddress: String? = nil, timezone: String? = nil) {
            self.city = city
            self.country = country
            self.deviceName = deviceName
            self.ipAddress = ipAddress
            self.timezone = timezone
        }

        private enum CodingKeys: String, CodingKey {
            case city = "City"
            case country = "Country"
            case deviceName = "DeviceName"
            case ipAddress = "IpAddress"
            case timezone = "Timezone"
        }
    }

    public struct EventFeedbackType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FeedbackDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "FeedbackValue", required: true, type: .enum), 
            AWSShapeMember(label: "Provider", required: true, type: .string)
        ]

        /// The event feedback date.
        public let feedbackDate: TimeStamp?
        /// The event feedback value.
        public let feedbackValue: FeedbackValueType
        /// The provider.
        public let provider: String

        public init(feedbackDate: TimeStamp? = nil, feedbackValue: FeedbackValueType, provider: String) {
            self.feedbackDate = feedbackDate
            self.feedbackValue = feedbackValue
            self.provider = provider
        }

        private enum CodingKeys: String, CodingKey {
            case feedbackDate = "FeedbackDate"
            case feedbackValue = "FeedbackValue"
            case provider = "Provider"
        }
    }

    public enum EventFilterType: String, CustomStringConvertible, Codable {
        case signIn = "SIGN_IN"
        case passwordChange = "PASSWORD_CHANGE"
        case signUp = "SIGN_UP"
        public var description: String { return self.rawValue }
    }

    public enum EventResponseType: String, CustomStringConvertible, Codable {
        case success = "Success"
        case failure = "Failure"
        public var description: String { return self.rawValue }
    }

    public struct EventRiskType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RiskDecision", required: false, type: .enum), 
            AWSShapeMember(label: "RiskLevel", required: false, type: .enum)
        ]

        /// The risk decision.
        public let riskDecision: RiskDecisionType?
        /// The risk level.
        public let riskLevel: RiskLevelType?

        public init(riskDecision: RiskDecisionType? = nil, riskLevel: RiskLevelType? = nil) {
            self.riskDecision = riskDecision
            self.riskLevel = riskLevel
        }

        private enum CodingKeys: String, CodingKey {
            case riskDecision = "RiskDecision"
            case riskLevel = "RiskLevel"
        }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case signin = "SignIn"
        case signup = "SignUp"
        case forgotpassword = "ForgotPassword"
        public var description: String { return self.rawValue }
    }

    public enum ExplicitAuthFlowsType: String, CustomStringConvertible, Codable {
        case adminNoSrpAuth = "ADMIN_NO_SRP_AUTH"
        case customAuthFlowOnly = "CUSTOM_AUTH_FLOW_ONLY"
        case userPasswordAuth = "USER_PASSWORD_AUTH"
        public var description: String { return self.rawValue }
    }

    public enum FeedbackValueType: String, CustomStringConvertible, Codable {
        case valid = "Valid"
        case invalid = "Invalid"
        public var description: String { return self.rawValue }
    }

    public struct ForgetDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: false, type: .string), 
            AWSShapeMember(label: "DeviceKey", required: true, type: .string)
        ]

        /// The access token for the forgotten device request.
        public let accessToken: String?
        /// The device key.
        public let deviceKey: String

        public init(accessToken: String? = nil, deviceKey: String) {
            self.accessToken = accessToken
            self.deviceKey = deviceKey
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(deviceKey, name:"deviceKey", max: 55)
            try validate(deviceKey, name:"deviceKey", min: 1)
            try validate(deviceKey, name:"deviceKey", pattern: "[\\w-]+_[0-9a-f-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case deviceKey = "DeviceKey"
        }
    }

    public struct ForgotPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]

        /// The Amazon Pinpoint analytics metadata for collecting metrics for ForgotPassword calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// The user name of the user for whom you want to enter a code to reset a forgotten password.
        public let username: String

        public init(analyticsMetadata: AnalyticsMetadataType? = nil, clientId: String, secretHash: String? = nil, userContextData: UserContextDataType? = nil, username: String) {
            self.analyticsMetadata = analyticsMetadata
            self.clientId = clientId
            self.secretHash = secretHash
            self.userContextData = userContextData
            self.username = username
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(secretHash, name:"secretHash", max: 128)
            try validate(secretHash, name:"secretHash", min: 1)
            try validate(secretHash, name:"secretHash", pattern: "[\\w+=/]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsMetadata = "AnalyticsMetadata"
            case clientId = "ClientId"
            case secretHash = "SecretHash"
            case userContextData = "UserContextData"
            case username = "Username"
        }
    }

    public struct ForgotPasswordResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure)
        ]

        /// The code delivery details returned by the server in response to the request to reset a password.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        public func validate() throws {
            try codeDeliveryDetails?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
        }
    }

    public struct GetCSVHeaderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user pool ID for the user pool that the users are to be imported into.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetCSVHeaderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CSVHeader", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]

        /// The header information for the .csv file for the user import job.
        public let cSVHeader: [String]?
        /// The user pool ID for the user pool that the users are to be imported into.
        public let userPoolId: String?

        public init(cSVHeader: [String]? = nil, userPoolId: String? = nil) {
            self.cSVHeader = cSVHeader
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case cSVHeader = "CSVHeader"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: false, type: .string), 
            AWSShapeMember(label: "DeviceKey", required: true, type: .string)
        ]

        /// The access token.
        public let accessToken: String?
        /// The device key.
        public let deviceKey: String

        public init(accessToken: String? = nil, deviceKey: String) {
            self.accessToken = accessToken
            self.deviceKey = deviceKey
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(deviceKey, name:"deviceKey", max: 55)
            try validate(deviceKey, name:"deviceKey", min: 1)
            try validate(deviceKey, name:"deviceKey", pattern: "[\\w-]+_[0-9a-f-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case deviceKey = "DeviceKey"
        }
    }

    public struct GetDeviceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: true, type: .structure)
        ]

        /// The device.
        public let device: DeviceType

        public init(device: DeviceType) {
            self.device = device
        }

        public func validate() throws {
            try device.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
        }
    }

    public struct GetGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The name of the group.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, userPoolId: String) {
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(groupName, name:"groupName", max: 128)
            try validate(groupName, name:"groupName", min: 1)
            try validate(groupName, name:"groupName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .structure)
        ]

        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        public func validate() throws {
            try group?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
        }
    }

    public struct GetIdentityProviderByIdentifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdpIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The identity provider ID.
        public let idpIdentifier: String
        /// The user pool ID.
        public let userPoolId: String

        public init(idpIdentifier: String, userPoolId: String) {
            self.idpIdentifier = idpIdentifier
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(idpIdentifier, name:"idpIdentifier", max: 40)
            try validate(idpIdentifier, name:"idpIdentifier", min: 1)
            try validate(idpIdentifier, name:"idpIdentifier", pattern: "[\\w\\s+=.@-]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case idpIdentifier = "IdpIdentifier"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetIdentityProviderByIdentifierResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]

        /// The identity provider object.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        public func validate() throws {
            try identityProvider.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public struct GetSigningCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user pool ID.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetSigningCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .string)
        ]

        /// The signing certificate.
        public let certificate: String?

        public init(certificate: String? = nil) {
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
        }
    }

    public struct GetUICustomizationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The client ID for the client app.
        public let clientId: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(clientId: String? = nil, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetUICustomizationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UICustomization", required: true, type: .structure)
        ]

        /// The UI customization information.
        public let uICustomization: UICustomizationType

        public init(uICustomization: UICustomizationType) {
            self.uICustomization = uICustomization
        }

        public func validate() throws {
            try uICustomization.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case uICustomization = "UICustomization"
        }
    }

    public struct GetUserAttributeVerificationCodeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string), 
            AWSShapeMember(label: "AttributeName", required: true, type: .string)
        ]

        /// The access token returned by the server response to get the user attribute verification code.
        public let accessToken: String
        /// The attribute name returned by the server response to get the user attribute verification code.
        public let attributeName: String

        public init(accessToken: String, attributeName: String) {
            self.accessToken = accessToken
            self.attributeName = attributeName
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(attributeName, name:"attributeName", max: 32)
            try validate(attributeName, name:"attributeName", min: 1)
            try validate(attributeName, name:"attributeName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case attributeName = "AttributeName"
        }
    }

    public struct GetUserAttributeVerificationCodeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure)
        ]

        /// The code delivery details returned by the server in response to the request to get the user attribute verification code.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        public func validate() throws {
            try codeDeliveryDetails?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
        }
    }

    public struct GetUserPoolMfaConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The user pool ID.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetUserPoolMfaConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "SmsMfaConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SoftwareTokenMfaConfiguration", required: false, type: .structure)
        ]

        /// The multi-factor (MFA) configuration.
        public let mfaConfiguration: UserPoolMfaType?
        /// The SMS text message multi-factor (MFA) configuration.
        public let smsMfaConfiguration: SmsMfaConfigType?
        /// The software token multi-factor (MFA) configuration.
        public let softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType?

        public init(mfaConfiguration: UserPoolMfaType? = nil, smsMfaConfiguration: SmsMfaConfigType? = nil, softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType? = nil) {
            self.mfaConfiguration = mfaConfiguration
            self.smsMfaConfiguration = smsMfaConfiguration
            self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
        }

        public func validate() throws {
            try smsMfaConfiguration?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case mfaConfiguration = "MfaConfiguration"
            case smsMfaConfiguration = "SmsMfaConfiguration"
            case softwareTokenMfaConfiguration = "SoftwareTokenMfaConfiguration"
        }
    }

    public struct GetUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]

        /// The access token returned by the server response to get information about the user.
        public let accessToken: String

        public init(accessToken: String) {
            self.accessToken = accessToken
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
        }
    }

    public struct GetUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MFAOptions", required: false, type: .list), 
            AWSShapeMember(label: "PreferredMfaSetting", required: false, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: true, type: .list), 
            AWSShapeMember(label: "UserMFASettingList", required: false, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]

        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]?
        /// The user's preferred MFA setting.
        public let preferredMfaSetting: String?
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]
        /// The list of the user's MFA settings.
        public let userMFASettingList: [String]?
        /// The user name of the user you wish to retrieve from the get user request.
        public let username: String

        public init(mFAOptions: [MFAOptionType]? = nil, preferredMfaSetting: String? = nil, userAttributes: [AttributeType], userMFASettingList: [String]? = nil, username: String) {
            self.mFAOptions = mFAOptions
            self.preferredMfaSetting = preferredMfaSetting
            self.userAttributes = userAttributes
            self.userMFASettingList = userMFASettingList
            self.username = username
        }

        public func validate() throws {
            try mFAOptions?.forEach {
                try $0.validate()
            }
            try userAttributes.forEach {
                try $0.validate()
            }
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case mFAOptions = "MFAOptions"
            case preferredMfaSetting = "PreferredMfaSetting"
            case userAttributes = "UserAttributes"
            case userMFASettingList = "UserMFASettingList"
            case username = "Username"
        }
    }

    public struct GlobalSignOutRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]

        /// The access token.
        public let accessToken: String

        public init(accessToken: String) {
            self.accessToken = accessToken
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
        }
    }

    public struct GlobalSignOutResponse: AWSShape {


        public init() {
        }

    }

    public struct GroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Precedence", required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]

        /// The date the group was created.
        public let creationDate: TimeStamp?
        /// A string containing the description of the group.
        public let description: String?
        /// The name of the group.
        public let groupName: String?
        /// The date the group was last modified.
        public let lastModifiedDate: TimeStamp?
        /// A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the cognito:roles and cognito:preferred_role claims in the user's tokens. Groups with higher Precedence values take precedence over groups with lower Precedence values or with null Precedence values. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim is not set in users' tokens. The default Precedence value is null.
        public let precedence: Int32?
        /// The role ARN for the group.
        public let roleArn: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String?

        public init(creationDate: TimeStamp? = nil, description: String? = nil, groupName: String? = nil, lastModifiedDate: TimeStamp? = nil, precedence: Int32? = nil, roleArn: String? = nil, userPoolId: String? = nil) {
            self.creationDate = creationDate
            self.description = description
            self.groupName = groupName
            self.lastModifiedDate = lastModifiedDate
            self.precedence = precedence
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(description, name:"description", max: 2048)
            try validate(groupName, name:"groupName", max: 128)
            try validate(groupName, name:"groupName", min: 1)
            try validate(groupName, name:"groupName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(precedence, name:"precedence", min: 0)
            try validate(roleArn, name:"roleArn", max: 2048)
            try validate(roleArn, name:"roleArn", min: 20)
            try validate(roleArn, name:"roleArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case creationDate = "CreationDate"
            case description = "Description"
            case groupName = "GroupName"
            case lastModifiedDate = "LastModifiedDate"
            case precedence = "Precedence"
            case roleArn = "RoleArn"
            case userPoolId = "UserPoolId"
        }
    }

    public struct HttpHeader: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "headerName", required: false, type: .string), 
            AWSShapeMember(label: "headerValue", required: false, type: .string)
        ]

        /// The header name
        public let headerName: String?
        /// The header value.
        public let headerValue: String?

        public init(headerName: String? = nil, headerValue: String? = nil) {
            self.headerName = headerName
            self.headerValue = headerValue
        }

        private enum CodingKeys: String, CodingKey {
            case headerName = "headerName"
            case headerValue = "headerValue"
        }
    }

    public struct IdentityProviderType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeMapping", required: false, type: .map), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "IdpIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProviderDetails", required: false, type: .map), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderType", required: false, type: .enum), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]

        /// A mapping of identity provider attributes to standard and custom user pool attributes.
        public let attributeMapping: [String: String]?
        /// The date the identity provider was created.
        public let creationDate: TimeStamp?
        /// A list of identity provider identifiers.
        public let idpIdentifiers: [String]?
        /// The date the identity provider was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The identity provider details, such as MetadataURL and MetadataFile.
        public let providerDetails: [String: String]?
        /// The identity provider name.
        public let providerName: String?
        /// The identity provider type.
        public let providerType: IdentityProviderTypeType?
        /// The user pool ID.
        public let userPoolId: String?

        public init(attributeMapping: [String: String]? = nil, creationDate: TimeStamp? = nil, idpIdentifiers: [String]? = nil, lastModifiedDate: TimeStamp? = nil, providerDetails: [String: String]? = nil, providerName: String? = nil, providerType: IdentityProviderTypeType? = nil, userPoolId: String? = nil) {
            self.attributeMapping = attributeMapping
            self.creationDate = creationDate
            self.idpIdentifiers = idpIdentifiers
            self.lastModifiedDate = lastModifiedDate
            self.providerDetails = providerDetails
            self.providerName = providerName
            self.providerType = providerType
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try idpIdentifiers?.forEach {
                try validate($0, name:"idpIdentifiers[]", max: 40)
                try validate($0, name:"idpIdentifiers[]", min: 1)
                try validate($0, name:"idpIdentifiers[]", pattern: "[\\w\\s+=.@-]+")
            }
            try validate(idpIdentifiers, name:"idpIdentifiers", max: 50)
            try validate(idpIdentifiers, name:"idpIdentifiers", min: 0)
            try validate(providerName, name:"providerName", max: 32)
            try validate(providerName, name:"providerName", min: 1)
            try validate(providerName, name:"providerName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeMapping = "AttributeMapping"
            case creationDate = "CreationDate"
            case idpIdentifiers = "IdpIdentifiers"
            case lastModifiedDate = "LastModifiedDate"
            case providerDetails = "ProviderDetails"
            case providerName = "ProviderName"
            case providerType = "ProviderType"
            case userPoolId = "UserPoolId"
        }
    }

    public enum IdentityProviderTypeType: String, CustomStringConvertible, Codable {
        case saml = "SAML"
        case facebook = "Facebook"
        case google = "Google"
        case loginwithamazon = "LoginWithAmazon"
        case oidc = "OIDC"
        public var description: String { return self.rawValue }
    }

    public struct InitiateAuthRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "AuthFlow", required: true, type: .enum), 
            AWSShapeMember(label: "AuthParameters", required: false, type: .map), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "ClientMetadata", required: false, type: .map), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure)
        ]

        /// The Amazon Pinpoint analytics metadata for collecting metrics for InitiateAuth calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The authentication flow for this call to execute. The API action will depend on this value. For example:     REFRESH_TOKEN_AUTH will take in a valid refresh token and return new tokens.    USER_SRP_AUTH will take in USERNAME and SRP_A and return the SRP variables to be used for next challenge execution.    USER_PASSWORD_AUTH will take in USERNAME and PASSWORD and return the next challenge or tokens.   Valid values include:    USER_SRP_AUTH: Authentication flow for the Secure Remote Password (SRP) protocol.    REFRESH_TOKEN_AUTH/REFRESH_TOKEN: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.    CUSTOM_AUTH: Custom authentication flow.    USER_PASSWORD_AUTH: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool.     ADMIN_NO_SRP_AUTH is not a valid value.
        public let authFlow: AuthFlowType
        /// The authentication parameters. These are inputs corresponding to the AuthFlow that you are invoking. The required values depend on the value of AuthFlow:   For USER_SRP_AUTH: USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY    For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: REFRESH_TOKEN (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY    For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY   
        public let authParameters: [String: String]?
        /// The app client ID.
        public let clientId: String
        /// This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.
        public let clientMetadata: [String: String]?
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?

        public init(analyticsMetadata: AnalyticsMetadataType? = nil, authFlow: AuthFlowType, authParameters: [String: String]? = nil, clientId: String, clientMetadata: [String: String]? = nil, userContextData: UserContextDataType? = nil) {
            self.analyticsMetadata = analyticsMetadata
            self.authFlow = authFlow
            self.authParameters = authParameters
            self.clientId = clientId
            self.clientMetadata = clientMetadata
            self.userContextData = userContextData
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsMetadata = "AnalyticsMetadata"
            case authFlow = "AuthFlow"
            case authParameters = "AuthParameters"
            case clientId = "ClientId"
            case clientMetadata = "ClientMetadata"
            case userContextData = "UserContextData"
        }
    }

    public struct InitiateAuthResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]

        /// The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, ChallengeName, ChallengeParameters, and Session are returned.
        public let authenticationResult: AuthenticationResultType?
        /// The name of the challenge which you are responding to with this call. This is returned to you in the AdminInitiateAuth response if you need to pass another challenge. Valid values include the following. Note that all of these challenges require USERNAME and SECRET_HASH (if applicable) in the parameters.    SMS_MFA: Next challenge is to supply an SMS_MFA_CODE, delivered via SMS.    PASSWORD_VERIFIER: Next challenge is to supply PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, and TIMESTAMP after the client-side SRP calculations.    CUSTOM_CHALLENGE: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.    DEVICE_SRP_AUTH: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.    DEVICE_PASSWORD_VERIFIER: Similar to PASSWORD_VERIFIER, but for devices only.    NEW_PASSWORD_REQUIRED: For users which are required to change their passwords after successful first login. This challenge should be passed with NEW_PASSWORD and any other required attributes.  
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. These are returned to you in the InitiateAuth response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (RespondToAuthChallenge).  All challenges require USERNAME and SECRET_HASH (if applicable).
        public let challengeParameters: [String: String]?
        /// The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?

        public init(authenticationResult: AuthenticationResultType? = nil, challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, session: String? = nil) {
            self.authenticationResult = authenticationResult
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.session = session
        }

        public func validate() throws {
            try authenticationResult?.validate()
            try validate(session, name:"session", max: 2048)
            try validate(session, name:"session", min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationResult = "AuthenticationResult"
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case session = "Session"
        }
    }

    public struct LambdaConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateAuthChallenge", required: false, type: .string), 
            AWSShapeMember(label: "CustomMessage", required: false, type: .string), 
            AWSShapeMember(label: "DefineAuthChallenge", required: false, type: .string), 
            AWSShapeMember(label: "PostAuthentication", required: false, type: .string), 
            AWSShapeMember(label: "PostConfirmation", required: false, type: .string), 
            AWSShapeMember(label: "PreAuthentication", required: false, type: .string), 
            AWSShapeMember(label: "PreSignUp", required: false, type: .string), 
            AWSShapeMember(label: "PreTokenGeneration", required: false, type: .string), 
            AWSShapeMember(label: "UserMigration", required: false, type: .string), 
            AWSShapeMember(label: "VerifyAuthChallengeResponse", required: false, type: .string)
        ]

        /// Creates an authentication challenge.
        public let createAuthChallenge: String?
        /// A custom Message AWS Lambda trigger.
        public let customMessage: String?
        /// Defines the authentication challenge.
        public let defineAuthChallenge: String?
        /// A post-authentication AWS Lambda trigger.
        public let postAuthentication: String?
        /// A post-confirmation AWS Lambda trigger.
        public let postConfirmation: String?
        /// A pre-authentication AWS Lambda trigger.
        public let preAuthentication: String?
        /// A pre-registration AWS Lambda trigger.
        public let preSignUp: String?
        /// A Lambda trigger that is invoked before token generation.
        public let preTokenGeneration: String?
        /// The user migration Lambda config type.
        public let userMigration: String?
        /// Verifies the authentication challenge response.
        public let verifyAuthChallengeResponse: String?

        public init(createAuthChallenge: String? = nil, customMessage: String? = nil, defineAuthChallenge: String? = nil, postAuthentication: String? = nil, postConfirmation: String? = nil, preAuthentication: String? = nil, preSignUp: String? = nil, preTokenGeneration: String? = nil, userMigration: String? = nil, verifyAuthChallengeResponse: String? = nil) {
            self.createAuthChallenge = createAuthChallenge
            self.customMessage = customMessage
            self.defineAuthChallenge = defineAuthChallenge
            self.postAuthentication = postAuthentication
            self.postConfirmation = postConfirmation
            self.preAuthentication = preAuthentication
            self.preSignUp = preSignUp
            self.preTokenGeneration = preTokenGeneration
            self.userMigration = userMigration
            self.verifyAuthChallengeResponse = verifyAuthChallengeResponse
        }

        public func validate() throws {
            try validate(createAuthChallenge, name:"createAuthChallenge", max: 2048)
            try validate(createAuthChallenge, name:"createAuthChallenge", min: 20)
            try validate(createAuthChallenge, name:"createAuthChallenge", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(customMessage, name:"customMessage", max: 2048)
            try validate(customMessage, name:"customMessage", min: 20)
            try validate(customMessage, name:"customMessage", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(defineAuthChallenge, name:"defineAuthChallenge", max: 2048)
            try validate(defineAuthChallenge, name:"defineAuthChallenge", min: 20)
            try validate(defineAuthChallenge, name:"defineAuthChallenge", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(postAuthentication, name:"postAuthentication", max: 2048)
            try validate(postAuthentication, name:"postAuthentication", min: 20)
            try validate(postAuthentication, name:"postAuthentication", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(postConfirmation, name:"postConfirmation", max: 2048)
            try validate(postConfirmation, name:"postConfirmation", min: 20)
            try validate(postConfirmation, name:"postConfirmation", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(preAuthentication, name:"preAuthentication", max: 2048)
            try validate(preAuthentication, name:"preAuthentication", min: 20)
            try validate(preAuthentication, name:"preAuthentication", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(preSignUp, name:"preSignUp", max: 2048)
            try validate(preSignUp, name:"preSignUp", min: 20)
            try validate(preSignUp, name:"preSignUp", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(preTokenGeneration, name:"preTokenGeneration", max: 2048)
            try validate(preTokenGeneration, name:"preTokenGeneration", min: 20)
            try validate(preTokenGeneration, name:"preTokenGeneration", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(userMigration, name:"userMigration", max: 2048)
            try validate(userMigration, name:"userMigration", min: 20)
            try validate(userMigration, name:"userMigration", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(verifyAuthChallengeResponse, name:"verifyAuthChallengeResponse", max: 2048)
            try validate(verifyAuthChallengeResponse, name:"verifyAuthChallengeResponse", min: 20)
            try validate(verifyAuthChallengeResponse, name:"verifyAuthChallengeResponse", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
        }

        private enum CodingKeys: String, CodingKey {
            case createAuthChallenge = "CreateAuthChallenge"
            case customMessage = "CustomMessage"
            case defineAuthChallenge = "DefineAuthChallenge"
            case postAuthentication = "PostAuthentication"
            case postConfirmation = "PostConfirmation"
            case preAuthentication = "PreAuthentication"
            case preSignUp = "PreSignUp"
            case preTokenGeneration = "PreTokenGeneration"
            case userMigration = "UserMigration"
            case verifyAuthChallengeResponse = "VerifyAuthChallengeResponse"
        }
    }

    public struct ListDevicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string)
        ]

        /// The access tokens for the request to list devices.
        public let accessToken: String
        /// The limit of the device request.
        public let limit: Int32?
        /// The pagination token for the list request.
        public let paginationToken: String?

        public init(accessToken: String, limit: Int32? = nil, paginationToken: String? = nil) {
            self.accessToken = accessToken
            self.limit = limit
            self.paginationToken = paginationToken
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(limit, name:"limit", max: 60)
            try validate(limit, name:"limit", min: 0)
            try validate(paginationToken, name:"paginationToken", min: 1)
            try validate(paginationToken, name:"paginationToken", pattern: "[\\S]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case limit = "Limit"
            case paginationToken = "PaginationToken"
        }
    }

    public struct ListDevicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Devices", required: false, type: .list), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string)
        ]

        /// The devices returned in the list devices response.
        public let devices: [DeviceType]?
        /// The pagination token for the list device response.
        public let paginationToken: String?

        public init(devices: [DeviceType]? = nil, paginationToken: String? = nil) {
            self.devices = devices
            self.paginationToken = paginationToken
        }

        public func validate() throws {
            try devices?.forEach {
                try $0.validate()
            }
            try validate(paginationToken, name:"paginationToken", min: 1)
            try validate(paginationToken, name:"paginationToken", pattern: "[\\S]+")
        }

        private enum CodingKeys: String, CodingKey {
            case devices = "Devices"
            case paginationToken = "PaginationToken"
        }
    }

    public struct ListGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The limit of the request to list groups.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(limit, name:"limit", max: 60)
            try validate(limit, name:"limit", min: 0)
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The group objects for the groups.
        public let groups: [GroupType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?

        public init(groups: [GroupType]? = nil, nextToken: String? = nil) {
            self.groups = groups
            self.nextToken = nextToken
        }

        public func validate() throws {
            try groups?.forEach {
                try $0.validate()
            }
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "Groups"
            case nextToken = "NextToken"
        }
    }

    public struct ListIdentityProvidersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The maximum number of identity providers to return.
        public let maxResults: Int32?
        /// A pagination token.
        public let nextToken: String?
        /// The user pool ID.
        public let userPoolId: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(maxResults, name:"maxResults", max: 60)
            try validate(maxResults, name:"maxResults", min: 0)
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListIdentityProvidersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Providers", required: true, type: .list)
        ]

        /// A pagination token.
        public let nextToken: String?
        /// A list of identity provider objects.
        public let providers: [ProviderDescription]

        public init(nextToken: String? = nil, providers: [ProviderDescription]) {
            self.nextToken = nextToken
            self.providers = providers
        }

        public func validate() throws {
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try providers.forEach {
                try $0.validate()
            }
            try validate(providers, name:"providers", max: 50)
            try validate(providers, name:"providers", min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case providers = "Providers"
        }
    }

    public struct ListResourceServersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The maximum number of resource servers to return.
        public let maxResults: Int32?
        /// A pagination token.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(maxResults, name:"maxResults", max: 50)
            try validate(maxResults, name:"maxResults", min: 1)
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListResourceServersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceServers", required: true, type: .list)
        ]

        /// A pagination token.
        public let nextToken: String?
        /// The resource servers.
        public let resourceServers: [ResourceServerType]

        public init(nextToken: String? = nil, resourceServers: [ResourceServerType]) {
            self.nextToken = nextToken
            self.resourceServers = resourceServers
        }

        public func validate() throws {
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try resourceServers.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceServers = "ResourceServers"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate() throws {
            try validate(resourceArn, name:"resourceArn", max: 2048)
            try validate(resourceArn, name:"resourceArn", min: 20)
            try validate(resourceArn, name:"resourceArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .map)
        ]

        /// The tags that are assigned to the user pool.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct ListUserImportJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: true, type: .integer), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The maximum number of import jobs you want the request to return.
        public let maxResults: Int32
        /// An identifier that was returned from the previous call to ListUserImportJobs, which can be used to return the next set of import jobs in the list.
        public let paginationToken: String?
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(maxResults: Int32, paginationToken: String? = nil, userPoolId: String) {
            self.maxResults = maxResults
            self.paginationToken = paginationToken
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(maxResults, name:"maxResults", max: 60)
            try validate(maxResults, name:"maxResults", min: 1)
            try validate(paginationToken, name:"paginationToken", min: 1)
            try validate(paginationToken, name:"paginationToken", pattern: "[\\S]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case paginationToken = "PaginationToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListUserImportJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "UserImportJobs", required: false, type: .list)
        ]

        /// An identifier that can be used to return the next set of user import jobs in the list.
        public let paginationToken: String?
        /// The user import jobs.
        public let userImportJobs: [UserImportJobType]?

        public init(paginationToken: String? = nil, userImportJobs: [UserImportJobType]? = nil) {
            self.paginationToken = paginationToken
            self.userImportJobs = userImportJobs
        }

        public func validate() throws {
            try validate(paginationToken, name:"paginationToken", min: 1)
            try validate(paginationToken, name:"paginationToken", pattern: "[\\S]+")
            try userImportJobs?.forEach {
                try $0.validate()
            }
            try validate(userImportJobs, name:"userImportJobs", max: 50)
            try validate(userImportJobs, name:"userImportJobs", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case paginationToken = "PaginationToken"
            case userImportJobs = "UserImportJobs"
        }
    }

    public struct ListUserPoolClientsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The maximum number of results you want the request to return when listing the user pool clients.
        public let maxResults: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool where you want to list user pool clients.
        public let userPoolId: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(maxResults, name:"maxResults", max: 60)
            try validate(maxResults, name:"maxResults", min: 1)
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListUserPoolClientsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolClients", required: false, type: .list)
        ]

        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool clients in the response that lists user pool clients.
        public let userPoolClients: [UserPoolClientDescription]?

        public init(nextToken: String? = nil, userPoolClients: [UserPoolClientDescription]? = nil) {
            self.nextToken = nextToken
            self.userPoolClients = userPoolClients
        }

        public func validate() throws {
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try userPoolClients?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case userPoolClients = "UserPoolClients"
        }
    }

    public struct ListUserPoolsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: true, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The maximum number of results you want the request to return when listing the user pools.
        public let maxResults: Int32
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?

        public init(maxResults: Int32, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate() throws {
            try validate(maxResults, name:"maxResults", max: 60)
            try validate(maxResults, name:"maxResults", min: 1)
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListUserPoolsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPools", required: false, type: .list)
        ]

        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pools from the response to list users.
        public let userPools: [UserPoolDescriptionType]?

        public init(nextToken: String? = nil, userPools: [UserPoolDescriptionType]? = nil) {
            self.nextToken = nextToken
            self.userPools = userPools
        }

        public func validate() throws {
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try userPools?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case userPools = "UserPools"
        }
    }

    public struct ListUsersInGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The name of the group.
        public let groupName: String
        /// The limit of the request to list users.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.groupName = groupName
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(groupName, name:"groupName", max: 128)
            try validate(groupName, name:"groupName", min: 1)
            try validate(groupName, name:"groupName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(limit, name:"limit", max: 60)
            try validate(limit, name:"limit", min: 0)
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case limit = "Limit"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListUsersInGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Users", required: false, type: .list)
        ]

        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The users returned in the request to list users.
        public let users: [UserType]?

        public init(nextToken: String? = nil, users: [UserType]? = nil) {
            self.nextToken = nextToken
            self.users = users
        }

        public func validate() throws {
            try validate(nextToken, name:"nextToken", min: 1)
            try validate(nextToken, name:"nextToken", pattern: "[\\S]+")
            try users?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case users = "Users"
        }
    }

    public struct ListUsersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributesToGet", required: false, type: .list), 
            AWSShapeMember(label: "Filter", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.
        public let attributesToGet: [String]?
        /// A filter string of the form "AttributeName Filter-Type "AttributeValue"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "family_name = \"Reddy\"".    AttributeName: The name of the attribute to search for. You can only search for one attribute at a time.    Filter-Type: For an exact match, use =, for example, "given_name = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "given_name ^= \"Jon\"".     AttributeValue: The attribute value that must be matched for each user.   If the filter string is empty, ListUsers returns all users in the user pool. You can only search for the following standard attributes:    username (case-sensitive)    email     phone_number     name     given_name     family_name     preferred_username     cognito:user_status (called Status in the Console) (case-insensitive)    status (called Enabled in the Console) (case-sensitive)     sub    Custom attributes are not searchable. For more information, see Searching for Users Using the ListUsers API and Examples of Using the ListUsers API in the Amazon Cognito Developer Guide.
        public let filter: String?
        /// Maximum number of users to be returned.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let paginationToken: String?
        /// The user pool ID for the user pool on which the search should be performed.
        public let userPoolId: String

        public init(attributesToGet: [String]? = nil, filter: String? = nil, limit: Int32? = nil, paginationToken: String? = nil, userPoolId: String) {
            self.attributesToGet = attributesToGet
            self.filter = filter
            self.limit = limit
            self.paginationToken = paginationToken
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try attributesToGet?.forEach {
                try validate($0, name:"attributesToGet[]", max: 32)
                try validate($0, name:"attributesToGet[]", min: 1)
                try validate($0, name:"attributesToGet[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(filter, name:"filter", max: 256)
            try validate(limit, name:"limit", max: 60)
            try validate(limit, name:"limit", min: 0)
            try validate(paginationToken, name:"paginationToken", min: 1)
            try validate(paginationToken, name:"paginationToken", pattern: "[\\S]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case filter = "Filter"
            case limit = "Limit"
            case paginationToken = "PaginationToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListUsersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "Users", required: false, type: .list)
        ]

        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let paginationToken: String?
        /// The users returned in the request to list users.
        public let users: [UserType]?

        public init(paginationToken: String? = nil, users: [UserType]? = nil) {
            self.paginationToken = paginationToken
            self.users = users
        }

        public func validate() throws {
            try validate(paginationToken, name:"paginationToken", min: 1)
            try validate(paginationToken, name:"paginationToken", pattern: "[\\S]+")
            try users?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case paginationToken = "PaginationToken"
            case users = "Users"
        }
    }

    public struct MFAOptionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .string), 
            AWSShapeMember(label: "DeliveryMedium", required: false, type: .enum)
        ]

        /// The attribute name of the MFA option type.
        public let attributeName: String?
        /// The delivery medium (email message or SMS message) to send the MFA code.
        public let deliveryMedium: DeliveryMediumType?

        public init(attributeName: String? = nil, deliveryMedium: DeliveryMediumType? = nil) {
            self.attributeName = attributeName
            self.deliveryMedium = deliveryMedium
        }

        public func validate() throws {
            try validate(attributeName, name:"attributeName", max: 32)
            try validate(attributeName, name:"attributeName", min: 1)
            try validate(attributeName, name:"attributeName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case deliveryMedium = "DeliveryMedium"
        }
    }

    public enum MessageActionType: String, CustomStringConvertible, Codable {
        case resend = "RESEND"
        case suppress = "SUPPRESS"
        public var description: String { return self.rawValue }
    }

    public struct MessageTemplateType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailSubject", required: false, type: .string), 
            AWSShapeMember(label: "SMSMessage", required: false, type: .string)
        ]

        /// The message template for email messages.
        public let emailMessage: String?
        /// The subject line for email messages.
        public let emailSubject: String?
        /// The message template for SMS messages.
        public let sMSMessage: String?

        public init(emailMessage: String? = nil, emailSubject: String? = nil, sMSMessage: String? = nil) {
            self.emailMessage = emailMessage
            self.emailSubject = emailSubject
            self.sMSMessage = sMSMessage
        }

        public func validate() throws {
            try validate(emailMessage, name:"emailMessage", max: 20000)
            try validate(emailMessage, name:"emailMessage", min: 6)
            try validate(emailMessage, name:"emailMessage", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*")
            try validate(emailSubject, name:"emailSubject", max: 140)
            try validate(emailSubject, name:"emailSubject", min: 1)
            try validate(emailSubject, name:"emailSubject", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+")
            try validate(sMSMessage, name:"sMSMessage", max: 140)
            try validate(sMSMessage, name:"sMSMessage", min: 6)
            try validate(sMSMessage, name:"sMSMessage", pattern: ".*\\{####\\}.*")
        }

        private enum CodingKeys: String, CodingKey {
            case emailMessage = "EmailMessage"
            case emailSubject = "EmailSubject"
            case sMSMessage = "SMSMessage"
        }
    }

    public struct NewDeviceMetadataType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceGroupKey", required: false, type: .string), 
            AWSShapeMember(label: "DeviceKey", required: false, type: .string)
        ]

        /// The device group key.
        public let deviceGroupKey: String?
        /// The device key.
        public let deviceKey: String?

        public init(deviceGroupKey: String? = nil, deviceKey: String? = nil) {
            self.deviceGroupKey = deviceGroupKey
            self.deviceKey = deviceKey
        }

        public func validate() throws {
            try validate(deviceKey, name:"deviceKey", max: 55)
            try validate(deviceKey, name:"deviceKey", min: 1)
            try validate(deviceKey, name:"deviceKey", pattern: "[\\w-]+_[0-9a-f-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case deviceGroupKey = "DeviceGroupKey"
            case deviceKey = "DeviceKey"
        }
    }

    public struct NotifyConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockEmail", required: false, type: .structure), 
            AWSShapeMember(label: "From", required: false, type: .string), 
            AWSShapeMember(label: "MfaEmail", required: false, type: .structure), 
            AWSShapeMember(label: "NoActionEmail", required: false, type: .structure), 
            AWSShapeMember(label: "ReplyTo", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: true, type: .string)
        ]

        /// Email template used when a detected risk event is blocked.
        public let blockEmail: NotifyEmailType?
        /// The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
        public let from: String?
        /// The MFA email template used when MFA is challenged as part of a detected risk.
        public let mfaEmail: NotifyEmailType?
        /// The email template used when a detected risk event is allowed.
        public let noActionEmail: NotifyEmailType?
        /// The destination to which the receiver of an email should reply to.
        public let replyTo: String?
        /// The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the From parameter.
        public let sourceArn: String

        public init(blockEmail: NotifyEmailType? = nil, from: String? = nil, mfaEmail: NotifyEmailType? = nil, noActionEmail: NotifyEmailType? = nil, replyTo: String? = nil, sourceArn: String) {
            self.blockEmail = blockEmail
            self.from = from
            self.mfaEmail = mfaEmail
            self.noActionEmail = noActionEmail
            self.replyTo = replyTo
            self.sourceArn = sourceArn
        }

        public func validate() throws {
            try blockEmail?.validate()
            try mfaEmail?.validate()
            try noActionEmail?.validate()
            try validate(sourceArn, name:"sourceArn", max: 2048)
            try validate(sourceArn, name:"sourceArn", min: 20)
            try validate(sourceArn, name:"sourceArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
        }

        private enum CodingKeys: String, CodingKey {
            case blockEmail = "BlockEmail"
            case from = "From"
            case mfaEmail = "MfaEmail"
            case noActionEmail = "NoActionEmail"
            case replyTo = "ReplyTo"
            case sourceArn = "SourceArn"
        }
    }

    public struct NotifyEmailType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HtmlBody", required: false, type: .string), 
            AWSShapeMember(label: "Subject", required: true, type: .string), 
            AWSShapeMember(label: "TextBody", required: false, type: .string)
        ]

        /// The HTML body.
        public let htmlBody: String?
        /// The subject.
        public let subject: String
        /// The text body.
        public let textBody: String?

        public init(htmlBody: String? = nil, subject: String, textBody: String? = nil) {
            self.htmlBody = htmlBody
            self.subject = subject
            self.textBody = textBody
        }

        public func validate() throws {
            try validate(htmlBody, name:"htmlBody", max: 20000)
            try validate(htmlBody, name:"htmlBody", min: 6)
            try validate(htmlBody, name:"htmlBody", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+")
            try validate(subject, name:"subject", max: 140)
            try validate(subject, name:"subject", min: 1)
            try validate(subject, name:"subject", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+")
            try validate(textBody, name:"textBody", max: 20000)
            try validate(textBody, name:"textBody", min: 6)
            try validate(textBody, name:"textBody", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+")
        }

        private enum CodingKeys: String, CodingKey {
            case htmlBody = "HtmlBody"
            case subject = "Subject"
            case textBody = "TextBody"
        }
    }

    public struct NumberAttributeConstraintsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxValue", required: false, type: .string), 
            AWSShapeMember(label: "MinValue", required: false, type: .string)
        ]

        /// The maximum value of an attribute that is of the number data type.
        public let maxValue: String?
        /// The minimum value of an attribute that is of the number data type.
        public let minValue: String?

        public init(maxValue: String? = nil, minValue: String? = nil) {
            self.maxValue = maxValue
            self.minValue = minValue
        }

        private enum CodingKeys: String, CodingKey {
            case maxValue = "MaxValue"
            case minValue = "MinValue"
        }
    }

    public enum OAuthFlowType: String, CustomStringConvertible, Codable {
        case code = "code"
        case implicit = "implicit"
        case clientCredentials = "client_credentials"
        public var description: String { return self.rawValue }
    }

    public struct PasswordPolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinimumLength", required: false, type: .integer), 
            AWSShapeMember(label: "RequireLowercase", required: false, type: .boolean), 
            AWSShapeMember(label: "RequireNumbers", required: false, type: .boolean), 
            AWSShapeMember(label: "RequireSymbols", required: false, type: .boolean), 
            AWSShapeMember(label: "RequireUppercase", required: false, type: .boolean), 
            AWSShapeMember(label: "TemporaryPasswordValidityDays", required: false, type: .integer)
        ]

        /// The minimum length of the password policy that you have set. Cannot be less than 6.
        public let minimumLength: Int32?
        /// In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.
        public let requireLowercase: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one number in their password.
        public let requireNumbers: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.
        public let requireSymbols: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.
        public let requireUppercase: Bool?
        public let temporaryPasswordValidityDays: Int32?

        public init(minimumLength: Int32? = nil, requireLowercase: Bool? = nil, requireNumbers: Bool? = nil, requireSymbols: Bool? = nil, requireUppercase: Bool? = nil, temporaryPasswordValidityDays: Int32? = nil) {
            self.minimumLength = minimumLength
            self.requireLowercase = requireLowercase
            self.requireNumbers = requireNumbers
            self.requireSymbols = requireSymbols
            self.requireUppercase = requireUppercase
            self.temporaryPasswordValidityDays = temporaryPasswordValidityDays
        }

        public func validate() throws {
            try validate(minimumLength, name:"minimumLength", max: 99)
            try validate(minimumLength, name:"minimumLength", min: 6)
            try validate(temporaryPasswordValidityDays, name:"temporaryPasswordValidityDays", max: 365)
            try validate(temporaryPasswordValidityDays, name:"temporaryPasswordValidityDays", min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case minimumLength = "MinimumLength"
            case requireLowercase = "RequireLowercase"
            case requireNumbers = "RequireNumbers"
            case requireSymbols = "RequireSymbols"
            case requireUppercase = "RequireUppercase"
            case temporaryPasswordValidityDays = "TemporaryPasswordValidityDays"
        }
    }

    public struct ProviderDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderType", required: false, type: .enum)
        ]

        /// The date the provider was added to the user pool.
        public let creationDate: TimeStamp?
        /// The date the provider was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The identity provider name.
        public let providerName: String?
        /// The identity provider type.
        public let providerType: IdentityProviderTypeType?

        public init(creationDate: TimeStamp? = nil, lastModifiedDate: TimeStamp? = nil, providerName: String? = nil, providerType: IdentityProviderTypeType? = nil) {
            self.creationDate = creationDate
            self.lastModifiedDate = lastModifiedDate
            self.providerName = providerName
            self.providerType = providerType
        }

        public func validate() throws {
            try validate(providerName, name:"providerName", max: 32)
            try validate(providerName, name:"providerName", min: 1)
            try validate(providerName, name:"providerName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case creationDate = "CreationDate"
            case lastModifiedDate = "LastModifiedDate"
            case providerName = "ProviderName"
            case providerType = "ProviderType"
        }
    }

    public struct ProviderUserIdentifierType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderAttributeName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderAttributeValue", required: false, type: .string), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string)
        ]

        /// The name of the provider attribute to link to, for example, NameID.
        public let providerAttributeName: String?
        /// The value of the provider attribute to link to, for example, xxxxx_account.
        public let providerAttributeValue: String?
        /// The name of the provider, for example, Facebook, Google, or Login with Amazon.
        public let providerName: String?

        public init(providerAttributeName: String? = nil, providerAttributeValue: String? = nil, providerName: String? = nil) {
            self.providerAttributeName = providerAttributeName
            self.providerAttributeValue = providerAttributeValue
            self.providerName = providerName
        }

        public func validate() throws {
            try validate(providerName, name:"providerName", max: 32)
            try validate(providerName, name:"providerName", min: 1)
            try validate(providerName, name:"providerName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case providerAttributeName = "ProviderAttributeName"
            case providerAttributeValue = "ProviderAttributeValue"
            case providerName = "ProviderName"
        }
    }

    public struct ResendConfirmationCodeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]

        /// The Amazon Pinpoint analytics metadata for collecting metrics for ResendConfirmationCode calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// The user name of the user to whom you wish to resend a confirmation code.
        public let username: String

        public init(analyticsMetadata: AnalyticsMetadataType? = nil, clientId: String, secretHash: String? = nil, userContextData: UserContextDataType? = nil, username: String) {
            self.analyticsMetadata = analyticsMetadata
            self.clientId = clientId
            self.secretHash = secretHash
            self.userContextData = userContextData
            self.username = username
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(secretHash, name:"secretHash", max: 128)
            try validate(secretHash, name:"secretHash", min: 1)
            try validate(secretHash, name:"secretHash", pattern: "[\\w+=/]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsMetadata = "AnalyticsMetadata"
            case clientId = "ClientId"
            case secretHash = "SecretHash"
            case userContextData = "UserContextData"
            case username = "Username"
        }
    }

    public struct ResendConfirmationCodeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure)
        ]

        /// The code delivery details returned by the server in response to the request to resend the confirmation code.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        public func validate() throws {
            try codeDeliveryDetails?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
        }
    }

    public struct ResourceServerScopeType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScopeDescription", required: true, type: .string), 
            AWSShapeMember(label: "ScopeName", required: true, type: .string)
        ]

        /// A description of the scope.
        public let scopeDescription: String
        /// The name of the scope.
        public let scopeName: String

        public init(scopeDescription: String, scopeName: String) {
            self.scopeDescription = scopeDescription
            self.scopeName = scopeName
        }

        public func validate() throws {
            try validate(scopeDescription, name:"scopeDescription", max: 256)
            try validate(scopeDescription, name:"scopeDescription", min: 1)
            try validate(scopeName, name:"scopeName", max: 256)
            try validate(scopeName, name:"scopeName", min: 1)
            try validate(scopeName, name:"scopeName", pattern: "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+")
        }

        private enum CodingKeys: String, CodingKey {
            case scopeDescription = "ScopeDescription"
            case scopeName = "ScopeName"
        }
    }

    public struct ResourceServerType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Identifier", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Scopes", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]

        /// The identifier for the resource server.
        public let identifier: String?
        /// The name of the resource server.
        public let name: String?
        /// A list of scopes that are defined for the resource server.
        public let scopes: [ResourceServerScopeType]?
        /// The user pool ID for the user pool that hosts the resource server.
        public let userPoolId: String?

        public init(identifier: String? = nil, name: String? = nil, scopes: [ResourceServerScopeType]? = nil, userPoolId: String? = nil) {
            self.identifier = identifier
            self.name = name
            self.scopes = scopes
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(identifier, name:"identifier", max: 256)
            try validate(identifier, name:"identifier", min: 1)
            try validate(identifier, name:"identifier", pattern: "[\\x21\\x23-\\x5B\\x5D-\\x7E]+")
            try validate(name, name:"name", max: 256)
            try validate(name, name:"name", min: 1)
            try validate(name, name:"name", pattern: "[\\w\\s+=,.@-]+")
            try scopes?.forEach {
                try $0.validate()
            }
            try validate(scopes, name:"scopes", max: 25)
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case name = "Name"
            case scopes = "Scopes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct RespondToAuthChallengeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "ChallengeName", required: true, type: .enum), 
            AWSShapeMember(label: "ChallengeResponses", required: false, type: .map), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure)
        ]

        /// The Amazon Pinpoint analytics metadata for collecting metrics for RespondToAuthChallenge calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The challenge name. For more information, see .  ADMIN_NO_SRP_AUTH is not a valid value.
        public let challengeName: ChallengeNameType
        /// The challenge responses. These are inputs corresponding to the value of ChallengeName, for example:    SMS_MFA: SMS_MFA_CODE, USERNAME, SECRET_HASH (if app client is configured with client secret).    PASSWORD_VERIFIER: PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, TIMESTAMP, USERNAME, SECRET_HASH (if app client is configured with client secret).    NEW_PASSWORD_REQUIRED: NEW_PASSWORD, any other required attributes, USERNAME, SECRET_HASH (if app client is configured with client secret).   
        public let challengeResponses: [String: String]?
        /// The app client ID.
        public let clientId: String
        /// The session which should be passed both ways in challenge-response calls to the service. If InitiateAuth or RespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?

        public init(analyticsMetadata: AnalyticsMetadataType? = nil, challengeName: ChallengeNameType, challengeResponses: [String: String]? = nil, clientId: String, session: String? = nil, userContextData: UserContextDataType? = nil) {
            self.analyticsMetadata = analyticsMetadata
            self.challengeName = challengeName
            self.challengeResponses = challengeResponses
            self.clientId = clientId
            self.session = session
            self.userContextData = userContextData
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(session, name:"session", max: 2048)
            try validate(session, name:"session", min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsMetadata = "AnalyticsMetadata"
            case challengeName = "ChallengeName"
            case challengeResponses = "ChallengeResponses"
            case clientId = "ClientId"
            case session = "Session"
            case userContextData = "UserContextData"
        }
    }

    public struct RespondToAuthChallengeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]

        /// The result returned by the server in response to the request to respond to the authentication challenge.
        public let authenticationResult: AuthenticationResultType?
        /// The challenge name. For more information, see .
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. For more information, see .
        public let challengeParameters: [String: String]?
        /// The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?

        public init(authenticationResult: AuthenticationResultType? = nil, challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, session: String? = nil) {
            self.authenticationResult = authenticationResult
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.session = session
        }

        public func validate() throws {
            try authenticationResult?.validate()
            try validate(session, name:"session", max: 2048)
            try validate(session, name:"session", min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationResult = "AuthenticationResult"
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case session = "Session"
        }
    }

    public struct RiskConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountTakeoverRiskConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "CompromisedCredentialsRiskConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "RiskExceptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]

        /// The account takeover risk configuration object including the NotifyConfiguration object and Actions to take in the case of an account takeover.
        public let accountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType?
        /// The app client ID.
        public let clientId: String?
        /// The compromised credentials risk configuration object including the EventFilter and the EventAction 
        public let compromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType?
        /// The last modified date.
        public let lastModifiedDate: TimeStamp?
        /// The configuration to override the risk decision.
        public let riskExceptionConfiguration: RiskExceptionConfigurationType?
        /// The user pool ID.
        public let userPoolId: String?

        public init(accountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType? = nil, clientId: String? = nil, compromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType? = nil, lastModifiedDate: TimeStamp? = nil, riskExceptionConfiguration: RiskExceptionConfigurationType? = nil, userPoolId: String? = nil) {
            self.accountTakeoverRiskConfiguration = accountTakeoverRiskConfiguration
            self.clientId = clientId
            self.compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfiguration
            self.lastModifiedDate = lastModifiedDate
            self.riskExceptionConfiguration = riskExceptionConfiguration
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try accountTakeoverRiskConfiguration?.validate()
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try riskExceptionConfiguration?.validate()
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accountTakeoverRiskConfiguration = "AccountTakeoverRiskConfiguration"
            case clientId = "ClientId"
            case compromisedCredentialsRiskConfiguration = "CompromisedCredentialsRiskConfiguration"
            case lastModifiedDate = "LastModifiedDate"
            case riskExceptionConfiguration = "RiskExceptionConfiguration"
            case userPoolId = "UserPoolId"
        }
    }

    public enum RiskDecisionType: String, CustomStringConvertible, Codable {
        case norisk = "NoRisk"
        case accounttakeover = "AccountTakeover"
        case block = "Block"
        public var description: String { return self.rawValue }
    }

    public struct RiskExceptionConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockedIPRangeList", required: false, type: .list), 
            AWSShapeMember(label: "SkippedIPRangeList", required: false, type: .list)
        ]

        /// Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.
        public let blockedIPRangeList: [String]?
        /// Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.
        public let skippedIPRangeList: [String]?

        public init(blockedIPRangeList: [String]? = nil, skippedIPRangeList: [String]? = nil) {
            self.blockedIPRangeList = blockedIPRangeList
            self.skippedIPRangeList = skippedIPRangeList
        }

        public func validate() throws {
            try validate(blockedIPRangeList, name:"blockedIPRangeList", max: 20)
            try validate(skippedIPRangeList, name:"skippedIPRangeList", max: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case blockedIPRangeList = "BlockedIPRangeList"
            case skippedIPRangeList = "SkippedIPRangeList"
        }
    }

    public enum RiskLevelType: String, CustomStringConvertible, Codable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        public var description: String { return self.rawValue }
    }

    public struct SMSMfaSettingsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "PreferredMfa", required: false, type: .boolean)
        ]

        /// Specifies whether SMS text message MFA is enabled.
        public let enabled: Bool?
        /// The preferred MFA method.
        public let preferredMfa: Bool?

        public init(enabled: Bool? = nil, preferredMfa: Bool? = nil) {
            self.enabled = enabled
            self.preferredMfa = preferredMfa
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case preferredMfa = "PreferredMfa"
        }
    }

    public struct SchemaAttributeType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeDataType", required: false, type: .enum), 
            AWSShapeMember(label: "DeveloperOnlyAttribute", required: false, type: .boolean), 
            AWSShapeMember(label: "Mutable", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NumberAttributeConstraints", required: false, type: .structure), 
            AWSShapeMember(label: "Required", required: false, type: .boolean), 
            AWSShapeMember(label: "StringAttributeConstraints", required: false, type: .structure)
        ]

        /// The attribute data type.
        public let attributeDataType: AttributeDataType?
        /// Specifies whether the attribute type is developer only.
        public let developerOnlyAttribute: Bool?
        /// Specifies whether the value of the attribute can be changed. For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to true. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see Specifying Identity Provider Attribute Mappings for Your User Pool.
        public let mutable: Bool?
        /// A schema attribute of the name type.
        public let name: String?
        /// Specifies the constraints for an attribute of the number type.
        public let numberAttributeConstraints: NumberAttributeConstraintsType?
        /// Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
        public let required: Bool?
        /// Specifies the constraints for an attribute of the string type.
        public let stringAttributeConstraints: StringAttributeConstraintsType?

        public init(attributeDataType: AttributeDataType? = nil, developerOnlyAttribute: Bool? = nil, mutable: Bool? = nil, name: String? = nil, numberAttributeConstraints: NumberAttributeConstraintsType? = nil, required: Bool? = nil, stringAttributeConstraints: StringAttributeConstraintsType? = nil) {
            self.attributeDataType = attributeDataType
            self.developerOnlyAttribute = developerOnlyAttribute
            self.mutable = mutable
            self.name = name
            self.numberAttributeConstraints = numberAttributeConstraints
            self.required = required
            self.stringAttributeConstraints = stringAttributeConstraints
        }

        public func validate() throws {
            try validate(name, name:"name", max: 20)
            try validate(name, name:"name", min: 1)
            try validate(name, name:"name", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeDataType = "AttributeDataType"
            case developerOnlyAttribute = "DeveloperOnlyAttribute"
            case mutable = "Mutable"
            case name = "Name"
            case numberAttributeConstraints = "NumberAttributeConstraints"
            case required = "Required"
            case stringAttributeConstraints = "StringAttributeConstraints"
        }
    }

    public struct SetRiskConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountTakeoverRiskConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "CompromisedCredentialsRiskConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "RiskExceptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The account takeover risk configuration.
        public let accountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType?
        /// The app client ID. If ClientId is null, then the risk configuration is mapped to userPoolId. When the client ID is null, the same risk configuration is applied to all the clients in the userPool. Otherwise, ClientId is mapped to the client. When the client ID is not null, the user pool configuration is overridden and the risk configuration for the client is used instead.
        public let clientId: String?
        /// The compromised credentials risk configuration.
        public let compromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType?
        /// The configuration to override the risk decision.
        public let riskExceptionConfiguration: RiskExceptionConfigurationType?
        /// The user pool ID. 
        public let userPoolId: String

        public init(accountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType? = nil, clientId: String? = nil, compromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType? = nil, riskExceptionConfiguration: RiskExceptionConfigurationType? = nil, userPoolId: String) {
            self.accountTakeoverRiskConfiguration = accountTakeoverRiskConfiguration
            self.clientId = clientId
            self.compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfiguration
            self.riskExceptionConfiguration = riskExceptionConfiguration
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try accountTakeoverRiskConfiguration?.validate()
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try riskExceptionConfiguration?.validate()
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accountTakeoverRiskConfiguration = "AccountTakeoverRiskConfiguration"
            case clientId = "ClientId"
            case compromisedCredentialsRiskConfiguration = "CompromisedCredentialsRiskConfiguration"
            case riskExceptionConfiguration = "RiskExceptionConfiguration"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SetRiskConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RiskConfiguration", required: true, type: .structure)
        ]

        /// The risk configuration.
        public let riskConfiguration: RiskConfigurationType

        public init(riskConfiguration: RiskConfigurationType) {
            self.riskConfiguration = riskConfiguration
        }

        public func validate() throws {
            try riskConfiguration.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case riskConfiguration = "RiskConfiguration"
        }
    }

    public struct SetUICustomizationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "CSS", required: false, type: .string), 
            AWSShapeMember(label: "ImageFile", required: false, type: .blob), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The client ID for the client app.
        public let clientId: String?
        /// The CSS values in the UI customization.
        public let css: String?
        /// The uploaded logo image for the UI customization.
        public let imageFile: Data?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(clientId: String? = nil, css: String? = nil, imageFile: Data? = nil, userPoolId: String) {
            self.clientId = clientId
            self.css = css
            self.imageFile = imageFile
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case css = "CSS"
            case imageFile = "ImageFile"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SetUICustomizationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UICustomization", required: true, type: .structure)
        ]

        /// The UI customization information.
        public let uICustomization: UICustomizationType

        public init(uICustomization: UICustomizationType) {
            self.uICustomization = uICustomization
        }

        public func validate() throws {
            try uICustomization.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case uICustomization = "UICustomization"
        }
    }

    public struct SetUserMFAPreferenceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string), 
            AWSShapeMember(label: "SMSMfaSettings", required: false, type: .structure), 
            AWSShapeMember(label: "SoftwareTokenMfaSettings", required: false, type: .structure)
        ]

        /// The access token.
        public let accessToken: String
        /// The SMS text message multi-factor authentication (MFA) settings.
        public let sMSMfaSettings: SMSMfaSettingsType?
        /// The time-based one-time password software token MFA settings.
        public let softwareTokenMfaSettings: SoftwareTokenMfaSettingsType?

        public init(accessToken: String, sMSMfaSettings: SMSMfaSettingsType? = nil, softwareTokenMfaSettings: SoftwareTokenMfaSettingsType? = nil) {
            self.accessToken = accessToken
            self.sMSMfaSettings = sMSMfaSettings
            self.softwareTokenMfaSettings = softwareTokenMfaSettings
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case sMSMfaSettings = "SMSMfaSettings"
            case softwareTokenMfaSettings = "SoftwareTokenMfaSettings"
        }
    }

    public struct SetUserMFAPreferenceResponse: AWSShape {


        public init() {
        }

    }

    public struct SetUserPoolMfaConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "SmsMfaConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SoftwareTokenMfaConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The MFA configuration.
        public let mfaConfiguration: UserPoolMfaType?
        /// The SMS text message MFA configuration.
        public let smsMfaConfiguration: SmsMfaConfigType?
        /// The software token MFA configuration.
        public let softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType?
        /// The user pool ID.
        public let userPoolId: String

        public init(mfaConfiguration: UserPoolMfaType? = nil, smsMfaConfiguration: SmsMfaConfigType? = nil, softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType? = nil, userPoolId: String) {
            self.mfaConfiguration = mfaConfiguration
            self.smsMfaConfiguration = smsMfaConfiguration
            self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try smsMfaConfiguration?.validate()
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case mfaConfiguration = "MfaConfiguration"
            case smsMfaConfiguration = "SmsMfaConfiguration"
            case softwareTokenMfaConfiguration = "SoftwareTokenMfaConfiguration"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SetUserPoolMfaConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "SmsMfaConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SoftwareTokenMfaConfiguration", required: false, type: .structure)
        ]

        /// The MFA configuration.
        public let mfaConfiguration: UserPoolMfaType?
        /// The SMS text message MFA configuration.
        public let smsMfaConfiguration: SmsMfaConfigType?
        /// The software token MFA configuration.
        public let softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType?

        public init(mfaConfiguration: UserPoolMfaType? = nil, smsMfaConfiguration: SmsMfaConfigType? = nil, softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType? = nil) {
            self.mfaConfiguration = mfaConfiguration
            self.smsMfaConfiguration = smsMfaConfiguration
            self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
        }

        public func validate() throws {
            try smsMfaConfiguration?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case mfaConfiguration = "MfaConfiguration"
            case smsMfaConfiguration = "SmsMfaConfiguration"
            case softwareTokenMfaConfiguration = "SoftwareTokenMfaConfiguration"
        }
    }

    public struct SetUserSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string), 
            AWSShapeMember(label: "MFAOptions", required: true, type: .list)
        ]

        /// The access token for the set user settings request.
        public let accessToken: String
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]

        public init(accessToken: String, mFAOptions: [MFAOptionType]) {
            self.accessToken = accessToken
            self.mFAOptions = mFAOptions
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try mFAOptions.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case mFAOptions = "MFAOptions"
        }
    }

    public struct SetUserSettingsResponse: AWSShape {


        public init() {
        }

    }

    public struct SignUpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .list), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "ValidationData", required: false, type: .list)
        ]

        /// The Amazon Pinpoint analytics metadata for collecting metrics for SignUp calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The password of the user you wish to register.
        public let password: String
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]?
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// The user name of the user you wish to register.
        public let username: String
        /// The validation data in the request to register a user.
        public let validationData: [AttributeType]?

        public init(analyticsMetadata: AnalyticsMetadataType? = nil, clientId: String, password: String, secretHash: String? = nil, userAttributes: [AttributeType]? = nil, userContextData: UserContextDataType? = nil, username: String, validationData: [AttributeType]? = nil) {
            self.analyticsMetadata = analyticsMetadata
            self.clientId = clientId
            self.password = password
            self.secretHash = secretHash
            self.userAttributes = userAttributes
            self.userContextData = userContextData
            self.username = username
            self.validationData = validationData
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(password, name:"password", max: 256)
            try validate(password, name:"password", min: 6)
            try validate(password, name:"password", pattern: "[\\S]+")
            try validate(secretHash, name:"secretHash", max: 128)
            try validate(secretHash, name:"secretHash", min: 1)
            try validate(secretHash, name:"secretHash", pattern: "[\\w+=/]+")
            try userAttributes?.forEach {
                try $0.validate()
            }
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validationData?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsMetadata = "AnalyticsMetadata"
            case clientId = "ClientId"
            case password = "Password"
            case secretHash = "SecretHash"
            case userAttributes = "UserAttributes"
            case userContextData = "UserContextData"
            case username = "Username"
            case validationData = "ValidationData"
        }
    }

    public struct SignUpResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure), 
            AWSShapeMember(label: "UserConfirmed", required: true, type: .boolean), 
            AWSShapeMember(label: "UserSub", required: true, type: .string)
        ]

        /// The code delivery details returned by the server response to the user registration request.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?
        /// A response from the server indicating that a user registration has been confirmed.
        public let userConfirmed: Bool
        /// The UUID of the authenticated user. This is not the same as username.
        public let userSub: String

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil, userConfirmed: Bool, userSub: String) {
            self.codeDeliveryDetails = codeDeliveryDetails
            self.userConfirmed = userConfirmed
            self.userSub = userSub
        }

        public func validate() throws {
            try codeDeliveryDetails?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
            case userConfirmed = "UserConfirmed"
            case userSub = "UserSub"
        }
    }

    public struct SmsConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "SnsCallerArn", required: true, type: .string)
        ]

        /// The external ID.
        public let externalId: String?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.
        public let snsCallerArn: String

        public init(externalId: String? = nil, snsCallerArn: String) {
            self.externalId = externalId
            self.snsCallerArn = snsCallerArn
        }

        public func validate() throws {
            try validate(snsCallerArn, name:"snsCallerArn", max: 2048)
            try validate(snsCallerArn, name:"snsCallerArn", min: 20)
            try validate(snsCallerArn, name:"snsCallerArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
        }

        private enum CodingKeys: String, CodingKey {
            case externalId = "ExternalId"
            case snsCallerArn = "SnsCallerArn"
        }
    }

    public struct SmsMfaConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure)
        ]

        /// The SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The SMS configuration.
        public let smsConfiguration: SmsConfigurationType?

        public init(smsAuthenticationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil) {
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
        }

        public func validate() throws {
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", max: 140)
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", min: 6)
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", pattern: ".*\\{####\\}.*")
            try smsConfiguration?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case smsConfiguration = "SmsConfiguration"
        }
    }

    public struct SoftwareTokenMfaConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]

        /// Specifies whether software token MFA is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct SoftwareTokenMfaSettingsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "PreferredMfa", required: false, type: .boolean)
        ]

        /// Specifies whether software token MFA is enabled.
        public let enabled: Bool?
        /// The preferred MFA method.
        public let preferredMfa: Bool?

        public init(enabled: Bool? = nil, preferredMfa: Bool? = nil) {
            self.enabled = enabled
            self.preferredMfa = preferredMfa
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case preferredMfa = "PreferredMfa"
        }
    }

    public struct StartUserImportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(jobId, name:"jobId", max: 55)
            try validate(jobId, name:"jobId", min: 1)
            try validate(jobId, name:"jobId", pattern: "import-[0-9a-zA-Z-]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct StartUserImportJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]

        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        public func validate() throws {
            try userImportJob?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct StopUserImportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(jobId, name:"jobId", max: 55)
            try validate(jobId, name:"jobId", min: 1)
            try validate(jobId, name:"jobId", pattern: "import-[0-9a-zA-Z-]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct StopUserImportJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]

        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        public func validate() throws {
            try userImportJob?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public struct StringAttributeConstraintsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxLength", required: false, type: .string), 
            AWSShapeMember(label: "MinLength", required: false, type: .string)
        ]

        /// The maximum length.
        public let maxLength: String?
        /// The minimum length.
        public let minLength: String?

        public init(maxLength: String? = nil, minLength: String? = nil) {
            self.maxLength = maxLength
            self.minLength = minLength
        }

        private enum CodingKeys: String, CodingKey {
            case maxLength = "MaxLength"
            case minLength = "MinLength"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .map)
        ]

        /// The Amazon Resource Name (ARN) of the user pool to assign the tags to.
        public let resourceArn: String
        /// The tags to assign to the user pool.
        public let tags: [String: String]?

        public init(resourceArn: String, tags: [String: String]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate() throws {
            try validate(resourceArn, name:"resourceArn", max: 2048)
            try validate(resourceArn, name:"resourceArn", min: 20)
            try validate(resourceArn, name:"resourceArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UICustomizationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CSS", required: false, type: .string), 
            AWSShapeMember(label: "CSSVersion", required: false, type: .string), 
            AWSShapeMember(label: "ImageUrl", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]

        /// The client ID for the client app.
        public let clientId: String?
        /// The creation date for the UI customization.
        public let creationDate: TimeStamp?
        /// The CSS values in the UI customization.
        public let css: String?
        /// The CSS version number.
        public let cSSVersion: String?
        /// The logo image for the UI customization.
        public let imageUrl: String?
        /// The last-modified date for the UI customization.
        public let lastModifiedDate: TimeStamp?
        /// The user pool ID for the user pool.
        public let userPoolId: String?

        public init(clientId: String? = nil, creationDate: TimeStamp? = nil, css: String? = nil, cSSVersion: String? = nil, imageUrl: String? = nil, lastModifiedDate: TimeStamp? = nil, userPoolId: String? = nil) {
            self.clientId = clientId
            self.creationDate = creationDate
            self.css = css
            self.cSSVersion = cSSVersion
            self.imageUrl = imageUrl
            self.lastModifiedDate = lastModifiedDate
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case creationDate = "CreationDate"
            case css = "CSS"
            case cSSVersion = "CSSVersion"
            case imageUrl = "ImageUrl"
            case lastModifiedDate = "LastModifiedDate"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: false, type: .list)
        ]

        /// The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.
        public let resourceArn: String
        /// The keys of the tags to remove from the user pool.
        public let tagKeys: [String]?

        public init(resourceArn: String, tagKeys: [String]? = nil) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate() throws {
            try validate(resourceArn, name:"resourceArn", max: 2048)
            try validate(resourceArn, name:"resourceArn", min: 20)
            try validate(resourceArn, name:"resourceArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try tagKeys?.forEach {
                try validate($0, name:"tagKeys[]", max: 128)
                try validate($0, name:"tagKeys[]", min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateAuthEventFeedbackRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventId", required: true, type: .string), 
            AWSShapeMember(label: "FeedbackToken", required: true, type: .string), 
            AWSShapeMember(label: "FeedbackValue", required: true, type: .enum), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The event ID.
        public let eventId: String
        /// The feedback token.
        public let feedbackToken: String
        /// The authentication event feedback value.
        public let feedbackValue: FeedbackValueType
        /// The user pool username.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(eventId: String, feedbackToken: String, feedbackValue: FeedbackValueType, username: String, userPoolId: String) {
            self.eventId = eventId
            self.feedbackToken = feedbackToken
            self.feedbackValue = feedbackValue
            self.username = username
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(eventId, name:"eventId", max: 50)
            try validate(eventId, name:"eventId", min: 1)
            try validate(eventId, name:"eventId", pattern: "[\\w+-]+")
            try validate(feedbackToken, name:"feedbackToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case feedbackToken = "FeedbackToken"
            case feedbackValue = "FeedbackValue"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UpdateAuthEventFeedbackResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateDeviceStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string), 
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "DeviceRememberedStatus", required: false, type: .enum)
        ]

        /// The access token.
        public let accessToken: String
        /// The device key.
        public let deviceKey: String
        /// The status of whether a device is remembered.
        public let deviceRememberedStatus: DeviceRememberedStatusType?

        public init(accessToken: String, deviceKey: String, deviceRememberedStatus: DeviceRememberedStatusType? = nil) {
            self.accessToken = accessToken
            self.deviceKey = deviceKey
            self.deviceRememberedStatus = deviceRememberedStatus
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(deviceKey, name:"deviceKey", max: 55)
            try validate(deviceKey, name:"deviceKey", min: 1)
            try validate(deviceKey, name:"deviceKey", pattern: "[\\w-]+_[0-9a-f-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case deviceKey = "DeviceKey"
            case deviceRememberedStatus = "DeviceRememberedStatus"
        }
    }

    public struct UpdateDeviceStatusResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "Precedence", required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// A string containing the new description of the group.
        public let description: String?
        /// The name of the group.
        public let groupName: String
        /// The new precedence value for the group. For more information about this parameter, see .
        public let precedence: Int32?
        /// The new role ARN for the group. This is used for setting the cognito:roles and cognito:preferred_role claims in the token.
        public let roleArn: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(description: String? = nil, groupName: String, precedence: Int32? = nil, roleArn: String? = nil, userPoolId: String) {
            self.description = description
            self.groupName = groupName
            self.precedence = precedence
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(description, name:"description", max: 2048)
            try validate(groupName, name:"groupName", max: 128)
            try validate(groupName, name:"groupName", min: 1)
            try validate(groupName, name:"groupName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(precedence, name:"precedence", min: 0)
            try validate(roleArn, name:"roleArn", max: 2048)
            try validate(roleArn, name:"roleArn", min: 20)
            try validate(roleArn, name:"roleArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case groupName = "GroupName"
            case precedence = "Precedence"
            case roleArn = "RoleArn"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UpdateGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .structure)
        ]

        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        public func validate() throws {
            try group?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
        }
    }

    public struct UpdateIdentityProviderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeMapping", required: false, type: .map), 
            AWSShapeMember(label: "IdpIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "ProviderDetails", required: false, type: .map), 
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The identity provider attribute mapping to be changed.
        public let attributeMapping: [String: String]?
        /// A list of identity provider identifiers.
        public let idpIdentifiers: [String]?
        /// The identity provider details to be updated, such as MetadataURL and MetadataFile.
        public let providerDetails: [String: String]?
        /// The identity provider name.
        public let providerName: String
        /// The user pool ID.
        public let userPoolId: String

        public init(attributeMapping: [String: String]? = nil, idpIdentifiers: [String]? = nil, providerDetails: [String: String]? = nil, providerName: String, userPoolId: String) {
            self.attributeMapping = attributeMapping
            self.idpIdentifiers = idpIdentifiers
            self.providerDetails = providerDetails
            self.providerName = providerName
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try idpIdentifiers?.forEach {
                try validate($0, name:"idpIdentifiers[]", max: 40)
                try validate($0, name:"idpIdentifiers[]", min: 1)
                try validate($0, name:"idpIdentifiers[]", pattern: "[\\w\\s+=.@-]+")
            }
            try validate(idpIdentifiers, name:"idpIdentifiers", max: 50)
            try validate(idpIdentifiers, name:"idpIdentifiers", min: 0)
            try validate(providerName, name:"providerName", max: 32)
            try validate(providerName, name:"providerName", min: 1)
            try validate(providerName, name:"providerName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeMapping = "AttributeMapping"
            case idpIdentifiers = "IdpIdentifiers"
            case providerDetails = "ProviderDetails"
            case providerName = "ProviderName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UpdateIdentityProviderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]

        /// The identity provider object.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        public func validate() throws {
            try identityProvider.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public struct UpdateResourceServerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Identifier", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Scopes", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The identifier for the resource server.
        public let identifier: String
        /// The name of the resource server.
        public let name: String
        /// The scope values to be set for the resource server.
        public let scopes: [ResourceServerScopeType]?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(identifier: String, name: String, scopes: [ResourceServerScopeType]? = nil, userPoolId: String) {
            self.identifier = identifier
            self.name = name
            self.scopes = scopes
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(identifier, name:"identifier", max: 256)
            try validate(identifier, name:"identifier", min: 1)
            try validate(identifier, name:"identifier", pattern: "[\\x21\\x23-\\x5B\\x5D-\\x7E]+")
            try validate(name, name:"name", max: 256)
            try validate(name, name:"name", min: 1)
            try validate(name, name:"name", pattern: "[\\w\\s+=,.@-]+")
            try scopes?.forEach {
                try $0.validate()
            }
            try validate(scopes, name:"scopes", max: 25)
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case name = "Name"
            case scopes = "Scopes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UpdateResourceServerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceServer", required: true, type: .structure)
        ]

        /// The resource server.
        public let resourceServer: ResourceServerType

        public init(resourceServer: ResourceServerType) {
            self.resourceServer = resourceServer
        }

        public func validate() throws {
            try resourceServer.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case resourceServer = "ResourceServer"
        }
    }

    public struct UpdateUserAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: true, type: .list)
        ]

        /// The access token for the request to update user attributes.
        public let accessToken: String
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]

        public init(accessToken: String, userAttributes: [AttributeType]) {
            self.accessToken = accessToken
            self.userAttributes = userAttributes
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try userAttributes.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case userAttributes = "UserAttributes"
        }
    }

    public struct UpdateUserAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetailsList", required: false, type: .list)
        ]

        /// The code delivery details list from the server for the request to update user attributes.
        public let codeDeliveryDetailsList: [CodeDeliveryDetailsType]?

        public init(codeDeliveryDetailsList: [CodeDeliveryDetailsType]? = nil) {
            self.codeDeliveryDetailsList = codeDeliveryDetailsList
        }

        public func validate() throws {
            try codeDeliveryDetailsList?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetailsList = "CodeDeliveryDetailsList"
        }
    }

    public struct UpdateUserPoolClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedOAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlowsUserPoolClient", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowedOAuthScopes", required: false, type: .list), 
            AWSShapeMember(label: "AnalyticsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CallbackURLs", required: false, type: .list), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "ClientName", required: false, type: .string), 
            AWSShapeMember(label: "DefaultRedirectURI", required: false, type: .string), 
            AWSShapeMember(label: "ExplicitAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "LogoutURLs", required: false, type: .list), 
            AWSShapeMember(label: "ReadAttributes", required: false, type: .list), 
            AWSShapeMember(label: "RefreshTokenValidity", required: false, type: .integer), 
            AWSShapeMember(label: "SupportedIdentityProviders", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "WriteAttributes", required: false, type: .list)
        ]

        /// Set to code to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.
        public let allowedOAuthFlows: [OAuthFlowType]?
        /// Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        public let allowedOAuthFlowsUserPoolClient: Bool?
        /// A list of allowed OAuth scopes. Currently supported values are "phone", "email", "openid", and "Cognito".
        public let allowedOAuthScopes: [String]?
        /// The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.
        public let analyticsConfiguration: AnalyticsConfigurationType?
        /// A list of allowed redirect (callback) URLs for the identity providers. A redirect URI must:   Be an absolute URI.   Be registered with the authorization server.   Not include a fragment component.   See OAuth 2.0 - Redirection Endpoint. Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
        public let callbackURLs: [String]?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The client name from the update user pool client request.
        public let clientName: String?
        /// The default redirect URI. Must be in the CallbackURLs list. A redirect URI must:   Be an absolute URI.   Be registered with the authorization server.   Not include a fragment component.   See OAuth 2.0 - Redirection Endpoint. Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
        public let defaultRedirectURI: String?
        /// Explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// A list of allowed logout URLs for the identity providers.
        public let logoutURLs: [String]?
        /// The read-only attributes of the user pool.
        public let readAttributes: [String]?
        /// The time limit, in days, after which the refresh token is no longer valid and cannot be used.
        public let refreshTokenValidity: Int32?
        /// A list of provider names for the identity providers that are supported on this client.
        public let supportedIdentityProviders: [String]?
        /// The user pool ID for the user pool where you want to update the user pool client.
        public let userPoolId: String
        /// The writeable attributes of the user pool.
        public let writeAttributes: [String]?

        public init(allowedOAuthFlows: [OAuthFlowType]? = nil, allowedOAuthFlowsUserPoolClient: Bool? = nil, allowedOAuthScopes: [String]? = nil, analyticsConfiguration: AnalyticsConfigurationType? = nil, callbackURLs: [String]? = nil, clientId: String, clientName: String? = nil, defaultRedirectURI: String? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, logoutURLs: [String]? = nil, readAttributes: [String]? = nil, refreshTokenValidity: Int32? = nil, supportedIdentityProviders: [String]? = nil, userPoolId: String, writeAttributes: [String]? = nil) {
            self.allowedOAuthFlows = allowedOAuthFlows
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.allowedOAuthScopes = allowedOAuthScopes
            self.analyticsConfiguration = analyticsConfiguration
            self.callbackURLs = callbackURLs
            self.clientId = clientId
            self.clientName = clientName
            self.defaultRedirectURI = defaultRedirectURI
            self.explicitAuthFlows = explicitAuthFlows
            self.logoutURLs = logoutURLs
            self.readAttributes = readAttributes
            self.refreshTokenValidity = refreshTokenValidity
            self.supportedIdentityProviders = supportedIdentityProviders
            self.userPoolId = userPoolId
            self.writeAttributes = writeAttributes
        }

        public func validate() throws {
            try validate(allowedOAuthFlows, name:"allowedOAuthFlows", max: 3)
            try validate(allowedOAuthFlows, name:"allowedOAuthFlows", min: 0)
            try allowedOAuthScopes?.forEach {
                try validate($0, name:"allowedOAuthScopes[]", max: 256)
                try validate($0, name:"allowedOAuthScopes[]", min: 1)
                try validate($0, name:"allowedOAuthScopes[]", pattern: "[\\x21\\x23-\\x5B\\x5D-\\x7E]+")
            }
            try validate(allowedOAuthScopes, name:"allowedOAuthScopes", max: 25)
            try analyticsConfiguration?.validate()
            try callbackURLs?.forEach {
                try validate($0, name:"callbackURLs[]", max: 1024)
                try validate($0, name:"callbackURLs[]", min: 1)
                try validate($0, name:"callbackURLs[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(callbackURLs, name:"callbackURLs", max: 100)
            try validate(callbackURLs, name:"callbackURLs", min: 0)
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(clientName, name:"clientName", max: 128)
            try validate(clientName, name:"clientName", min: 1)
            try validate(clientName, name:"clientName", pattern: "[\\w\\s+=,.@-]+")
            try validate(defaultRedirectURI, name:"defaultRedirectURI", max: 1024)
            try validate(defaultRedirectURI, name:"defaultRedirectURI", min: 1)
            try validate(defaultRedirectURI, name:"defaultRedirectURI", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try logoutURLs?.forEach {
                try validate($0, name:"logoutURLs[]", max: 1024)
                try validate($0, name:"logoutURLs[]", min: 1)
                try validate($0, name:"logoutURLs[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(logoutURLs, name:"logoutURLs", max: 100)
            try validate(logoutURLs, name:"logoutURLs", min: 0)
            try readAttributes?.forEach {
                try validate($0, name:"readAttributes[]", max: 2048)
                try validate($0, name:"readAttributes[]", min: 1)
            }
            try validate(refreshTokenValidity, name:"refreshTokenValidity", max: 3650)
            try validate(refreshTokenValidity, name:"refreshTokenValidity", min: 0)
            try supportedIdentityProviders?.forEach {
                try validate($0, name:"supportedIdentityProviders[]", max: 32)
                try validate($0, name:"supportedIdentityProviders[]", min: 1)
                try validate($0, name:"supportedIdentityProviders[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
            try writeAttributes?.forEach {
                try validate($0, name:"writeAttributes[]", max: 2048)
                try validate($0, name:"writeAttributes[]", min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case allowedOAuthFlows = "AllowedOAuthFlows"
            case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
            case allowedOAuthScopes = "AllowedOAuthScopes"
            case analyticsConfiguration = "AnalyticsConfiguration"
            case callbackURLs = "CallbackURLs"
            case clientId = "ClientId"
            case clientName = "ClientName"
            case defaultRedirectURI = "DefaultRedirectURI"
            case explicitAuthFlows = "ExplicitAuthFlows"
            case logoutURLs = "LogoutURLs"
            case readAttributes = "ReadAttributes"
            case refreshTokenValidity = "RefreshTokenValidity"
            case supportedIdentityProviders = "SupportedIdentityProviders"
            case userPoolId = "UserPoolId"
            case writeAttributes = "WriteAttributes"
        }
    }

    public struct UpdateUserPoolClientResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolClient", required: false, type: .structure)
        ]

        /// The user pool client value from the response from the server when an update user pool client request is made.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        public func validate() throws {
            try userPoolClient?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolClient = "UserPoolClient"
        }
    }

    public struct UpdateUserPoolDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomDomainConfig", required: true, type: .structure), 
            AWSShapeMember(label: "Domain", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]

        /// The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.
        public let customDomainConfig: CustomDomainConfigType
        /// The domain name for the custom domain that hosts the sign-up and sign-in pages for your application. For example: auth.example.com.  This string can include only lowercase letters, numbers, and hyphens. Do not use a hyphen for the first or last character. Use periods to separate subdomain names.
        public let domain: String
        /// The ID of the user pool that is associated with the custom domain that you are updating the certificate for.
        public let userPoolId: String

        public init(customDomainConfig: CustomDomainConfigType, domain: String, userPoolId: String) {
            self.customDomainConfig = customDomainConfig
            self.domain = domain
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try customDomainConfig.validate()
            try validate(domain, name:"domain", max: 63)
            try validate(domain, name:"domain", min: 1)
            try validate(domain, name:"domain", pattern: "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case customDomainConfig = "CustomDomainConfig"
            case domain = "Domain"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UpdateUserPoolDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontDomain", required: false, type: .string)
        ]

        /// The Amazon CloudFront endpoint that Amazon Cognito set up when you added the custom domain to your user pool.
        public let cloudFrontDomain: String?

        public init(cloudFrontDomain: String? = nil) {
            self.cloudFrontDomain = cloudFrontDomain
        }

        public func validate() throws {
            try validate(cloudFrontDomain, name:"cloudFrontDomain", max: 63)
            try validate(cloudFrontDomain, name:"cloudFrontDomain", min: 1)
            try validate(cloudFrontDomain, name:"cloudFrontDomain", pattern: "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$")
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontDomain = "CloudFrontDomain"
        }
    }

    public struct UpdateUserPoolRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdminCreateUserConfig", required: false, type: .structure), 
            AWSShapeMember(label: "AutoVerifiedAttributes", required: false, type: .list), 
            AWSShapeMember(label: "DeviceConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EmailConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EmailVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailVerificationSubject", required: false, type: .string), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "Policies", required: false, type: .structure), 
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolAddOns", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolTags", required: false, type: .map), 
            AWSShapeMember(label: "VerificationMessageTemplate", required: false, type: .structure)
        ]

        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// Device configuration.
        public let deviceConfiguration: DeviceConfigurationType?
        /// Email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// The contents of the email verification message.
        public let emailVerificationMessage: String?
        /// The subject of the email verification message.
        public let emailVerificationSubject: String?
        /// The AWS Lambda configuration information from the request to update the user pool.
        public let lambdaConfig: LambdaConfigType?
        /// Can be one of the following values:    OFF - MFA tokens are not required and cannot be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.    OPTIONAL - Users have the option when registering to create an MFA token.  
        public let mfaConfiguration: UserPoolMfaType?
        /// A container with the policies you wish to update in a user pool.
        public let policies: UserPoolPolicyType?
        /// The contents of the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// A container with information about the SMS verification message.
        public let smsVerificationMessage: String?
        /// Used to enable advanced security risk detection. Set the key AdvancedSecurityMode to the value "AUDIT".
        public let userPoolAddOns: UserPoolAddOnsType?
        /// The user pool ID for the user pool you want to update.
        public let userPoolId: String
        /// The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
        public let userPoolTags: [String: String]?
        /// The template for verification messages.
        public let verificationMessageTemplate: VerificationMessageTemplateType?

        public init(adminCreateUserConfig: AdminCreateUserConfigType? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, deviceConfiguration: DeviceConfigurationType? = nil, emailConfiguration: EmailConfigurationType? = nil, emailVerificationMessage: String? = nil, emailVerificationSubject: String? = nil, lambdaConfig: LambdaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil, policies: UserPoolPolicyType? = nil, smsAuthenticationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, smsVerificationMessage: String? = nil, userPoolAddOns: UserPoolAddOnsType? = nil, userPoolId: String, userPoolTags: [String: String]? = nil, verificationMessageTemplate: VerificationMessageTemplateType? = nil) {
            self.adminCreateUserConfig = adminCreateUserConfig
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
            self.emailConfiguration = emailConfiguration
            self.emailVerificationMessage = emailVerificationMessage
            self.emailVerificationSubject = emailVerificationSubject
            self.lambdaConfig = lambdaConfig
            self.mfaConfiguration = mfaConfiguration
            self.policies = policies
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.userPoolAddOns = userPoolAddOns
            self.userPoolId = userPoolId
            self.userPoolTags = userPoolTags
            self.verificationMessageTemplate = verificationMessageTemplate
        }

        public func validate() throws {
            try adminCreateUserConfig?.validate()
            try emailConfiguration?.validate()
            try validate(emailVerificationMessage, name:"emailVerificationMessage", max: 20000)
            try validate(emailVerificationMessage, name:"emailVerificationMessage", min: 6)
            try validate(emailVerificationMessage, name:"emailVerificationMessage", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*")
            try validate(emailVerificationSubject, name:"emailVerificationSubject", max: 140)
            try validate(emailVerificationSubject, name:"emailVerificationSubject", min: 1)
            try validate(emailVerificationSubject, name:"emailVerificationSubject", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+")
            try lambdaConfig?.validate()
            try policies?.validate()
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", max: 140)
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", min: 6)
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", pattern: ".*\\{####\\}.*")
            try smsConfiguration?.validate()
            try validate(smsVerificationMessage, name:"smsVerificationMessage", max: 140)
            try validate(smsVerificationMessage, name:"smsVerificationMessage", min: 6)
            try validate(smsVerificationMessage, name:"smsVerificationMessage", pattern: ".*\\{####\\}.*")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
            try verificationMessageTemplate?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case adminCreateUserConfig = "AdminCreateUserConfig"
            case autoVerifiedAttributes = "AutoVerifiedAttributes"
            case deviceConfiguration = "DeviceConfiguration"
            case emailConfiguration = "EmailConfiguration"
            case emailVerificationMessage = "EmailVerificationMessage"
            case emailVerificationSubject = "EmailVerificationSubject"
            case lambdaConfig = "LambdaConfig"
            case mfaConfiguration = "MfaConfiguration"
            case policies = "Policies"
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case smsConfiguration = "SmsConfiguration"
            case smsVerificationMessage = "SmsVerificationMessage"
            case userPoolAddOns = "UserPoolAddOns"
            case userPoolId = "UserPoolId"
            case userPoolTags = "UserPoolTags"
            case verificationMessageTemplate = "VerificationMessageTemplate"
        }
    }

    public struct UpdateUserPoolResponse: AWSShape {


        public init() {
        }

    }

    public struct UserContextDataType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodedData", required: false, type: .string)
        ]

        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let encodedData: String?

        public init(encodedData: String? = nil) {
            self.encodedData = encodedData
        }

        private enum CodingKeys: String, CodingKey {
            case encodedData = "EncodedData"
        }
    }

    public enum UserImportJobStatusType: String, CustomStringConvertible, Codable {
        case created = "Created"
        case pending = "Pending"
        case inprogress = "InProgress"
        case stopping = "Stopping"
        case expired = "Expired"
        case stopped = "Stopped"
        case failed = "Failed"
        case succeeded = "Succeeded"
        public var description: String { return self.rawValue }
    }

    public struct UserImportJobType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "CompletionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CompletionMessage", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "FailedUsers", required: false, type: .long), 
            AWSShapeMember(label: "ImportedUsers", required: false, type: .long), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "SkippedUsers", required: false, type: .long), 
            AWSShapeMember(label: "StartDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]

        /// The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.
        public let cloudWatchLogsRoleArn: String?
        /// The date when the user import job was completed.
        public let completionDate: TimeStamp?
        /// The message returned when the user import job is completed.
        public let completionMessage: String?
        /// The date the user import job was created.
        public let creationDate: TimeStamp?
        /// The number of users that could not be imported.
        public let failedUsers: Int64?
        /// The number of users that were successfully imported.
        public let importedUsers: Int64?
        /// The job ID for the user import job.
        public let jobId: String?
        /// The job name for the user import job.
        public let jobName: String?
        /// The pre-signed URL to be used to upload the .csv file.
        public let preSignedUrl: String?
        /// The number of users that were skipped.
        public let skippedUsers: Int64?
        /// The date when the user import job was started.
        public let startDate: TimeStamp?
        /// The status of the user import job. One of the following:    Created - The job was created but not started.    Pending - A transition state. You have started the job, but it has not begun importing users yet.    InProgress - The job has started, and users are being imported.    Stopping - You have stopped the job, but the job has not stopped importing users yet.    Stopped - You have stopped the job, and the job has stopped importing users.    Succeeded - The job has completed successfully.    Failed - The job has stopped due to an error.    Expired - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.  
        public let status: UserImportJobStatusType?
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String?

        public init(cloudWatchLogsRoleArn: String? = nil, completionDate: TimeStamp? = nil, completionMessage: String? = nil, creationDate: TimeStamp? = nil, failedUsers: Int64? = nil, importedUsers: Int64? = nil, jobId: String? = nil, jobName: String? = nil, preSignedUrl: String? = nil, skippedUsers: Int64? = nil, startDate: TimeStamp? = nil, status: UserImportJobStatusType? = nil, userPoolId: String? = nil) {
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.completionDate = completionDate
            self.completionMessage = completionMessage
            self.creationDate = creationDate
            self.failedUsers = failedUsers
            self.importedUsers = importedUsers
            self.jobId = jobId
            self.jobName = jobName
            self.preSignedUrl = preSignedUrl
            self.skippedUsers = skippedUsers
            self.startDate = startDate
            self.status = status
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(cloudWatchLogsRoleArn, name:"cloudWatchLogsRoleArn", max: 2048)
            try validate(cloudWatchLogsRoleArn, name:"cloudWatchLogsRoleArn", min: 20)
            try validate(cloudWatchLogsRoleArn, name:"cloudWatchLogsRoleArn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(completionMessage, name:"completionMessage", max: 128)
            try validate(completionMessage, name:"completionMessage", min: 1)
            try validate(completionMessage, name:"completionMessage", pattern: "[\\w]+")
            try validate(jobId, name:"jobId", max: 55)
            try validate(jobId, name:"jobId", min: 1)
            try validate(jobId, name:"jobId", pattern: "import-[0-9a-zA-Z-]+")
            try validate(jobName, name:"jobName", max: 128)
            try validate(jobName, name:"jobName", min: 1)
            try validate(jobName, name:"jobName", pattern: "[\\w\\s+=,.@-]+")
            try validate(preSignedUrl, name:"preSignedUrl", max: 2048)
            try validate(preSignedUrl, name:"preSignedUrl", min: 0)
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case completionDate = "CompletionDate"
            case completionMessage = "CompletionMessage"
            case creationDate = "CreationDate"
            case failedUsers = "FailedUsers"
            case importedUsers = "ImportedUsers"
            case jobId = "JobId"
            case jobName = "JobName"
            case preSignedUrl = "PreSignedUrl"
            case skippedUsers = "SkippedUsers"
            case startDate = "StartDate"
            case status = "Status"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UserPoolAddOnsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdvancedSecurityMode", required: true, type: .enum)
        ]

        /// The advanced security mode.
        public let advancedSecurityMode: AdvancedSecurityModeType

        public init(advancedSecurityMode: AdvancedSecurityModeType) {
            self.advancedSecurityMode = advancedSecurityMode
        }

        private enum CodingKeys: String, CodingKey {
            case advancedSecurityMode = "AdvancedSecurityMode"
        }
    }

    public struct UserPoolClientDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "ClientName", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]

        /// The ID of the client associated with the user pool.
        public let clientId: String?
        /// The client name from the user pool client description.
        public let clientName: String?
        /// The user pool ID for the user pool where you want to describe the user pool client.
        public let userPoolId: String?

        public init(clientId: String? = nil, clientName: String? = nil, userPoolId: String? = nil) {
            self.clientId = clientId
            self.clientName = clientName
            self.userPoolId = userPoolId
        }

        public func validate() throws {
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(clientName, name:"clientName", max: 128)
            try validate(clientName, name:"clientName", min: 1)
            try validate(clientName, name:"clientName", pattern: "[\\w\\s+=,.@-]+")
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case clientName = "ClientName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UserPoolClientType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedOAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlowsUserPoolClient", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowedOAuthScopes", required: false, type: .list), 
            AWSShapeMember(label: "AnalyticsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CallbackURLs", required: false, type: .list), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "ClientName", required: false, type: .string), 
            AWSShapeMember(label: "ClientSecret", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRedirectURI", required: false, type: .string), 
            AWSShapeMember(label: "ExplicitAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "LogoutURLs", required: false, type: .list), 
            AWSShapeMember(label: "ReadAttributes", required: false, type: .list), 
            AWSShapeMember(label: "RefreshTokenValidity", required: false, type: .integer), 
            AWSShapeMember(label: "SupportedIdentityProviders", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string), 
            AWSShapeMember(label: "WriteAttributes", required: false, type: .list)
        ]

        /// Set to code to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint. Set to token to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.
        public let allowedOAuthFlows: [OAuthFlowType]?
        /// Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        public let allowedOAuthFlowsUserPoolClient: Bool?
        /// A list of allowed OAuth scopes. Currently supported values are "phone", "email", "openid", and "Cognito".
        public let allowedOAuthScopes: [String]?
        /// The Amazon Pinpoint analytics configuration for the user pool client.
        public let analyticsConfiguration: AnalyticsConfigurationType?
        /// A list of allowed redirect (callback) URLs for the identity providers. A redirect URI must:   Be an absolute URI.   Be registered with the authorization server.   Not include a fragment component.   See OAuth 2.0 - Redirection Endpoint. Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
        public let callbackURLs: [String]?
        /// The ID of the client associated with the user pool.
        public let clientId: String?
        /// The client name from the user pool request of the client type.
        public let clientName: String?
        /// The client secret from the user pool request of the client type.
        public let clientSecret: String?
        /// The date the user pool client was created.
        public let creationDate: TimeStamp?
        /// The default redirect URI. Must be in the CallbackURLs list. A redirect URI must:   Be an absolute URI.   Be registered with the authorization server.   Not include a fragment component.   See OAuth 2.0 - Redirection Endpoint. Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
        public let defaultRedirectURI: String?
        /// The explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// The date the user pool client was last modified.
        public let lastModifiedDate: TimeStamp?
        /// A list of allowed logout URLs for the identity providers.
        public let logoutURLs: [String]?
        /// The Read-only attributes.
        public let readAttributes: [String]?
        /// The time limit, in days, after which the refresh token is no longer valid and cannot be used.
        public let refreshTokenValidity: Int32?
        /// A list of provider names for the identity providers that are supported on this client.
        public let supportedIdentityProviders: [String]?
        /// The user pool ID for the user pool client.
        public let userPoolId: String?
        /// The writeable attributes.
        public let writeAttributes: [String]?

        public init(allowedOAuthFlows: [OAuthFlowType]? = nil, allowedOAuthFlowsUserPoolClient: Bool? = nil, allowedOAuthScopes: [String]? = nil, analyticsConfiguration: AnalyticsConfigurationType? = nil, callbackURLs: [String]? = nil, clientId: String? = nil, clientName: String? = nil, clientSecret: String? = nil, creationDate: TimeStamp? = nil, defaultRedirectURI: String? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, lastModifiedDate: TimeStamp? = nil, logoutURLs: [String]? = nil, readAttributes: [String]? = nil, refreshTokenValidity: Int32? = nil, supportedIdentityProviders: [String]? = nil, userPoolId: String? = nil, writeAttributes: [String]? = nil) {
            self.allowedOAuthFlows = allowedOAuthFlows
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.allowedOAuthScopes = allowedOAuthScopes
            self.analyticsConfiguration = analyticsConfiguration
            self.callbackURLs = callbackURLs
            self.clientId = clientId
            self.clientName = clientName
            self.clientSecret = clientSecret
            self.creationDate = creationDate
            self.defaultRedirectURI = defaultRedirectURI
            self.explicitAuthFlows = explicitAuthFlows
            self.lastModifiedDate = lastModifiedDate
            self.logoutURLs = logoutURLs
            self.readAttributes = readAttributes
            self.refreshTokenValidity = refreshTokenValidity
            self.supportedIdentityProviders = supportedIdentityProviders
            self.userPoolId = userPoolId
            self.writeAttributes = writeAttributes
        }

        public func validate() throws {
            try validate(allowedOAuthFlows, name:"allowedOAuthFlows", max: 3)
            try validate(allowedOAuthFlows, name:"allowedOAuthFlows", min: 0)
            try allowedOAuthScopes?.forEach {
                try validate($0, name:"allowedOAuthScopes[]", max: 256)
                try validate($0, name:"allowedOAuthScopes[]", min: 1)
                try validate($0, name:"allowedOAuthScopes[]", pattern: "[\\x21\\x23-\\x5B\\x5D-\\x7E]+")
            }
            try validate(allowedOAuthScopes, name:"allowedOAuthScopes", max: 25)
            try analyticsConfiguration?.validate()
            try callbackURLs?.forEach {
                try validate($0, name:"callbackURLs[]", max: 1024)
                try validate($0, name:"callbackURLs[]", min: 1)
                try validate($0, name:"callbackURLs[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(callbackURLs, name:"callbackURLs", max: 100)
            try validate(callbackURLs, name:"callbackURLs", min: 0)
            try validate(clientId, name:"clientId", max: 128)
            try validate(clientId, name:"clientId", min: 1)
            try validate(clientId, name:"clientId", pattern: "[\\w+]+")
            try validate(clientName, name:"clientName", max: 128)
            try validate(clientName, name:"clientName", min: 1)
            try validate(clientName, name:"clientName", pattern: "[\\w\\s+=,.@-]+")
            try validate(clientSecret, name:"clientSecret", max: 64)
            try validate(clientSecret, name:"clientSecret", min: 1)
            try validate(clientSecret, name:"clientSecret", pattern: "[\\w+]+")
            try validate(defaultRedirectURI, name:"defaultRedirectURI", max: 1024)
            try validate(defaultRedirectURI, name:"defaultRedirectURI", min: 1)
            try validate(defaultRedirectURI, name:"defaultRedirectURI", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try logoutURLs?.forEach {
                try validate($0, name:"logoutURLs[]", max: 1024)
                try validate($0, name:"logoutURLs[]", min: 1)
                try validate($0, name:"logoutURLs[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(logoutURLs, name:"logoutURLs", max: 100)
            try validate(logoutURLs, name:"logoutURLs", min: 0)
            try readAttributes?.forEach {
                try validate($0, name:"readAttributes[]", max: 2048)
                try validate($0, name:"readAttributes[]", min: 1)
            }
            try validate(refreshTokenValidity, name:"refreshTokenValidity", max: 3650)
            try validate(refreshTokenValidity, name:"refreshTokenValidity", min: 0)
            try supportedIdentityProviders?.forEach {
                try validate($0, name:"supportedIdentityProviders[]", max: 32)
                try validate($0, name:"supportedIdentityProviders[]", min: 1)
                try validate($0, name:"supportedIdentityProviders[]", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try validate(userPoolId, name:"userPoolId", max: 55)
            try validate(userPoolId, name:"userPoolId", min: 1)
            try validate(userPoolId, name:"userPoolId", pattern: "[\\w-]+_[0-9a-zA-Z]+")
            try writeAttributes?.forEach {
                try validate($0, name:"writeAttributes[]", max: 2048)
                try validate($0, name:"writeAttributes[]", min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case allowedOAuthFlows = "AllowedOAuthFlows"
            case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
            case allowedOAuthScopes = "AllowedOAuthScopes"
            case analyticsConfiguration = "AnalyticsConfiguration"
            case callbackURLs = "CallbackURLs"
            case clientId = "ClientId"
            case clientName = "ClientName"
            case clientSecret = "ClientSecret"
            case creationDate = "CreationDate"
            case defaultRedirectURI = "DefaultRedirectURI"
            case explicitAuthFlows = "ExplicitAuthFlows"
            case lastModifiedDate = "LastModifiedDate"
            case logoutURLs = "LogoutURLs"
            case readAttributes = "ReadAttributes"
            case refreshTokenValidity = "RefreshTokenValidity"
            case supportedIdentityProviders = "SupportedIdentityProviders"
            case userPoolId = "UserPoolId"
            case writeAttributes = "WriteAttributes"
        }
    }

    public struct UserPoolDescriptionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]

        /// The date the user pool description was created.
        public let creationDate: TimeStamp?
        /// The ID in a user pool description.
        public let id: String?
        /// The AWS Lambda configuration information in a user pool description.
        public let lambdaConfig: LambdaConfigType?
        /// The date the user pool description was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The name in a user pool description.
        public let name: String?
        /// The user pool status in a user pool description.
        public let status: StatusType?

        public init(creationDate: TimeStamp? = nil, id: String? = nil, lambdaConfig: LambdaConfigType? = nil, lastModifiedDate: TimeStamp? = nil, name: String? = nil, status: StatusType? = nil) {
            self.creationDate = creationDate
            self.id = id
            self.lambdaConfig = lambdaConfig
            self.lastModifiedDate = lastModifiedDate
            self.name = name
            self.status = status
        }

        public func validate() throws {
            try validate(id, name:"id", max: 55)
            try validate(id, name:"id", min: 1)
            try validate(id, name:"id", pattern: "[\\w-]+_[0-9a-zA-Z]+")
            try lambdaConfig?.validate()
            try validate(name, name:"name", max: 128)
            try validate(name, name:"name", min: 1)
            try validate(name, name:"name", pattern: "[\\w\\s+=,.@-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case creationDate = "CreationDate"
            case id = "Id"
            case lambdaConfig = "LambdaConfig"
            case lastModifiedDate = "LastModifiedDate"
            case name = "Name"
            case status = "Status"
        }
    }

    public enum UserPoolMfaType: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case on = "ON"
        case optional = "OPTIONAL"
        public var description: String { return self.rawValue }
    }

    public struct UserPoolPolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PasswordPolicy", required: false, type: .structure)
        ]

        /// The password policy.
        public let passwordPolicy: PasswordPolicyType?

        public init(passwordPolicy: PasswordPolicyType? = nil) {
            self.passwordPolicy = passwordPolicy
        }

        public func validate() throws {
            try passwordPolicy?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case passwordPolicy = "PasswordPolicy"
        }
    }

    public struct UserPoolType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdminCreateUserConfig", required: false, type: .structure), 
            AWSShapeMember(label: "AliasAttributes", required: false, type: .list), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "AutoVerifiedAttributes", required: false, type: .list), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CustomDomain", required: false, type: .string), 
            AWSShapeMember(label: "DeviceConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "EmailConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EmailConfigurationFailure", required: false, type: .string), 
            AWSShapeMember(label: "EmailVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailVerificationSubject", required: false, type: .string), 
            AWSShapeMember(label: "EstimatedNumberOfUsers", required: false, type: .integer), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Policies", required: false, type: .structure), 
            AWSShapeMember(label: "SchemaAttributes", required: false, type: .list), 
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsConfigurationFailure", required: false, type: .string), 
            AWSShapeMember(label: "SmsVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "UsernameAttributes", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolAddOns", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolTags", required: false, type: .map), 
            AWSShapeMember(label: "VerificationMessageTemplate", required: false, type: .structure)
        ]

        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// Specifies the attributes that are aliased in a user pool.
        public let aliasAttributes: [AliasAttributeType]?
        /// The Amazon Resource Name (ARN) for the user pool.
        public let arn: String?
        /// Specifies the attributes that are auto-verified in a user pool.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// The date the user pool was created.
        public let creationDate: TimeStamp?
        /// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. For example: auth.example.com. For more information about adding a custom domain to your user pool, see Using Your Own Domain for the Hosted UI.
        public let customDomain: String?
        /// The device configuration.
        public let deviceConfiguration: DeviceConfigurationType?
        /// Holds the domain prefix if the user pool has a domain associated with it.
        public let domain: String?
        /// The email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// The reason why the email configuration cannot send the messages to your users.
        public let emailConfigurationFailure: String?
        /// The contents of the email verification message.
        public let emailVerificationMessage: String?
        /// The subject of the email verification message.
        public let emailVerificationSubject: String?
        /// A number estimating the size of the user pool.
        public let estimatedNumberOfUsers: Int32?
        /// The ID of the user pool.
        public let id: String?
        /// The AWS Lambda triggers associated with the user pool.
        public let lambdaConfig: LambdaConfigType?
        /// The date the user pool was last modified.
        public let lastModifiedDate: TimeStamp?
        /// Can be one of the following values:    OFF - MFA tokens are not required and cannot be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.    OPTIONAL - Users have the option when registering to create an MFA token.  
        public let mfaConfiguration: UserPoolMfaType?
        /// The name of the user pool.
        public let name: String?
        /// The policies associated with the user pool.
        public let policies: UserPoolPolicyType?
        /// A container with the schema attributes of a user pool.
        public let schemaAttributes: [SchemaAttributeType]?
        /// The contents of the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// The reason why the SMS configuration cannot send the messages to your users.
        public let smsConfigurationFailure: String?
        /// The contents of the SMS verification message.
        public let smsVerificationMessage: String?
        /// The status of a user pool.
        public let status: StatusType?
        /// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
        public let usernameAttributes: [UsernameAttributeType]?
        /// The user pool add-ons.
        public let userPoolAddOns: UserPoolAddOnsType?
        /// The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.
        public let userPoolTags: [String: String]?
        /// The template for verification messages.
        public let verificationMessageTemplate: VerificationMessageTemplateType?

        public init(adminCreateUserConfig: AdminCreateUserConfigType? = nil, aliasAttributes: [AliasAttributeType]? = nil, arn: String? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, creationDate: TimeStamp? = nil, customDomain: String? = nil, deviceConfiguration: DeviceConfigurationType? = nil, domain: String? = nil, emailConfiguration: EmailConfigurationType? = nil, emailConfigurationFailure: String? = nil, emailVerificationMessage: String? = nil, emailVerificationSubject: String? = nil, estimatedNumberOfUsers: Int32? = nil, id: String? = nil, lambdaConfig: LambdaConfigType? = nil, lastModifiedDate: TimeStamp? = nil, mfaConfiguration: UserPoolMfaType? = nil, name: String? = nil, policies: UserPoolPolicyType? = nil, schemaAttributes: [SchemaAttributeType]? = nil, smsAuthenticationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, smsConfigurationFailure: String? = nil, smsVerificationMessage: String? = nil, status: StatusType? = nil, usernameAttributes: [UsernameAttributeType]? = nil, userPoolAddOns: UserPoolAddOnsType? = nil, userPoolTags: [String: String]? = nil, verificationMessageTemplate: VerificationMessageTemplateType? = nil) {
            self.adminCreateUserConfig = adminCreateUserConfig
            self.aliasAttributes = aliasAttributes
            self.arn = arn
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.creationDate = creationDate
            self.customDomain = customDomain
            self.deviceConfiguration = deviceConfiguration
            self.domain = domain
            self.emailConfiguration = emailConfiguration
            self.emailConfigurationFailure = emailConfigurationFailure
            self.emailVerificationMessage = emailVerificationMessage
            self.emailVerificationSubject = emailVerificationSubject
            self.estimatedNumberOfUsers = estimatedNumberOfUsers
            self.id = id
            self.lambdaConfig = lambdaConfig
            self.lastModifiedDate = lastModifiedDate
            self.mfaConfiguration = mfaConfiguration
            self.name = name
            self.policies = policies
            self.schemaAttributes = schemaAttributes
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
            self.smsConfigurationFailure = smsConfigurationFailure
            self.smsVerificationMessage = smsVerificationMessage
            self.status = status
            self.usernameAttributes = usernameAttributes
            self.userPoolAddOns = userPoolAddOns
            self.userPoolTags = userPoolTags
            self.verificationMessageTemplate = verificationMessageTemplate
        }

        public func validate() throws {
            try adminCreateUserConfig?.validate()
            try validate(arn, name:"arn", max: 2048)
            try validate(arn, name:"arn", min: 20)
            try validate(arn, name:"arn", pattern: "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?")
            try validate(customDomain, name:"customDomain", max: 63)
            try validate(customDomain, name:"customDomain", min: 1)
            try validate(customDomain, name:"customDomain", pattern: "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$")
            try validate(domain, name:"domain", max: 63)
            try validate(domain, name:"domain", min: 1)
            try validate(domain, name:"domain", pattern: "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$")
            try emailConfiguration?.validate()
            try validate(emailVerificationMessage, name:"emailVerificationMessage", max: 20000)
            try validate(emailVerificationMessage, name:"emailVerificationMessage", min: 6)
            try validate(emailVerificationMessage, name:"emailVerificationMessage", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*")
            try validate(emailVerificationSubject, name:"emailVerificationSubject", max: 140)
            try validate(emailVerificationSubject, name:"emailVerificationSubject", min: 1)
            try validate(emailVerificationSubject, name:"emailVerificationSubject", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+")
            try validate(id, name:"id", max: 55)
            try validate(id, name:"id", min: 1)
            try validate(id, name:"id", pattern: "[\\w-]+_[0-9a-zA-Z]+")
            try lambdaConfig?.validate()
            try validate(name, name:"name", max: 128)
            try validate(name, name:"name", min: 1)
            try validate(name, name:"name", pattern: "[\\w\\s+=,.@-]+")
            try policies?.validate()
            try schemaAttributes?.forEach {
                try $0.validate()
            }
            try validate(schemaAttributes, name:"schemaAttributes", max: 50)
            try validate(schemaAttributes, name:"schemaAttributes", min: 1)
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", max: 140)
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", min: 6)
            try validate(smsAuthenticationMessage, name:"smsAuthenticationMessage", pattern: ".*\\{####\\}.*")
            try smsConfiguration?.validate()
            try validate(smsVerificationMessage, name:"smsVerificationMessage", max: 140)
            try validate(smsVerificationMessage, name:"smsVerificationMessage", min: 6)
            try validate(smsVerificationMessage, name:"smsVerificationMessage", pattern: ".*\\{####\\}.*")
            try verificationMessageTemplate?.validate()
        }

        private enum CodingKeys: String, CodingKey {
            case adminCreateUserConfig = "AdminCreateUserConfig"
            case aliasAttributes = "AliasAttributes"
            case arn = "Arn"
            case autoVerifiedAttributes = "AutoVerifiedAttributes"
            case creationDate = "CreationDate"
            case customDomain = "CustomDomain"
            case deviceConfiguration = "DeviceConfiguration"
            case domain = "Domain"
            case emailConfiguration = "EmailConfiguration"
            case emailConfigurationFailure = "EmailConfigurationFailure"
            case emailVerificationMessage = "EmailVerificationMessage"
            case emailVerificationSubject = "EmailVerificationSubject"
            case estimatedNumberOfUsers = "EstimatedNumberOfUsers"
            case id = "Id"
            case lambdaConfig = "LambdaConfig"
            case lastModifiedDate = "LastModifiedDate"
            case mfaConfiguration = "MfaConfiguration"
            case name = "Name"
            case policies = "Policies"
            case schemaAttributes = "SchemaAttributes"
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case smsConfiguration = "SmsConfiguration"
            case smsConfigurationFailure = "SmsConfigurationFailure"
            case smsVerificationMessage = "SmsVerificationMessage"
            case status = "Status"
            case usernameAttributes = "UsernameAttributes"
            case userPoolAddOns = "UserPoolAddOns"
            case userPoolTags = "UserPoolTags"
            case verificationMessageTemplate = "VerificationMessageTemplate"
        }
    }

    public enum UserStatusType: String, CustomStringConvertible, Codable {
        case unconfirmed = "UNCONFIRMED"
        case confirmed = "CONFIRMED"
        case archived = "ARCHIVED"
        case compromised = "COMPROMISED"
        case unknown = "UNKNOWN"
        case resetRequired = "RESET_REQUIRED"
        case forceChangePassword = "FORCE_CHANGE_PASSWORD"
        public var description: String { return self.rawValue }
    }

    public struct UserType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "MFAOptions", required: false, type: .list), 
            AWSShapeMember(label: "UserCreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "UserLastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "UserStatus", required: false, type: .enum)
        ]

        /// A container with information about the user type attributes.
        public let attributes: [AttributeType]?
        /// Specifies whether the user is enabled.
        public let enabled: Bool?
        /// The MFA options for the user.
        public let mFAOptions: [MFAOptionType]?
        /// The creation date of the user.
        public let userCreateDate: TimeStamp?
        /// The last modified date of the user.
        public let userLastModifiedDate: TimeStamp?
        /// The user name of the user you wish to describe.
        public let username: String?
        /// The user status. Can be one of the following:   UNCONFIRMED - User has been created but not confirmed.   CONFIRMED - User has been confirmed.   ARCHIVED - User is no longer active.   COMPROMISED - User is disabled due to a potential security threat.   UNKNOWN - User status is not known.   RESET_REQUIRED - User is confirmed, but the user must request a code and reset his or her password before he or she can sign in.   FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change his or her password to a new value before doing anything else.   
        public let userStatus: UserStatusType?

        public init(attributes: [AttributeType]? = nil, enabled: Bool? = nil, mFAOptions: [MFAOptionType]? = nil, userCreateDate: TimeStamp? = nil, userLastModifiedDate: TimeStamp? = nil, username: String? = nil, userStatus: UserStatusType? = nil) {
            self.attributes = attributes
            self.enabled = enabled
            self.mFAOptions = mFAOptions
            self.userCreateDate = userCreateDate
            self.userLastModifiedDate = userLastModifiedDate
            self.username = username
            self.userStatus = userStatus
        }

        public func validate() throws {
            try attributes?.forEach {
                try $0.validate()
            }
            try mFAOptions?.forEach {
                try $0.validate()
            }
            try validate(username, name:"username", max: 128)
            try validate(username, name:"username", min: 1)
            try validate(username, name:"username", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case enabled = "Enabled"
            case mFAOptions = "MFAOptions"
            case userCreateDate = "UserCreateDate"
            case userLastModifiedDate = "UserLastModifiedDate"
            case username = "Username"
            case userStatus = "UserStatus"
        }
    }

    public enum UsernameAttributeType: String, CustomStringConvertible, Codable {
        case phoneNumber = "phone_number"
        case email = "email"
        public var description: String { return self.rawValue }
    }

    public struct VerificationMessageTemplateType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultEmailOption", required: false, type: .enum), 
            AWSShapeMember(label: "EmailMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailMessageByLink", required: false, type: .string), 
            AWSShapeMember(label: "EmailSubject", required: false, type: .string), 
            AWSShapeMember(label: "EmailSubjectByLink", required: false, type: .string), 
            AWSShapeMember(label: "SmsMessage", required: false, type: .string)
        ]

        /// The default email option.
        public let defaultEmailOption: DefaultEmailOptionType?
        /// The email message template.
        public let emailMessage: String?
        /// The email message template for sending a confirmation link to the user.
        public let emailMessageByLink: String?
        /// The subject line for the email message template.
        public let emailSubject: String?
        /// The subject line for the email message template for sending a confirmation link to the user.
        public let emailSubjectByLink: String?
        /// The SMS message template.
        public let smsMessage: String?

        public init(defaultEmailOption: DefaultEmailOptionType? = nil, emailMessage: String? = nil, emailMessageByLink: String? = nil, emailSubject: String? = nil, emailSubjectByLink: String? = nil, smsMessage: String? = nil) {
            self.defaultEmailOption = defaultEmailOption
            self.emailMessage = emailMessage
            self.emailMessageByLink = emailMessageByLink
            self.emailSubject = emailSubject
            self.emailSubjectByLink = emailSubjectByLink
            self.smsMessage = smsMessage
        }

        public func validate() throws {
            try validate(emailMessage, name:"emailMessage", max: 20000)
            try validate(emailMessage, name:"emailMessage", min: 6)
            try validate(emailMessage, name:"emailMessage", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*")
            try validate(emailMessageByLink, name:"emailMessageByLink", max: 20000)
            try validate(emailMessageByLink, name:"emailMessageByLink", min: 6)
            try validate(emailMessageByLink, name:"emailMessageByLink", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*")
            try validate(emailSubject, name:"emailSubject", max: 140)
            try validate(emailSubject, name:"emailSubject", min: 1)
            try validate(emailSubject, name:"emailSubject", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+")
            try validate(emailSubjectByLink, name:"emailSubjectByLink", max: 140)
            try validate(emailSubjectByLink, name:"emailSubjectByLink", min: 1)
            try validate(emailSubjectByLink, name:"emailSubjectByLink", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+")
            try validate(smsMessage, name:"smsMessage", max: 140)
            try validate(smsMessage, name:"smsMessage", min: 6)
            try validate(smsMessage, name:"smsMessage", pattern: ".*\\{####\\}.*")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultEmailOption = "DefaultEmailOption"
            case emailMessage = "EmailMessage"
            case emailMessageByLink = "EmailMessageByLink"
            case emailSubject = "EmailSubject"
            case emailSubjectByLink = "EmailSubjectByLink"
            case smsMessage = "SmsMessage"
        }
    }

    public enum VerifiedAttributeType: String, CustomStringConvertible, Codable {
        case phoneNumber = "phone_number"
        case email = "email"
        public var description: String { return self.rawValue }
    }

    public struct VerifySoftwareTokenRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: false, type: .string), 
            AWSShapeMember(label: "FriendlyDeviceName", required: false, type: .string), 
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "UserCode", required: true, type: .string)
        ]

        /// The access token.
        public let accessToken: String?
        /// The friendly device name.
        public let friendlyDeviceName: String?
        /// The session which should be passed both ways in challenge-response calls to the service.
        public let session: String?
        /// The one time password computed using the secret code returned by 
        public let userCode: String

        public init(accessToken: String? = nil, friendlyDeviceName: String? = nil, session: String? = nil, userCode: String) {
            self.accessToken = accessToken
            self.friendlyDeviceName = friendlyDeviceName
            self.session = session
            self.userCode = userCode
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(session, name:"session", max: 2048)
            try validate(session, name:"session", min: 20)
            try validate(userCode, name:"userCode", max: 6)
            try validate(userCode, name:"userCode", min: 6)
            try validate(userCode, name:"userCode", pattern: "[0-9]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case friendlyDeviceName = "FriendlyDeviceName"
            case session = "Session"
            case userCode = "UserCode"
        }
    }

    public struct VerifySoftwareTokenResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]

        /// The session which should be passed both ways in challenge-response calls to the service.
        public let session: String?
        /// The status of the verify software token.
        public let status: VerifySoftwareTokenResponseType?

        public init(session: String? = nil, status: VerifySoftwareTokenResponseType? = nil) {
            self.session = session
            self.status = status
        }

        public func validate() throws {
            try validate(session, name:"session", max: 2048)
            try validate(session, name:"session", min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case session = "Session"
            case status = "Status"
        }
    }

    public enum VerifySoftwareTokenResponseType: String, CustomStringConvertible, Codable {
        case success = "SUCCESS"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct VerifyUserAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string), 
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "Code", required: true, type: .string)
        ]

        /// Represents the access token of the request to verify user attributes.
        public let accessToken: String
        /// The attribute name in the request to verify user attributes.
        public let attributeName: String
        /// The verification code in the request to verify user attributes.
        public let code: String

        public init(accessToken: String, attributeName: String, code: String) {
            self.accessToken = accessToken
            self.attributeName = attributeName
            self.code = code
        }

        public func validate() throws {
            try validate(accessToken, name:"accessToken", pattern: "[A-Za-z0-9-_=.]+")
            try validate(attributeName, name:"attributeName", max: 32)
            try validate(attributeName, name:"attributeName", min: 1)
            try validate(attributeName, name:"attributeName", pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try validate(code, name:"code", max: 2048)
            try validate(code, name:"code", min: 1)
            try validate(code, name:"code", pattern: "[\\S]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case attributeName = "AttributeName"
            case code = "Code"
        }
    }

    public struct VerifyUserAttributeResponse: AWSShape {


        public init() {
        }

    }
}
