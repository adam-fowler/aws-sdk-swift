// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension StorageGateway {

    public struct ActivateGatewayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivationKey", required: true, type: .string), 
            AWSShapeMember(label: "GatewayName", required: true, type: .string), 
            AWSShapeMember(label: "GatewayRegion", required: true, type: .string), 
            AWSShapeMember(label: "GatewayTimezone", required: true, type: .string), 
            AWSShapeMember(label: "GatewayType", required: false, type: .string), 
            AWSShapeMember(label: "MediumChangerType", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TapeDriveType", required: false, type: .string)
        ]

        /// Your gateway activation key. You can obtain the activation key by sending an HTTP GET request with redirects enabled to the gateway IP address (port 80). The redirect URL returned in the response provides you the activation key for your gateway in the query string parameter activationKey. It may also include other activation-related parameters, however, these are merely defaults -- the arguments you pass to the ActivateGateway API call determine the actual configuration of your gateway.  For more information, see https://docs.aws.amazon.com/storagegateway/latest/userguide/get-activation-key.html in the Storage Gateway User Guide.
        public let activationKey: String
        /// The name you configured for your gateway.
        public let gatewayName: String
        /// A value that indicates the region where you want to store your data. The gateway region specified must be the same region as the region in your Host header in the request. For more information about available regions and endpoints for AWS Storage Gateway, see Regions and Endpoints in the Amazon Web Services Glossary.  Valid Values: See AWS Storage Gateway Regions and Endpoints in the AWS General Reference. 
        public let gatewayRegion: String
        /// A value that indicates the time zone you want to set for the gateway. The time zone is of the format "GMT-hr:mm" or "GMT+hr:mm". For example, GMT-4:00 indicates the time is 4 hours behind GMT. GMT+2:00 indicates the time is 2 hours ahead of GMT. The time zone is used, for example, for scheduling snapshots and your gateway's maintenance schedule.
        public let gatewayTimezone: String
        /// A value that defines the type of gateway to activate. The type specified is critical to all later functions of the gateway and cannot be changed after activation. The default value is CACHED.   Valid Values: "STORED", "CACHED", "VTL", "FILE_S3"
        public let gatewayType: String?
        /// The value that indicates the type of medium changer to use for tape gateway. This field is optional.  Valid Values: "STK-L700", "AWS-Gateway-VTL"
        public let mediumChangerType: String?
        /// A list of up to 50 tags that can be assigned to the gateway. Each tag is a key-value pair.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256. 
        public let tags: [Tag]?
        /// The value that indicates the type of tape drive to use for tape gateway. This field is optional.  Valid Values: "IBM-ULT3580-TD5" 
        public let tapeDriveType: String?

        public init(activationKey: String, gatewayName: String, gatewayRegion: String, gatewayTimezone: String, gatewayType: String? = nil, mediumChangerType: String? = nil, tags: [Tag]? = nil, tapeDriveType: String? = nil) {
            self.activationKey = activationKey
            self.gatewayName = gatewayName
            self.gatewayRegion = gatewayRegion
            self.gatewayTimezone = gatewayTimezone
            self.gatewayType = gatewayType
            self.mediumChangerType = mediumChangerType
            self.tags = tags
            self.tapeDriveType = tapeDriveType
        }

        public func validate() throws {
            try validate(activationKey, name:"activationKey", max: 50)
            try validate(activationKey, name:"activationKey", min: 1)
            try validate(gatewayName, name:"gatewayName", max: 255)
            try validate(gatewayName, name:"gatewayName", min: 2)
            try validate(gatewayName, name:"gatewayName", pattern: "^[ -\\.0-\\[\\]-~]*[!-\\.0-\\[\\]-~][ -\\.0-\\[\\]-~]*$")
            try validate(gatewayRegion, name:"gatewayRegion", max: 25)
            try validate(gatewayRegion, name:"gatewayRegion", min: 1)
            try validate(gatewayTimezone, name:"gatewayTimezone", max: 10)
            try validate(gatewayTimezone, name:"gatewayTimezone", min: 3)
            try validate(gatewayType, name:"gatewayType", max: 20)
            try validate(gatewayType, name:"gatewayType", min: 2)
            try validate(mediumChangerType, name:"mediumChangerType", max: 50)
            try validate(mediumChangerType, name:"mediumChangerType", min: 2)
            try tags?.forEach {
                try $0.validate()
            }
            try validate(tapeDriveType, name:"tapeDriveType", max: 50)
            try validate(tapeDriveType, name:"tapeDriveType", min: 2)
        }

        private enum CodingKeys: String, CodingKey {
            case activationKey = "ActivationKey"
            case gatewayName = "GatewayName"
            case gatewayRegion = "GatewayRegion"
            case gatewayTimezone = "GatewayTimezone"
            case gatewayType = "GatewayType"
            case mediumChangerType = "MediumChangerType"
            case tags = "Tags"
            case tapeDriveType = "TapeDriveType"
        }
    }

    public struct ActivateGatewayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AddCacheInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskIds", required: true, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        /// An array of strings that identify disks that are to be configured as working storage. Each string have a minimum length of 1 and maximum length of 300. You can get the disk IDs from the ListLocalDisks API.
        public let diskIds: [String]
        public let gatewayARN: String

        public init(diskIds: [String], gatewayARN: String) {
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try diskIds.forEach {
                try validate($0, name:"diskIds[]", max: 300)
                try validate($0, name:"diskIds[]", min: 1)
            }
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AddCacheOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AddTagsToResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]

        /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
        public let resourceARN: String
        /// The key-value pair that represents the tag you want to add to the resource. The value can be an empty string.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256. 
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        public func validate() throws {
            try validate(resourceARN, name:"resourceARN", max: 500)
            try validate(resourceARN, name:"resourceARN", min: 50)
            try tags.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct AddTagsToResourceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
        public let resourceARN: String?

        public init(resourceARN: String? = nil) {
            self.resourceARN = resourceARN
        }

        public func validate() throws {
            try validate(resourceARN, name:"resourceARN", max: 500)
            try validate(resourceARN, name:"resourceARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct AddUploadBufferInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskIds", required: true, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        /// An array of strings that identify disks that are to be configured as working storage. Each string have a minimum length of 1 and maximum length of 300. You can get the disk IDs from the ListLocalDisks API.
        public let diskIds: [String]
        public let gatewayARN: String

        public init(diskIds: [String], gatewayARN: String) {
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try diskIds.forEach {
                try validate($0, name:"diskIds[]", max: 300)
                try validate($0, name:"diskIds[]", min: 1)
            }
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AddUploadBufferOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AddWorkingStorageInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskIds", required: true, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        /// An array of strings that identify disks that are to be configured as working storage. Each string have a minimum length of 1 and maximum length of 300. You can get the disk IDs from the ListLocalDisks API.
        public let diskIds: [String]
        public let gatewayARN: String

        public init(diskIds: [String], gatewayARN: String) {
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try diskIds.forEach {
                try validate($0, name:"diskIds[]", max: 300)
                try validate($0, name:"diskIds[]", min: 1)
            }
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AddWorkingStorageOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AssignTapePoolInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PoolId", required: true, type: .string), 
            AWSShapeMember(label: "TapeARN", required: true, type: .string)
        ]

        /// The ID of the pool that you want to add your tape to for archiving. The tape in this pool is archived in the S3 storage class that is associated with the pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (Glacier or Deep Archive) that corresponds to the pool. Valid values: "GLACIER", "DEEP_ARCHIVE"
        public let poolId: String
        /// The unique Amazon Resource Name (ARN) of the virtual tape that you want to add to the tape pool.
        public let tapeARN: String

        public init(poolId: String, tapeARN: String) {
            self.poolId = poolId
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(poolId, name:"poolId", max: 100)
            try validate(poolId, name:"poolId", min: 1)
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case poolId = "PoolId"
            case tapeARN = "TapeARN"
        }
    }

    public struct AssignTapePoolOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]

        /// The unique Amazon Resource Names (ARN) of the virtual tape that was added to the tape pool.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct AttachVolumeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskId", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "TargetName", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]

        /// The unique device ID or other distinguishing data that identifies the local disk used to create the volume. This value is only required when you are attaching a stored volume.
        public let diskId: String?
        /// The Amazon Resource Name (ARN) of the gateway that you want to attach the volume to.
        public let gatewayARN: String
        /// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted. Use DescribeGatewayInformation to get a list of the network interfaces available on a gateway.  Valid Values: A valid IP address.
        public let networkInterfaceId: String
        /// The name of the iSCSI target used by an initiator to connect to a volume and used as a suffix for the target ARN. For example, specifying TargetName as myvolume results in the target ARN of arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes on a gateway. If you don't specify a value, Storage Gateway uses the value that was previously used for this volume as the new target name.
        public let targetName: String?
        /// The Amazon Resource Name (ARN) of the volume to attach to the specified gateway.
        public let volumeARN: String

        public init(diskId: String? = nil, gatewayARN: String, networkInterfaceId: String, targetName: String? = nil, volumeARN: String) {
            self.diskId = diskId
            self.gatewayARN = gatewayARN
            self.networkInterfaceId = networkInterfaceId
            self.targetName = targetName
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(diskId, name:"diskId", max: 300)
            try validate(diskId, name:"diskId", min: 1)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(networkInterfaceId, name:"networkInterfaceId", pattern: "\\A(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}\\z")
            try validate(targetName, name:"targetName", max: 200)
            try validate(targetName, name:"targetName", min: 1)
            try validate(targetName, name:"targetName", pattern: "^[-\\.;a-z0-9]+$")
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case diskId = "DiskId"
            case gatewayARN = "GatewayARN"
            case networkInterfaceId = "NetworkInterfaceId"
            case targetName = "TargetName"
            case volumeARN = "VolumeARN"
        }
    }

    public struct AttachVolumeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the volume target, which includes the iSCSI name for the initiator that was used to connect to the target.
        public let targetARN: String?
        /// The Amazon Resource Name (ARN) of the volume that was attached to the gateway.
        public let volumeARN: String?

        public init(targetARN: String? = nil, volumeARN: String? = nil) {
            self.targetARN = targetARN
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case volumeARN = "VolumeARN"
        }
    }

    public struct CachediSCSIVolume: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "SourceSnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "TargetName", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeAttachmentStatus", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeiSCSIAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "VolumeProgress", required: false, type: .double), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeStatus", required: false, type: .string), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string), 
            AWSShapeMember(label: "VolumeUsedInBytes", required: false, type: .long)
        ]

        /// The date the volume was created. Volumes created prior to March 28, 2017 don’t have this time stamp.
        public let createdDate: TimeStamp?
        public let kMSKey: String?
        /// If the cached volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
        public let sourceSnapshotId: String?
        /// The name of the iSCSI target used by an initiator to connect to a volume and used as a suffix for the target ARN. For example, specifying TargetName as myvolume results in the target ARN of arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes on a gateway. If you don't specify a value, Storage Gateway uses the value that was previously used for this volume as the new target name.
        public let targetName: String?
        /// The Amazon Resource Name (ARN) of the storage volume.
        public let volumeARN: String?
        /// A value that indicates whether a storage volume is attached to or detached from a gateway. For more information, see Moving Your Volumes to a Different Gateway.
        public let volumeAttachmentStatus: String?
        /// The unique identifier of the volume, e.g. vol-AE4B946D.
        public let volumeId: String?
        /// An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.
        public let volumeiSCSIAttributes: VolumeiSCSIAttributes?
        /// Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the cached volume is not restoring or bootstrapping.
        public let volumeProgress: Double?
        /// The size, in bytes, of the volume capacity.
        public let volumeSizeInBytes: Int64?
        /// One of the VolumeStatus values that indicates the state of the storage volume.
        public let volumeStatus: String?
        /// One of the VolumeType enumeration values that describes the type of the volume.
        public let volumeType: String?
        /// The size of the data stored on the volume in bytes. This value is calculated based on the number of blocks that are touched, instead of the actual amount of data written. This value can be useful for sequential write patterns but less accurate for random write patterns. VolumeUsedInBytes is different from the compressed size of the volume, which is the value that is used to calculate your bill.  This value is not available for volumes created prior to May 13, 2015, until you store data on the volume. 
        public let volumeUsedInBytes: Int64?

        public init(createdDate: TimeStamp? = nil, kMSKey: String? = nil, sourceSnapshotId: String? = nil, targetName: String? = nil, volumeARN: String? = nil, volumeAttachmentStatus: String? = nil, volumeId: String? = nil, volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil, volumeProgress: Double? = nil, volumeSizeInBytes: Int64? = nil, volumeStatus: String? = nil, volumeType: String? = nil, volumeUsedInBytes: Int64? = nil) {
            self.createdDate = createdDate
            self.kMSKey = kMSKey
            self.sourceSnapshotId = sourceSnapshotId
            self.targetName = targetName
            self.volumeARN = volumeARN
            self.volumeAttachmentStatus = volumeAttachmentStatus
            self.volumeId = volumeId
            self.volumeiSCSIAttributes = volumeiSCSIAttributes
            self.volumeProgress = volumeProgress
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeStatus = volumeStatus
            self.volumeType = volumeType
            self.volumeUsedInBytes = volumeUsedInBytes
        }

        public func validate() throws {
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(sourceSnapshotId, name:"sourceSnapshotId", pattern: "\\Asnap-([0-9A-Fa-f]{8}|[0-9A-Fa-f]{17})\\z")
            try validate(targetName, name:"targetName", max: 200)
            try validate(targetName, name:"targetName", min: 1)
            try validate(targetName, name:"targetName", pattern: "^[-\\.;a-z0-9]+$")
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
            try validate(volumeAttachmentStatus, name:"volumeAttachmentStatus", max: 50)
            try validate(volumeAttachmentStatus, name:"volumeAttachmentStatus", min: 3)
            try validate(volumeId, name:"volumeId", max: 30)
            try validate(volumeId, name:"volumeId", min: 12)
            try volumeiSCSIAttributes?.validate()
            try validate(volumeStatus, name:"volumeStatus", max: 50)
            try validate(volumeStatus, name:"volumeStatus", min: 3)
            try validate(volumeType, name:"volumeType", max: 100)
            try validate(volumeType, name:"volumeType", min: 3)
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "CreatedDate"
            case kMSKey = "KMSKey"
            case sourceSnapshotId = "SourceSnapshotId"
            case targetName = "TargetName"
            case volumeARN = "VolumeARN"
            case volumeAttachmentStatus = "VolumeAttachmentStatus"
            case volumeId = "VolumeId"
            case volumeiSCSIAttributes = "VolumeiSCSIAttributes"
            case volumeProgress = "VolumeProgress"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case volumeStatus = "VolumeStatus"
            case volumeType = "VolumeType"
            case volumeUsedInBytes = "VolumeUsedInBytes"
        }
    }

    public struct CancelArchivalInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "TapeARN", required: true, type: .string)
        ]

        public let gatewayARN: String
        /// The Amazon Resource Name (ARN) of the virtual tape you want to cancel archiving for.
        public let tapeARN: String

        public init(gatewayARN: String, tapeARN: String) {
            self.gatewayARN = gatewayARN
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case tapeARN = "TapeARN"
        }
    }

    public struct CancelArchivalOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the virtual tape for which archiving was canceled.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct CancelRetrievalInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "TapeARN", required: true, type: .string)
        ]

        public let gatewayARN: String
        /// The Amazon Resource Name (ARN) of the virtual tape you want to cancel retrieval for.
        public let tapeARN: String

        public init(gatewayARN: String, tapeARN: String) {
            self.gatewayARN = gatewayARN
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case tapeARN = "TapeARN"
        }
    }

    public struct CancelRetrievalOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the virtual tape for which retrieval was canceled.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct ChapInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitiatorName", required: false, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateInitiator", required: false, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateTarget", required: false, type: .string), 
            AWSShapeMember(label: "TargetARN", required: false, type: .string)
        ]

        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String?
        /// The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.
        public let secretToAuthenticateInitiator: String?
        /// The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).
        public let secretToAuthenticateTarget: String?
        /// The Amazon Resource Name (ARN) of the volume.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let targetARN: String?

        public init(initiatorName: String? = nil, secretToAuthenticateInitiator: String? = nil, secretToAuthenticateTarget: String? = nil, targetARN: String? = nil) {
            self.initiatorName = initiatorName
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            self.secretToAuthenticateTarget = secretToAuthenticateTarget
            self.targetARN = targetARN
        }

        public func validate() throws {
            try validate(initiatorName, name:"initiatorName", max: 255)
            try validate(initiatorName, name:"initiatorName", min: 1)
            try validate(initiatorName, name:"initiatorName", pattern: "[0-9a-z:.-]+")
            try validate(secretToAuthenticateInitiator, name:"secretToAuthenticateInitiator", max: 100)
            try validate(secretToAuthenticateInitiator, name:"secretToAuthenticateInitiator", min: 1)
            try validate(secretToAuthenticateTarget, name:"secretToAuthenticateTarget", max: 100)
            try validate(secretToAuthenticateTarget, name:"secretToAuthenticateTarget", min: 1)
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case initiatorName = "InitiatorName"
            case secretToAuthenticateInitiator = "SecretToAuthenticateInitiator"
            case secretToAuthenticateTarget = "SecretToAuthenticateTarget"
            case targetARN = "TargetARN"
        }
    }

    public struct CreateCachediSCSIVolumeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "SourceVolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TargetName", required: true, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: true, type: .long)
        ]

        /// A unique identifier that you use to retry a request. If you retry a request, use the same ClientToken you specified in the initial request.
        public let clientToken: String
        public let gatewayARN: String
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted. Use DescribeGatewayInformation to get a list of the network interfaces available on a gateway.  Valid Values: A valid IP address.
        public let networkInterfaceId: String
        /// The snapshot ID (e.g. "snap-1122aabb") of the snapshot to restore as the new cached volume. Specify this field if you want to create the iSCSI storage volume from a snapshot otherwise do not include this field. To list snapshots for your account use DescribeSnapshots in the Amazon Elastic Compute Cloud API Reference.
        public let snapshotId: String?
        /// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The VolumeSizeInBytes value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
        public let sourceVolumeARN: String?
        /// A list of up to 50 tags that can be assigned to a cached volume. Each tag is a key-value pair.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256. 
        public let tags: [Tag]?
        /// The name of the iSCSI target used by an initiator to connect to a volume and used as a suffix for the target ARN. For example, specifying TargetName as myvolume results in the target ARN of arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes on a gateway. If you don't specify a value, Storage Gateway uses the value that was previously used for this volume as the new target name.
        public let targetName: String
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64

        public init(clientToken: String, gatewayARN: String, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, networkInterfaceId: String, snapshotId: String? = nil, sourceVolumeARN: String? = nil, tags: [Tag]? = nil, targetName: String, volumeSizeInBytes: Int64) {
            self.clientToken = clientToken
            self.gatewayARN = gatewayARN
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.networkInterfaceId = networkInterfaceId
            self.snapshotId = snapshotId
            self.sourceVolumeARN = sourceVolumeARN
            self.tags = tags
            self.targetName = targetName
            self.volumeSizeInBytes = volumeSizeInBytes
        }

        public func validate() throws {
            try validate(clientToken, name:"clientToken", max: 100)
            try validate(clientToken, name:"clientToken", min: 5)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(networkInterfaceId, name:"networkInterfaceId", pattern: "\\A(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}\\z")
            try validate(snapshotId, name:"snapshotId", pattern: "\\Asnap-([0-9A-Fa-f]{8}|[0-9A-Fa-f]{17})\\z")
            try validate(sourceVolumeARN, name:"sourceVolumeARN", max: 500)
            try validate(sourceVolumeARN, name:"sourceVolumeARN", min: 50)
            try tags?.forEach {
                try $0.validate()
            }
            try validate(targetName, name:"targetName", max: 200)
            try validate(targetName, name:"targetName", min: 1)
            try validate(targetName, name:"targetName", pattern: "^[-\\.;a-z0-9]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case gatewayARN = "GatewayARN"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case networkInterfaceId = "NetworkInterfaceId"
            case snapshotId = "SnapshotId"
            case sourceVolumeARN = "SourceVolumeARN"
            case tags = "Tags"
            case targetName = "TargetName"
            case volumeSizeInBytes = "VolumeSizeInBytes"
        }
    }

    public struct CreateCachediSCSIVolumeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the volume target, which includes the iSCSI name that initiators can use to connect to the target.
        public let targetARN: String?
        /// The Amazon Resource Name (ARN) of the configured volume.
        public let volumeARN: String?

        public init(targetARN: String? = nil, volumeARN: String? = nil) {
            self.targetARN = targetARN
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case volumeARN = "VolumeARN"
        }
    }

    public struct CreateNFSFileShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientList", required: false, type: .list), 
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "LocationARN", required: true, type: .string), 
            AWSShapeMember(label: "NFSFileShareDefaults", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "Role", required: true, type: .string), 
            AWSShapeMember(label: "Squash", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]

        /// The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks. 
        public let clientList: [String]?
        /// A unique string value that you supply that is used by file gateway to ensure idempotent file share creation.
        public let clientToken: String
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// The Amazon Resource Name (ARN) of the file gateway on which you want to create a file share.
        public let gatewayARN: String
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The Amazon Resource Name (ARN) AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// The ARN of the backed storage used for storing file data. 
        public let locationARN: String
        /// File share default values. Optional.
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        /// A value that sets the access control list permission for objects in the S3 bucket that a file gateway puts objects into. The default value is "private".
        public let objectACL: ObjectACL?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?
        /// A value that sets who pays the cost of the request and the cost associated with data download from the S3 bucket. If this value is set to true, the requester pays the costs. Otherwise the S3 bucket owner pays. However, the S3 bucket owner always pays the cost of storing data.   RequesterPays is a configuration for the S3 bucket that backs the file share, so make sure that the configuration on the file share is the same as the S3 bucket configuration. 
        public let requesterPays: Bool?
        /// The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage. 
        public let role: String
        /// A value that maps a user to anonymous user. Valid options are the following:     RootSquash - Only root is mapped to anonymous user.    NoSquash - No one is mapped to anonymous user    AllSquash - Everyone is mapped to anonymous user.  
        public let squash: String?
        /// A list of up to 50 tags that can be assigned to the NFS file share. Each tag is a key-value pair.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256. 
        public let tags: [Tag]?

        public init(clientList: [String]? = nil, clientToken: String, defaultStorageClass: String? = nil, gatewayARN: String, guessMIMETypeEnabled: Bool? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, locationARN: String, nFSFileShareDefaults: NFSFileShareDefaults? = nil, objectACL: ObjectACL? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, role: String, squash: String? = nil, tags: [Tag]? = nil) {
            self.clientList = clientList
            self.clientToken = clientToken
            self.defaultStorageClass = defaultStorageClass
            self.gatewayARN = gatewayARN
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.locationARN = locationARN
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.objectACL = objectACL
            self.readOnly = readOnly
            self.requesterPays = requesterPays
            self.role = role
            self.squash = squash
            self.tags = tags
        }

        public func validate() throws {
            try clientList?.forEach {
                try validate($0, name:"clientList[]", pattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))?$")
            }
            try validate(clientList, name:"clientList", max: 100)
            try validate(clientList, name:"clientList", min: 1)
            try validate(clientToken, name:"clientToken", max: 100)
            try validate(clientToken, name:"clientToken", min: 5)
            try validate(defaultStorageClass, name:"defaultStorageClass", max: 20)
            try validate(defaultStorageClass, name:"defaultStorageClass", min: 5)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(locationARN, name:"locationARN", max: 310)
            try validate(locationARN, name:"locationARN", min: 16)
            try nFSFileShareDefaults?.validate()
            try validate(role, name:"role", max: 2048)
            try validate(role, name:"role", min: 20)
            try validate(squash, name:"squash", max: 15)
            try validate(squash, name:"squash", min: 5)
            try tags?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clientList = "ClientList"
            case clientToken = "ClientToken"
            case defaultStorageClass = "DefaultStorageClass"
            case gatewayARN = "GatewayARN"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case locationARN = "LocationARN"
            case nFSFileShareDefaults = "NFSFileShareDefaults"
            case objectACL = "ObjectACL"
            case readOnly = "ReadOnly"
            case requesterPays = "RequesterPays"
            case role = "Role"
            case squash = "Squash"
            case tags = "Tags"
        }
    }

    public struct CreateNFSFileShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the newly created file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct CreateSMBFileShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdminUserList", required: false, type: .list), 
            AWSShapeMember(label: "Authentication", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "InvalidUserList", required: false, type: .list), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "LocationARN", required: true, type: .string), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "Role", required: true, type: .string), 
            AWSShapeMember(label: "SMBACLEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ValidUserList", required: false, type: .list)
        ]

        /// A list of users or groups in the Active Directory that have administrator rights to the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let adminUserList: [String]?
        /// The authentication method that users use to access the file share. Valid values are ActiveDirectory or GuestAccess. The default is ActiveDirectory.
        public let authentication: String?
        /// A unique string value that you supply that is used by file gateway to ensure idempotent file share creation.
        public let clientToken: String
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// The Amazon Resource Name (ARN) of the file gateway on which you want to create a file share.
        public let gatewayARN: String
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// A list of users or groups in the Active Directory that are not allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let invalidUserList: [String]?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// The ARN of the backed storage used for storing file data. 
        public let locationARN: String
        /// A value that sets the access control list permission for objects in the S3 bucket that a file gateway puts objects into. The default value is "private".
        public let objectACL: ObjectACL?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?
        /// A value that sets who pays the cost of the request and the cost associated with data download from the S3 bucket. If this value is set to true, the requester pays the costs. Otherwise the S3 bucket owner pays. However, the S3 bucket owner always pays the cost of storing data.   RequesterPays is a configuration for the S3 bucket that backs the file share, so make sure that the configuration on the file share is the same as the S3 bucket configuration. 
        public let requesterPays: Bool?
        /// The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage. 
        public let role: String
        /// Set this value to "true to enable ACL (access control list) on the SMB file share. Set it to "false" to map file and directory permissions to the POSIX permissions. For more information, see https://docs.aws.amazon.com/storagegateway/latest/userguide/smb-acl.html in the Storage Gateway User Guide.
        public let sMBACLEnabled: Bool?
        /// A list of up to 50 tags that can be assigned to the NFS file share. Each tag is a key-value pair.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256. 
        public let tags: [Tag]?
        /// A list of users or groups in the Active Directory that are allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let validUserList: [String]?

        public init(adminUserList: [String]? = nil, authentication: String? = nil, clientToken: String, defaultStorageClass: String? = nil, gatewayARN: String, guessMIMETypeEnabled: Bool? = nil, invalidUserList: [String]? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, locationARN: String, objectACL: ObjectACL? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, role: String, sMBACLEnabled: Bool? = nil, tags: [Tag]? = nil, validUserList: [String]? = nil) {
            self.adminUserList = adminUserList
            self.authentication = authentication
            self.clientToken = clientToken
            self.defaultStorageClass = defaultStorageClass
            self.gatewayARN = gatewayARN
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.invalidUserList = invalidUserList
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.locationARN = locationARN
            self.objectACL = objectACL
            self.readOnly = readOnly
            self.requesterPays = requesterPays
            self.role = role
            self.sMBACLEnabled = sMBACLEnabled
            self.tags = tags
            self.validUserList = validUserList
        }

        public func validate() throws {
            try adminUserList?.forEach {
                try validate($0, name:"adminUserList[]", max: 64)
                try validate($0, name:"adminUserList[]", min: 1)
            }
            try validate(adminUserList, name:"adminUserList", max: 100)
            try validate(adminUserList, name:"adminUserList", min: 0)
            try validate(authentication, name:"authentication", max: 15)
            try validate(authentication, name:"authentication", min: 5)
            try validate(clientToken, name:"clientToken", max: 100)
            try validate(clientToken, name:"clientToken", min: 5)
            try validate(defaultStorageClass, name:"defaultStorageClass", max: 20)
            try validate(defaultStorageClass, name:"defaultStorageClass", min: 5)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try invalidUserList?.forEach {
                try validate($0, name:"invalidUserList[]", max: 64)
                try validate($0, name:"invalidUserList[]", min: 1)
            }
            try validate(invalidUserList, name:"invalidUserList", max: 100)
            try validate(invalidUserList, name:"invalidUserList", min: 0)
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(locationARN, name:"locationARN", max: 310)
            try validate(locationARN, name:"locationARN", min: 16)
            try validate(role, name:"role", max: 2048)
            try validate(role, name:"role", min: 20)
            try tags?.forEach {
                try $0.validate()
            }
            try validUserList?.forEach {
                try validate($0, name:"validUserList[]", max: 64)
                try validate($0, name:"validUserList[]", min: 1)
            }
            try validate(validUserList, name:"validUserList", max: 100)
            try validate(validUserList, name:"validUserList", min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case adminUserList = "AdminUserList"
            case authentication = "Authentication"
            case clientToken = "ClientToken"
            case defaultStorageClass = "DefaultStorageClass"
            case gatewayARN = "GatewayARN"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case invalidUserList = "InvalidUserList"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case locationARN = "LocationARN"
            case objectACL = "ObjectACL"
            case readOnly = "ReadOnly"
            case requesterPays = "RequesterPays"
            case role = "Role"
            case sMBACLEnabled = "SMBACLEnabled"
            case tags = "Tags"
            case validUserList = "ValidUserList"
        }
    }

    public struct CreateSMBFileShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the newly created file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct CreateSnapshotFromVolumeRecoveryPointInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotDescription", required: true, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]

        /// Textual description of the snapshot that appears in the Amazon EC2 console, Elastic Block Store snapshots panel in the Description field, and in the AWS Storage Gateway snapshot Details pane, Description field
        public let snapshotDescription: String
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        public let volumeARN: String

        public init(snapshotDescription: String, volumeARN: String) {
            self.snapshotDescription = snapshotDescription
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(snapshotDescription, name:"snapshotDescription", max: 255)
            try validate(snapshotDescription, name:"snapshotDescription", min: 1)
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotDescription = "SnapshotDescription"
            case volumeARN = "VolumeARN"
        }
    }

    public struct CreateSnapshotFromVolumeRecoveryPointOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeRecoveryPointTime", required: false, type: .string)
        ]

        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        public let volumeARN: String?
        /// The time the volume was created from the recovery point.
        public let volumeRecoveryPointTime: String?

        public init(snapshotId: String? = nil, volumeARN: String? = nil, volumeRecoveryPointTime: String? = nil) {
            self.snapshotId = snapshotId
            self.volumeARN = volumeARN
            self.volumeRecoveryPointTime = volumeRecoveryPointTime
        }

        public func validate() throws {
            try validate(snapshotId, name:"snapshotId", pattern: "\\Asnap-([0-9A-Fa-f]{8}|[0-9A-Fa-f]{17})\\z")
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case volumeARN = "VolumeARN"
            case volumeRecoveryPointTime = "VolumeRecoveryPointTime"
        }
    }

    public struct CreateSnapshotInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotDescription", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]

        /// Textual description of the snapshot that appears in the Amazon EC2 console, Elastic Block Store snapshots panel in the Description field, and in the AWS Storage Gateway snapshot Details pane, Description field
        public let snapshotDescription: String
        /// A list of up to 50 tags that can be assigned to a snapshot. Each tag is a key-value pair.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256. 
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(snapshotDescription: String, tags: [Tag]? = nil, volumeARN: String) {
            self.snapshotDescription = snapshotDescription
            self.tags = tags
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(snapshotDescription, name:"snapshotDescription", max: 255)
            try validate(snapshotDescription, name:"snapshotDescription", min: 1)
            try tags?.forEach {
                try $0.validate()
            }
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotDescription = "SnapshotDescription"
            case tags = "Tags"
            case volumeARN = "VolumeARN"
        }
    }

    public struct CreateSnapshotOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]

        /// The snapshot ID that is used to refer to the snapshot in future operations such as describing snapshots (Amazon Elastic Compute Cloud API DescribeSnapshots) or creating a volume from a snapshot (CreateStorediSCSIVolume).
        public let snapshotId: String?
        /// The Amazon Resource Name (ARN) of the volume of which the snapshot was taken.
        public let volumeARN: String?

        public init(snapshotId: String? = nil, volumeARN: String? = nil) {
            self.snapshotId = snapshotId
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(snapshotId, name:"snapshotId", pattern: "\\Asnap-([0-9A-Fa-f]{8}|[0-9A-Fa-f]{17})\\z")
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case volumeARN = "VolumeARN"
        }
    }

    public struct CreateStorediSCSIVolumeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskId", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "PreserveExistingData", required: true, type: .boolean), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TargetName", required: true, type: .string)
        ]

        /// The unique identifier for the gateway local disk that is configured as a stored volume. Use ListLocalDisks to list disk IDs for a gateway.
        public let diskId: String
        public let gatewayARN: String
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The Amazon Resource Name (ARN) of the KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted. Use DescribeGatewayInformation to get a list of the network interfaces available on a gateway.  Valid Values: A valid IP address.
        public let networkInterfaceId: String
        /// Specify this field as true if you want to preserve the data on the local disk. Otherwise, specifying this field as false creates an empty volume.  Valid Values: true, false
        public let preserveExistingData: Bool
        /// The snapshot ID (e.g. "snap-1122aabb") of the snapshot to restore as the new stored volume. Specify this field if you want to create the iSCSI storage volume from a snapshot otherwise do not include this field. To list snapshots for your account use DescribeSnapshots in the Amazon Elastic Compute Cloud API Reference.
        public let snapshotId: String?
        /// A list of up to 50 tags that can be assigned to a stored volume. Each tag is a key-value pair.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256. 
        public let tags: [Tag]?
        /// The name of the iSCSI target used by an initiator to connect to a volume and used as a suffix for the target ARN. For example, specifying TargetName as myvolume results in the target ARN of arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes on a gateway. If you don't specify a value, Storage Gateway uses the value that was previously used for this volume as the new target name.
        public let targetName: String

        public init(diskId: String, gatewayARN: String, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, networkInterfaceId: String, preserveExistingData: Bool, snapshotId: String? = nil, tags: [Tag]? = nil, targetName: String) {
            self.diskId = diskId
            self.gatewayARN = gatewayARN
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.networkInterfaceId = networkInterfaceId
            self.preserveExistingData = preserveExistingData
            self.snapshotId = snapshotId
            self.tags = tags
            self.targetName = targetName
        }

        public func validate() throws {
            try validate(diskId, name:"diskId", max: 300)
            try validate(diskId, name:"diskId", min: 1)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(networkInterfaceId, name:"networkInterfaceId", pattern: "\\A(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}\\z")
            try validate(snapshotId, name:"snapshotId", pattern: "\\Asnap-([0-9A-Fa-f]{8}|[0-9A-Fa-f]{17})\\z")
            try tags?.forEach {
                try $0.validate()
            }
            try validate(targetName, name:"targetName", max: 200)
            try validate(targetName, name:"targetName", min: 1)
            try validate(targetName, name:"targetName", pattern: "^[-\\.;a-z0-9]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case diskId = "DiskId"
            case gatewayARN = "GatewayARN"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case networkInterfaceId = "NetworkInterfaceId"
            case preserveExistingData = "PreserveExistingData"
            case snapshotId = "SnapshotId"
            case tags = "Tags"
            case targetName = "TargetName"
        }
    }

    public struct CreateStorediSCSIVolumeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long)
        ]

        /// The Amazon Resource Name (ARN) of the volume target, which includes the iSCSI name that initiators can use to connect to the target.
        public let targetARN: String?
        /// The Amazon Resource Name (ARN) of the configured volume.
        public let volumeARN: String?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?

        public init(targetARN: String? = nil, volumeARN: String? = nil, volumeSizeInBytes: Int64? = nil) {
            self.targetARN = targetARN
            self.volumeARN = volumeARN
            self.volumeSizeInBytes = volumeSizeInBytes
        }

        public func validate() throws {
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case volumeARN = "VolumeARN"
            case volumeSizeInBytes = "VolumeSizeInBytes"
        }
    }

    public struct CreateTapeWithBarcodeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "PoolId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TapeBarcode", required: true, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: true, type: .long)
        ]

        /// The unique Amazon Resource Name (ARN) that represents the gateway to associate the virtual tape with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The Amazon Resource Name (ARN) of the AWS KMS Key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// The ID of the pool that you want to add your tape to for archiving. The tape in this pool is archived in the S3 storage class that is associated with the pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (Glacier or Deep Archive) that corresponds to the pool. Valid values: "GLACIER", "DEEP_ARCHIVE"
        public let poolId: String?
        /// A list of up to 50 tags that can be assigned to a virtual tape that has a barcode. Each tag is a key-value pair.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256. 
        public let tags: [Tag]?
        /// The barcode that you want to assign to the tape.  Barcodes cannot be reused. This includes barcodes used for tapes that have been deleted. 
        public let tapeBarcode: String
        /// The size, in bytes, of the virtual tape that you want to create.  The size must be aligned by gigabyte (1024*1024*1024 byte). 
        public let tapeSizeInBytes: Int64

        public init(gatewayARN: String, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, poolId: String? = nil, tags: [Tag]? = nil, tapeBarcode: String, tapeSizeInBytes: Int64) {
            self.gatewayARN = gatewayARN
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.poolId = poolId
            self.tags = tags
            self.tapeBarcode = tapeBarcode
            self.tapeSizeInBytes = tapeSizeInBytes
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(poolId, name:"poolId", max: 100)
            try validate(poolId, name:"poolId", min: 1)
            try tags?.forEach {
                try $0.validate()
            }
            try validate(tapeBarcode, name:"tapeBarcode", max: 16)
            try validate(tapeBarcode, name:"tapeBarcode", min: 7)
            try validate(tapeBarcode, name:"tapeBarcode", pattern: "^[A-Z0-9]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case poolId = "PoolId"
            case tags = "Tags"
            case tapeBarcode = "TapeBarcode"
            case tapeSizeInBytes = "TapeSizeInBytes"
        }
    }

    public struct CreateTapeWithBarcodeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]

        /// A unique Amazon Resource Name (ARN) that represents the virtual tape that was created.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct CreateTapesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "NumTapesToCreate", required: true, type: .integer), 
            AWSShapeMember(label: "PoolId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TapeBarcodePrefix", required: true, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: true, type: .long)
        ]

        /// A unique identifier that you use to retry a request. If you retry a request, use the same ClientToken you specified in the initial request.  Using the same ClientToken prevents creating the tape multiple times. 
        public let clientToken: String
        /// The unique Amazon Resource Name (ARN) that represents the gateway to associate the virtual tapes with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// The number of virtual tapes that you want to create.
        public let numTapesToCreate: Int32
        /// The ID of the pool that you want to add your tape to for archiving. The tape in this pool is archived in the S3 storage class that is associated with the pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (Glacier or Deep Archive) that corresponds to the pool. Valid values: "GLACIER", "DEEP_ARCHIVE"
        public let poolId: String?
        /// A list of up to 50 tags that can be assigned to a virtual tape. Each tag is a key-value pair.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256. 
        public let tags: [Tag]?
        /// A prefix that you append to the barcode of the virtual tape you are creating. This prefix makes the barcode unique.  The prefix must be 1 to 4 characters in length and must be one of the uppercase letters from A to Z. 
        public let tapeBarcodePrefix: String
        /// The size, in bytes, of the virtual tapes that you want to create.  The size must be aligned by gigabyte (1024*1024*1024 byte). 
        public let tapeSizeInBytes: Int64

        public init(clientToken: String, gatewayARN: String, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, numTapesToCreate: Int32, poolId: String? = nil, tags: [Tag]? = nil, tapeBarcodePrefix: String, tapeSizeInBytes: Int64) {
            self.clientToken = clientToken
            self.gatewayARN = gatewayARN
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.numTapesToCreate = numTapesToCreate
            self.poolId = poolId
            self.tags = tags
            self.tapeBarcodePrefix = tapeBarcodePrefix
            self.tapeSizeInBytes = tapeSizeInBytes
        }

        public func validate() throws {
            try validate(clientToken, name:"clientToken", max: 100)
            try validate(clientToken, name:"clientToken", min: 5)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(numTapesToCreate, name:"numTapesToCreate", max: 10)
            try validate(numTapesToCreate, name:"numTapesToCreate", min: 1)
            try validate(poolId, name:"poolId", max: 100)
            try validate(poolId, name:"poolId", min: 1)
            try tags?.forEach {
                try $0.validate()
            }
            try validate(tapeBarcodePrefix, name:"tapeBarcodePrefix", max: 4)
            try validate(tapeBarcodePrefix, name:"tapeBarcodePrefix", min: 1)
            try validate(tapeBarcodePrefix, name:"tapeBarcodePrefix", pattern: "^[A-Z]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case gatewayARN = "GatewayARN"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case numTapesToCreate = "NumTapesToCreate"
            case poolId = "PoolId"
            case tags = "Tags"
            case tapeBarcodePrefix = "TapeBarcodePrefix"
            case tapeSizeInBytes = "TapeSizeInBytes"
        }
    }

    public struct CreateTapesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARNs", required: false, type: .list)
        ]

        /// A list of unique Amazon Resource Names (ARNs) that represents the virtual tapes that were created.
        public let tapeARNs: [String]?

        public init(tapeARNs: [String]? = nil) {
            self.tapeARNs = tapeARNs
        }

        public func validate() throws {
            try tapeARNs?.forEach {
                try validate($0, name:"tapeARNs[]", max: 500)
                try validate($0, name:"tapeARNs[]", min: 50)
                try validate($0, name:"tapeARNs[]", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARNs = "TapeARNs"
        }
    }

    public struct DeleteBandwidthRateLimitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BandwidthType", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        /// One of the BandwidthType values that indicates the gateway bandwidth rate limit to delete. Valid Values: Upload, Download, All.
        public let bandwidthType: String
        public let gatewayARN: String

        public init(bandwidthType: String, gatewayARN: String) {
            self.bandwidthType = bandwidthType
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(bandwidthType, name:"bandwidthType", max: 25)
            try validate(bandwidthType, name:"bandwidthType", min: 3)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case bandwidthType = "BandwidthType"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteBandwidthRateLimitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteChapCredentialsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitiatorName", required: true, type: .string), 
            AWSShapeMember(label: "TargetARN", required: true, type: .string)
        ]

        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        public let targetARN: String

        public init(initiatorName: String, targetARN: String) {
            self.initiatorName = initiatorName
            self.targetARN = targetARN
        }

        public func validate() throws {
            try validate(initiatorName, name:"initiatorName", max: 255)
            try validate(initiatorName, name:"initiatorName", min: 1)
            try validate(initiatorName, name:"initiatorName", pattern: "[0-9a-z:.-]+")
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case initiatorName = "InitiatorName"
            case targetARN = "TargetARN"
        }
    }

    public struct DeleteChapCredentialsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitiatorName", required: false, type: .string), 
            AWSShapeMember(label: "TargetARN", required: false, type: .string)
        ]

        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String?
        /// The Amazon Resource Name (ARN) of the target.
        public let targetARN: String?

        public init(initiatorName: String? = nil, targetARN: String? = nil) {
            self.initiatorName = initiatorName
            self.targetARN = targetARN
        }

        public func validate() throws {
            try validate(initiatorName, name:"initiatorName", max: 255)
            try validate(initiatorName, name:"initiatorName", min: 1)
            try validate(initiatorName, name:"initiatorName", pattern: "[0-9a-z:.-]+")
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case initiatorName = "InitiatorName"
            case targetARN = "TargetARN"
        }
    }

    public struct DeleteFileShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: true, type: .string), 
            AWSShapeMember(label: "ForceDelete", required: false, type: .boolean)
        ]

        /// The Amazon Resource Name (ARN) of the file share to be deleted. 
        public let fileShareARN: String
        /// If this value is set to true, the operation deletes a file share immediately and aborts all data uploads to AWS. Otherwise, the file share is not deleted until all data is uploaded to AWS. This process aborts the data upload process, and the file share enters the FORCE_DELETING status.
        public let forceDelete: Bool?

        public init(fileShareARN: String, forceDelete: Bool? = nil) {
            self.fileShareARN = fileShareARN
            self.forceDelete = forceDelete
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
            case forceDelete = "ForceDelete"
        }
    }

    public struct DeleteFileShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the deleted file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct DeleteGatewayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteGatewayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteSnapshotScheduleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]

        /// The volume which snapshot schedule to delete.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DeleteSnapshotScheduleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]

        /// The volume which snapshot schedule was deleted.
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DeleteTapeArchiveInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the virtual tape to delete from the virtual tape shelf (VTS).
        public let tapeARN: String

        public init(tapeARN: String) {
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct DeleteTapeArchiveOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the virtual tape that was deleted from the virtual tape shelf (VTS).
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct DeleteTapeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "TapeARN", required: true, type: .string)
        ]

        /// The unique Amazon Resource Name (ARN) of the gateway that the virtual tape to delete is associated with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String
        /// The Amazon Resource Name (ARN) of the virtual tape to delete.
        public let tapeARN: String

        public init(gatewayARN: String, tapeARN: String) {
            self.gatewayARN = gatewayARN
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case tapeARN = "TapeARN"
        }
    }

    public struct DeleteTapeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the deleted virtual tape.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct DeleteVolumeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DeleteVolumeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the storage volume that was deleted. It is the same ARN you provided in the request.
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DescribeBandwidthRateLimitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeBandwidthRateLimitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AverageDownloadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "AverageUploadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        /// The average download bandwidth rate limit in bits per second. This field does not appear in the response if the download rate limit is not set.
        public let averageDownloadRateLimitInBitsPerSec: Int64?
        /// The average upload bandwidth rate limit in bits per second. This field does not appear in the response if the upload rate limit is not set.
        public let averageUploadRateLimitInBitsPerSec: Int64?
        public let gatewayARN: String?

        public init(averageDownloadRateLimitInBitsPerSec: Int64? = nil, averageUploadRateLimitInBitsPerSec: Int64? = nil, gatewayARN: String? = nil) {
            self.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec
            self.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(averageDownloadRateLimitInBitsPerSec, name:"averageDownloadRateLimitInBitsPerSec", min: 102400)
            try validate(averageUploadRateLimitInBitsPerSec, name:"averageUploadRateLimitInBitsPerSec", min: 51200)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case averageDownloadRateLimitInBitsPerSec = "AverageDownloadRateLimitInBitsPerSec"
            case averageUploadRateLimitInBitsPerSec = "AverageUploadRateLimitInBitsPerSec"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeCacheInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeCacheOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheAllocatedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "CacheDirtyPercentage", required: false, type: .double), 
            AWSShapeMember(label: "CacheHitPercentage", required: false, type: .double), 
            AWSShapeMember(label: "CacheMissPercentage", required: false, type: .double), 
            AWSShapeMember(label: "CacheUsedPercentage", required: false, type: .double), 
            AWSShapeMember(label: "DiskIds", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        /// The amount of cache in bytes allocated to the a gateway.
        public let cacheAllocatedInBytes: Int64?
        /// The file share's contribution to the overall percentage of the gateway's cache that has not been persisted to AWS. The sample is taken at the end of the reporting period.
        public let cacheDirtyPercentage: Double?
        /// Percent of application read operations from the file shares that are served from cache. The sample is taken at the end of the reporting period.
        public let cacheHitPercentage: Double?
        /// Percent of application read operations from the file shares that are not served from cache. The sample is taken at the end of the reporting period.
        public let cacheMissPercentage: Double?
        /// Percent use of the gateway's cache storage. This metric applies only to the gateway-cached volume setup. The sample is taken at the end of the reporting period.
        public let cacheUsedPercentage: Double?
        /// An array of strings that identify disks that are to be configured as working storage. Each string have a minimum length of 1 and maximum length of 300. You can get the disk IDs from the ListLocalDisks API.
        public let diskIds: [String]?
        public let gatewayARN: String?

        public init(cacheAllocatedInBytes: Int64? = nil, cacheDirtyPercentage: Double? = nil, cacheHitPercentage: Double? = nil, cacheMissPercentage: Double? = nil, cacheUsedPercentage: Double? = nil, diskIds: [String]? = nil, gatewayARN: String? = nil) {
            self.cacheAllocatedInBytes = cacheAllocatedInBytes
            self.cacheDirtyPercentage = cacheDirtyPercentage
            self.cacheHitPercentage = cacheHitPercentage
            self.cacheMissPercentage = cacheMissPercentage
            self.cacheUsedPercentage = cacheUsedPercentage
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try diskIds?.forEach {
                try validate($0, name:"diskIds[]", max: 300)
                try validate($0, name:"diskIds[]", min: 1)
            }
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case cacheAllocatedInBytes = "CacheAllocatedInBytes"
            case cacheDirtyPercentage = "CacheDirtyPercentage"
            case cacheHitPercentage = "CacheHitPercentage"
            case cacheMissPercentage = "CacheMissPercentage"
            case cacheUsedPercentage = "CacheUsedPercentage"
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeCachediSCSIVolumesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARNs", required: true, type: .list)
        ]

        /// An array of strings where each string represents the Amazon Resource Name (ARN) of a cached volume. All of the specified cached volumes must from the same gateway. Use ListVolumes to get volume ARNs for a gateway.
        public let volumeARNs: [String]

        public init(volumeARNs: [String]) {
            self.volumeARNs = volumeARNs
        }

        public func validate() throws {
            try volumeARNs.forEach {
                try validate($0, name:"volumeARNs[]", max: 500)
                try validate($0, name:"volumeARNs[]", min: 50)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARNs = "VolumeARNs"
        }
    }

    public struct DescribeCachediSCSIVolumesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CachediSCSIVolumes", required: false, type: .list)
        ]

        /// An array of objects where each object contains metadata about one cached volume.
        public let cachediSCSIVolumes: [CachediSCSIVolume]?

        public init(cachediSCSIVolumes: [CachediSCSIVolume]? = nil) {
            self.cachediSCSIVolumes = cachediSCSIVolumes
        }

        public func validate() throws {
            try cachediSCSIVolumes?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case cachediSCSIVolumes = "CachediSCSIVolumes"
        }
    }

    public struct DescribeChapCredentialsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        public let targetARN: String

        public init(targetARN: String) {
            self.targetARN = targetARN
        }

        public func validate() throws {
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
        }
    }

    public struct DescribeChapCredentialsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChapCredentials", required: false, type: .list)
        ]

        /// An array of ChapInfo objects that represent CHAP credentials. Each object in the array contains CHAP credential information for one target-initiator pair. If no CHAP credentials are set, an empty array is returned. CHAP credential information is provided in a JSON object with the following fields:    InitiatorName: The iSCSI initiator that connects to the target.    SecretToAuthenticateInitiator: The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.    SecretToAuthenticateTarget: The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).    TargetARN: The Amazon Resource Name (ARN) of the storage volume.  
        public let chapCredentials: [ChapInfo]?

        public init(chapCredentials: [ChapInfo]? = nil) {
            self.chapCredentials = chapCredentials
        }

        public func validate() throws {
            try chapCredentials?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case chapCredentials = "ChapCredentials"
        }
    }

    public struct DescribeGatewayInformationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeGatewayInformationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ec2InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Ec2InstanceRegion", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", required: false, type: .string), 
            AWSShapeMember(label: "GatewayName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayNetworkInterfaces", required: false, type: .list), 
            AWSShapeMember(label: "GatewayState", required: false, type: .string), 
            AWSShapeMember(label: "GatewayTimezone", required: false, type: .string), 
            AWSShapeMember(label: "GatewayType", required: false, type: .string), 
            AWSShapeMember(label: "LastSoftwareUpdate", required: false, type: .string), 
            AWSShapeMember(label: "NextUpdateAvailabilityDate", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "VPCEndpoint", required: false, type: .string)
        ]

        /// The ID of the Amazon EC2 instance that was used to launch the gateway.
        public let ec2InstanceId: String?
        /// The AWS Region where the Amazon EC2 instance is located.
        public let ec2InstanceRegion: String?
        public let gatewayARN: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.
        public let gatewayId: String?
        /// The name you configured for your gateway.
        public let gatewayName: String?
        /// A NetworkInterface array that contains descriptions of the gateway network interfaces.
        public let gatewayNetworkInterfaces: [NetworkInterface]?
        /// A value that indicates the operating state of the gateway.
        public let gatewayState: String?
        /// A value that indicates the time zone configured for the gateway.
        public let gatewayTimezone: String?
        /// The type of the gateway.
        public let gatewayType: String?
        /// The date on which the last software update was applied to the gateway. If the gateway has never been updated, this field does not return a value in the response.
        public let lastSoftwareUpdate: String?
        /// The date on which an update to the gateway is available. This date is in the time zone of the gateway. If the gateway is not available for an update this field is not returned in the response.
        public let nextUpdateAvailabilityDate: String?
        /// A list of up to 50 tags assigned to the gateway, sorted alphabetically by key name. Each tag is a key-value pair. For a gateway with more than 10 tags assigned, you can view all tags using the ListTagsForResource API operation.
        public let tags: [Tag]?
        /// The configuration settings for the virtual private cloud (VPC) endpoint for your gateway. 
        public let vPCEndpoint: String?

        public init(ec2InstanceId: String? = nil, ec2InstanceRegion: String? = nil, gatewayARN: String? = nil, gatewayId: String? = nil, gatewayName: String? = nil, gatewayNetworkInterfaces: [NetworkInterface]? = nil, gatewayState: String? = nil, gatewayTimezone: String? = nil, gatewayType: String? = nil, lastSoftwareUpdate: String? = nil, nextUpdateAvailabilityDate: String? = nil, tags: [Tag]? = nil, vPCEndpoint: String? = nil) {
            self.ec2InstanceId = ec2InstanceId
            self.ec2InstanceRegion = ec2InstanceRegion
            self.gatewayARN = gatewayARN
            self.gatewayId = gatewayId
            self.gatewayName = gatewayName
            self.gatewayNetworkInterfaces = gatewayNetworkInterfaces
            self.gatewayState = gatewayState
            self.gatewayTimezone = gatewayTimezone
            self.gatewayType = gatewayType
            self.lastSoftwareUpdate = lastSoftwareUpdate
            self.nextUpdateAvailabilityDate = nextUpdateAvailabilityDate
            self.tags = tags
            self.vPCEndpoint = vPCEndpoint
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(gatewayId, name:"gatewayId", max: 30)
            try validate(gatewayId, name:"gatewayId", min: 12)
            try validate(gatewayState, name:"gatewayState", max: 25)
            try validate(gatewayState, name:"gatewayState", min: 2)
            try validate(gatewayTimezone, name:"gatewayTimezone", max: 10)
            try validate(gatewayTimezone, name:"gatewayTimezone", min: 3)
            try validate(gatewayType, name:"gatewayType", max: 20)
            try validate(gatewayType, name:"gatewayType", min: 2)
            try validate(lastSoftwareUpdate, name:"lastSoftwareUpdate", max: 25)
            try validate(lastSoftwareUpdate, name:"lastSoftwareUpdate", min: 1)
            try validate(nextUpdateAvailabilityDate, name:"nextUpdateAvailabilityDate", max: 25)
            try validate(nextUpdateAvailabilityDate, name:"nextUpdateAvailabilityDate", min: 1)
            try tags?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case ec2InstanceId = "Ec2InstanceId"
            case ec2InstanceRegion = "Ec2InstanceRegion"
            case gatewayARN = "GatewayARN"
            case gatewayId = "GatewayId"
            case gatewayName = "GatewayName"
            case gatewayNetworkInterfaces = "GatewayNetworkInterfaces"
            case gatewayState = "GatewayState"
            case gatewayTimezone = "GatewayTimezone"
            case gatewayType = "GatewayType"
            case lastSoftwareUpdate = "LastSoftwareUpdate"
            case nextUpdateAvailabilityDate = "NextUpdateAvailabilityDate"
            case tags = "Tags"
            case vPCEndpoint = "VPCEndpoint"
        }
    }

    public struct DescribeMaintenanceStartTimeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeMaintenanceStartTimeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DayOfMonth", required: false, type: .integer), 
            AWSShapeMember(label: "DayOfWeek", required: false, type: .integer), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "HourOfDay", required: false, type: .integer), 
            AWSShapeMember(label: "MinuteOfHour", required: false, type: .integer), 
            AWSShapeMember(label: "Timezone", required: false, type: .string)
        ]

        /// The day of the month component of the maintenance start time represented as an ordinal number from 1 to 28, where 1 represents the first day of the month and 28 represents the last day of the month.  This value is only available for tape and volume gateways. 
        public let dayOfMonth: Int32?
        /// An ordinal number between 0 and 6 that represents the day of the week, where 0 represents Sunday and 6 represents Saturday. The day of week is in the time zone of the gateway.
        public let dayOfWeek: Int32?
        public let gatewayARN: String?
        /// The hour component of the maintenance start time represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        public let hourOfDay: Int32?
        /// The minute component of the maintenance start time represented as mm, where mm is the minute (0 to 59). The minute of the hour is in the time zone of the gateway.
        public let minuteOfHour: Int32?
        /// A value that indicates the time zone that is set for the gateway. The start time and day of week specified should be in the time zone of the gateway.
        public let timezone: String?

        public init(dayOfMonth: Int32? = nil, dayOfWeek: Int32? = nil, gatewayARN: String? = nil, hourOfDay: Int32? = nil, minuteOfHour: Int32? = nil, timezone: String? = nil) {
            self.dayOfMonth = dayOfMonth
            self.dayOfWeek = dayOfWeek
            self.gatewayARN = gatewayARN
            self.hourOfDay = hourOfDay
            self.minuteOfHour = minuteOfHour
            self.timezone = timezone
        }

        public func validate() throws {
            try validate(dayOfMonth, name:"dayOfMonth", max: 28)
            try validate(dayOfMonth, name:"dayOfMonth", min: 1)
            try validate(dayOfWeek, name:"dayOfWeek", max: 6)
            try validate(dayOfWeek, name:"dayOfWeek", min: 0)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(hourOfDay, name:"hourOfDay", max: 23)
            try validate(hourOfDay, name:"hourOfDay", min: 0)
            try validate(minuteOfHour, name:"minuteOfHour", max: 59)
            try validate(minuteOfHour, name:"minuteOfHour", min: 0)
            try validate(timezone, name:"timezone", max: 10)
            try validate(timezone, name:"timezone", min: 3)
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfMonth = "DayOfMonth"
            case dayOfWeek = "DayOfWeek"
            case gatewayARN = "GatewayARN"
            case hourOfDay = "HourOfDay"
            case minuteOfHour = "MinuteOfHour"
            case timezone = "Timezone"
        }
    }

    public struct DescribeNFSFileSharesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARNList", required: true, type: .list)
        ]

        /// An array containing the Amazon Resource Name (ARN) of each file share to be described. 
        public let fileShareARNList: [String]

        public init(fileShareARNList: [String]) {
            self.fileShareARNList = fileShareARNList
        }

        public func validate() throws {
            try fileShareARNList.forEach {
                try validate($0, name:"fileShareARNList[]", max: 500)
                try validate($0, name:"fileShareARNList[]", min: 50)
            }
            try validate(fileShareARNList, name:"fileShareARNList", max: 10)
            try validate(fileShareARNList, name:"fileShareARNList", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARNList = "FileShareARNList"
        }
    }

    public struct DescribeNFSFileSharesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NFSFileShareInfoList", required: false, type: .list)
        ]

        /// An array containing a description for each requested file share. 
        public let nFSFileShareInfoList: [NFSFileShareInfo]?

        public init(nFSFileShareInfoList: [NFSFileShareInfo]? = nil) {
            self.nFSFileShareInfoList = nFSFileShareInfoList
        }

        public func validate() throws {
            try nFSFileShareInfoList?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case nFSFileShareInfoList = "NFSFileShareInfoList"
        }
    }

    public struct DescribeSMBFileSharesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARNList", required: true, type: .list)
        ]

        /// An array containing the Amazon Resource Name (ARN) of each file share to be described. 
        public let fileShareARNList: [String]

        public init(fileShareARNList: [String]) {
            self.fileShareARNList = fileShareARNList
        }

        public func validate() throws {
            try fileShareARNList.forEach {
                try validate($0, name:"fileShareARNList[]", max: 500)
                try validate($0, name:"fileShareARNList[]", min: 50)
            }
            try validate(fileShareARNList, name:"fileShareARNList", max: 10)
            try validate(fileShareARNList, name:"fileShareARNList", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARNList = "FileShareARNList"
        }
    }

    public struct DescribeSMBFileSharesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMBFileShareInfoList", required: false, type: .list)
        ]

        /// An array containing a description for each requested file share. 
        public let sMBFileShareInfoList: [SMBFileShareInfo]?

        public init(sMBFileShareInfoList: [SMBFileShareInfo]? = nil) {
            self.sMBFileShareInfoList = sMBFileShareInfoList
        }

        public func validate() throws {
            try sMBFileShareInfoList?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case sMBFileShareInfoList = "SMBFileShareInfoList"
        }
    }

    public struct DescribeSMBSettingsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeSMBSettingsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "SMBGuestPasswordSet", required: false, type: .boolean), 
            AWSShapeMember(label: "SMBSecurityStrategy", required: false, type: .enum)
        ]

        /// The name of the domain that the gateway is joined to.
        public let domainName: String?
        public let gatewayARN: String?
        /// This value is true if a password for the guest user “smbguest” is set, and otherwise false.
        public let sMBGuestPasswordSet: Bool?
        /// The type of security strategy that was specified for file gateway. ClientSpecified: SMBv1 is enabled, SMB signing is offered but not required, SMB encryption is offered but not required. MandatorySigning: SMBv1 is disabled, SMB signing is required, SMB encryption is offered but not required. MandatoryEncryption: SMBv1 is disabled, SMB signing is offered but not required, SMB encryption is required.
        public let sMBSecurityStrategy: SMBSecurityStrategy?

        public init(domainName: String? = nil, gatewayARN: String? = nil, sMBGuestPasswordSet: Bool? = nil, sMBSecurityStrategy: SMBSecurityStrategy? = nil) {
            self.domainName = domainName
            self.gatewayARN = gatewayARN
            self.sMBGuestPasswordSet = sMBGuestPasswordSet
            self.sMBSecurityStrategy = sMBSecurityStrategy
        }

        public func validate() throws {
            try validate(domainName, name:"domainName", max: 1024)
            try validate(domainName, name:"domainName", min: 1)
            try validate(domainName, name:"domainName", pattern: "^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$")
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case gatewayARN = "GatewayARN"
            case sMBGuestPasswordSet = "SMBGuestPasswordSet"
            case sMBSecurityStrategy = "SMBSecurityStrategy"
        }
    }

    public struct DescribeSnapshotScheduleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DescribeSnapshotScheduleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RecurrenceInHours", required: false, type: .integer), 
            AWSShapeMember(label: "StartAt", required: false, type: .integer), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]

        /// The snapshot description.
        public let description: String?
        /// The number of hours between snapshots.
        public let recurrenceInHours: Int32?
        /// The hour of the day at which the snapshot schedule begins represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        public let startAt: Int32?
        /// A value that indicates the time zone of the gateway.
        public let timezone: String?
        /// The Amazon Resource Name (ARN) of the volume that was specified in the request.
        public let volumeARN: String?

        public init(description: String? = nil, recurrenceInHours: Int32? = nil, startAt: Int32? = nil, timezone: String? = nil, volumeARN: String? = nil) {
            self.description = description
            self.recurrenceInHours = recurrenceInHours
            self.startAt = startAt
            self.timezone = timezone
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(description, name:"description", max: 255)
            try validate(description, name:"description", min: 1)
            try validate(recurrenceInHours, name:"recurrenceInHours", max: 24)
            try validate(recurrenceInHours, name:"recurrenceInHours", min: 1)
            try validate(startAt, name:"startAt", max: 23)
            try validate(startAt, name:"startAt", min: 0)
            try validate(timezone, name:"timezone", max: 10)
            try validate(timezone, name:"timezone", min: 3)
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case recurrenceInHours = "RecurrenceInHours"
            case startAt = "StartAt"
            case timezone = "Timezone"
            case volumeARN = "VolumeARN"
        }
    }

    public struct DescribeStorediSCSIVolumesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARNs", required: true, type: .list)
        ]

        /// An array of strings where each string represents the Amazon Resource Name (ARN) of a stored volume. All of the specified stored volumes must from the same gateway. Use ListVolumes to get volume ARNs for a gateway.
        public let volumeARNs: [String]

        public init(volumeARNs: [String]) {
            self.volumeARNs = volumeARNs
        }

        public func validate() throws {
            try volumeARNs.forEach {
                try validate($0, name:"volumeARNs[]", max: 500)
                try validate($0, name:"volumeARNs[]", min: 50)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARNs = "VolumeARNs"
        }
    }

    public struct DescribeStorediSCSIVolumesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorediSCSIVolumes", required: false, type: .list)
        ]

        /// Describes a single unit of output from DescribeStorediSCSIVolumes. The following fields are returned:    ChapEnabled: Indicates whether mutual CHAP is enabled for the iSCSI target.    LunNumber: The logical disk number.    NetworkInterfaceId: The network interface ID of the stored volume that initiator use to map the stored volume as an iSCSI target.    NetworkInterfacePort: The port used to communicate with iSCSI targets.    PreservedExistingData: Indicates if when the stored volume was created, existing data on the underlying local disk was preserved.    SourceSnapshotId: If the stored volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-1122aabb. Otherwise, this field is not included.    StorediSCSIVolumes: An array of StorediSCSIVolume objects where each object contains metadata about one stored volume.    TargetARN: The Amazon Resource Name (ARN) of the volume target.    VolumeARN: The Amazon Resource Name (ARN) of the stored volume.    VolumeDiskId: The disk ID of the local disk that was specified in the CreateStorediSCSIVolume operation.    VolumeId: The unique identifier of the storage volume, e.g. vol-1122AABB.    VolumeiSCSIAttributes: An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.    VolumeProgress: Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the stored volume is not restoring or bootstrapping.    VolumeSizeInBytes: The size of the volume in bytes.    VolumeStatus: One of the VolumeStatus values that indicates the state of the volume.    VolumeType: One of the enumeration values describing the type of the volume. Currently, on STORED volumes are supported.  
        public let storediSCSIVolumes: [StorediSCSIVolume]?

        public init(storediSCSIVolumes: [StorediSCSIVolume]? = nil) {
            self.storediSCSIVolumes = storediSCSIVolumes
        }

        public func validate() throws {
            try storediSCSIVolumes?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case storediSCSIVolumes = "StorediSCSIVolumes"
        }
    }

    public struct DescribeTapeArchivesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeARNs", required: false, type: .list)
        ]

        /// Specifies that the number of virtual tapes descried be limited to the specified number.
        public let limit: Int32?
        /// An opaque string that indicates the position at which to begin describing virtual tapes.
        public let marker: String?
        /// Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.
        public let tapeARNs: [String]?

        public init(limit: Int32? = nil, marker: String? = nil, tapeARNs: [String]? = nil) {
            self.limit = limit
            self.marker = marker
            self.tapeARNs = tapeARNs
        }

        public func validate() throws {
            try validate(limit, name:"limit", min: 1)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try tapeARNs?.forEach {
                try validate($0, name:"tapeARNs[]", max: 500)
                try validate($0, name:"tapeARNs[]", min: 50)
                try validate($0, name:"tapeARNs[]", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case marker = "Marker"
            case tapeARNs = "TapeARNs"
        }
    }

    public struct DescribeTapeArchivesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeArchives", required: false, type: .list)
        ]

        /// An opaque string that indicates the position at which the virtual tapes that were fetched for description ended. Use this marker in your next request to fetch the next set of virtual tapes in the virtual tape shelf (VTS). If there are no more virtual tapes to describe, this field does not appear in the response.
        public let marker: String?
        /// An array of virtual tape objects in the virtual tape shelf (VTS). The description includes of the Amazon Resource Name (ARN) of the virtual tapes. The information returned includes the Amazon Resource Names (ARNs) of the tapes, size of the tapes, status of the tapes, progress of the description and tape barcode.
        public let tapeArchives: [TapeArchive]?

        public init(marker: String? = nil, tapeArchives: [TapeArchive]? = nil) {
            self.marker = marker
            self.tapeArchives = tapeArchives
        }

        public func validate() throws {
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try tapeArchives?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapeArchives = "TapeArchives"
        }
    }

    public struct DescribeTapeRecoveryPointsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        public let gatewayARN: String
        /// Specifies that the number of virtual tape recovery points that are described be limited to the specified number.
        public let limit: Int32?
        /// An opaque string that indicates the position at which to begin describing the virtual tape recovery points.
        public let marker: String?

        public init(gatewayARN: String, limit: Int32? = nil, marker: String? = nil) {
            self.gatewayARN = gatewayARN
            self.limit = limit
            self.marker = marker
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(limit, name:"limit", min: 1)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct DescribeTapeRecoveryPointsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeRecoveryPointInfos", required: false, type: .list)
        ]

        public let gatewayARN: String?
        /// An opaque string that indicates the position at which the virtual tape recovery points that were listed for description ended. Use this marker in your next request to list the next set of virtual tape recovery points in the list. If there are no more recovery points to describe, this field does not appear in the response.
        public let marker: String?
        /// An array of TapeRecoveryPointInfos that are available for the specified gateway.
        public let tapeRecoveryPointInfos: [TapeRecoveryPointInfo]?

        public init(gatewayARN: String? = nil, marker: String? = nil, tapeRecoveryPointInfos: [TapeRecoveryPointInfo]? = nil) {
            self.gatewayARN = gatewayARN
            self.marker = marker
            self.tapeRecoveryPointInfos = tapeRecoveryPointInfos
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try tapeRecoveryPointInfos?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case marker = "Marker"
            case tapeRecoveryPointInfos = "TapeRecoveryPointInfos"
        }
    }

    public struct DescribeTapesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeARNs", required: false, type: .list)
        ]

        public let gatewayARN: String
        /// Specifies that the number of virtual tapes described be limited to the specified number.  Amazon Web Services may impose its own limit, if this field is not set. 
        public let limit: Int32?
        /// A marker value, obtained in a previous call to DescribeTapes. This marker indicates which page of results to retrieve.  If not specified, the first page of results is retrieved.
        public let marker: String?
        /// Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe. If this parameter is not specified, Tape gateway returns a description of all virtual tapes associated with the specified gateway.
        public let tapeARNs: [String]?

        public init(gatewayARN: String, limit: Int32? = nil, marker: String? = nil, tapeARNs: [String]? = nil) {
            self.gatewayARN = gatewayARN
            self.limit = limit
            self.marker = marker
            self.tapeARNs = tapeARNs
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(limit, name:"limit", min: 1)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try tapeARNs?.forEach {
                try validate($0, name:"tapeARNs[]", max: 500)
                try validate($0, name:"tapeARNs[]", min: 50)
                try validate($0, name:"tapeARNs[]", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case limit = "Limit"
            case marker = "Marker"
            case tapeARNs = "TapeARNs"
        }
    }

    public struct DescribeTapesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Tapes", required: false, type: .list)
        ]

        /// An opaque string which can be used as part of a subsequent DescribeTapes call to retrieve the next page of results. If a response does not contain a marker, then there are no more results to be retrieved.
        public let marker: String?
        /// An array of virtual tape descriptions.
        public let tapes: [Tape]?

        public init(marker: String? = nil, tapes: [Tape]? = nil) {
            self.marker = marker
            self.tapes = tapes
        }

        public func validate() throws {
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try tapes?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapes = "Tapes"
        }
    }

    public struct DescribeUploadBufferInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeUploadBufferOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskIds", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "UploadBufferAllocatedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "UploadBufferUsedInBytes", required: false, type: .long)
        ]

        /// An array of the gateway's local disk IDs that are configured as working storage. Each local disk ID is specified as a string (minimum length of 1 and maximum length of 300). If no local disks are configured as working storage, then the DiskIds array is empty.
        public let diskIds: [String]?
        public let gatewayARN: String?
        /// The total number of bytes allocated in the gateway's as upload buffer.
        public let uploadBufferAllocatedInBytes: Int64?
        /// The total number of bytes being used in the gateway's upload buffer.
        public let uploadBufferUsedInBytes: Int64?

        public init(diskIds: [String]? = nil, gatewayARN: String? = nil, uploadBufferAllocatedInBytes: Int64? = nil, uploadBufferUsedInBytes: Int64? = nil) {
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
            self.uploadBufferAllocatedInBytes = uploadBufferAllocatedInBytes
            self.uploadBufferUsedInBytes = uploadBufferUsedInBytes
        }

        public func validate() throws {
            try diskIds?.forEach {
                try validate($0, name:"diskIds[]", max: 300)
                try validate($0, name:"diskIds[]", min: 1)
            }
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
            case uploadBufferAllocatedInBytes = "UploadBufferAllocatedInBytes"
            case uploadBufferUsedInBytes = "UploadBufferUsedInBytes"
        }
    }

    public struct DescribeVTLDevicesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "VTLDeviceARNs", required: false, type: .list)
        ]

        public let gatewayARN: String
        /// Specifies that the number of VTL devices described be limited to the specified number.
        public let limit: Int32?
        /// An opaque string that indicates the position at which to begin describing the VTL devices.
        public let marker: String?
        /// An array of strings, where each string represents the Amazon Resource Name (ARN) of a VTL device.  All of the specified VTL devices must be from the same gateway. If no VTL devices are specified, the result will contain all devices on the specified gateway. 
        public let vTLDeviceARNs: [String]?

        public init(gatewayARN: String, limit: Int32? = nil, marker: String? = nil, vTLDeviceARNs: [String]? = nil) {
            self.gatewayARN = gatewayARN
            self.limit = limit
            self.marker = marker
            self.vTLDeviceARNs = vTLDeviceARNs
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(limit, name:"limit", min: 1)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try vTLDeviceARNs?.forEach {
                try validate($0, name:"vTLDeviceARNs[]", max: 500)
                try validate($0, name:"vTLDeviceARNs[]", min: 50)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case limit = "Limit"
            case marker = "Marker"
            case vTLDeviceARNs = "VTLDeviceARNs"
        }
    }

    public struct DescribeVTLDevicesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "VTLDevices", required: false, type: .list)
        ]

        public let gatewayARN: String?
        /// An opaque string that indicates the position at which the VTL devices that were fetched for description ended. Use the marker in your next request to fetch the next set of VTL devices in the list. If there are no more VTL devices to describe, this field does not appear in the response.
        public let marker: String?
        /// An array of VTL device objects composed of the Amazon Resource Name(ARN) of the VTL devices.
        public let vTLDevices: [VTLDevice]?

        public init(gatewayARN: String? = nil, marker: String? = nil, vTLDevices: [VTLDevice]? = nil) {
            self.gatewayARN = gatewayARN
            self.marker = marker
            self.vTLDevices = vTLDevices
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try vTLDevices?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case marker = "Marker"
            case vTLDevices = "VTLDevices"
        }
    }

    public struct DescribeWorkingStorageInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeWorkingStorageOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskIds", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "WorkingStorageAllocatedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "WorkingStorageUsedInBytes", required: false, type: .long)
        ]

        /// An array of the gateway's local disk IDs that are configured as working storage. Each local disk ID is specified as a string (minimum length of 1 and maximum length of 300). If no local disks are configured as working storage, then the DiskIds array is empty.
        public let diskIds: [String]?
        public let gatewayARN: String?
        /// The total working storage in bytes allocated for the gateway. If no working storage is configured for the gateway, this field returns 0.
        public let workingStorageAllocatedInBytes: Int64?
        /// The total working storage in bytes in use by the gateway. If no working storage is configured for the gateway, this field returns 0.
        public let workingStorageUsedInBytes: Int64?

        public init(diskIds: [String]? = nil, gatewayARN: String? = nil, workingStorageAllocatedInBytes: Int64? = nil, workingStorageUsedInBytes: Int64? = nil) {
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
            self.workingStorageAllocatedInBytes = workingStorageAllocatedInBytes
            self.workingStorageUsedInBytes = workingStorageUsedInBytes
        }

        public func validate() throws {
            try diskIds?.forEach {
                try validate($0, name:"diskIds[]", max: 300)
                try validate($0, name:"diskIds[]", min: 1)
            }
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
            case workingStorageAllocatedInBytes = "WorkingStorageAllocatedInBytes"
            case workingStorageUsedInBytes = "WorkingStorageUsedInBytes"
        }
    }

    public struct DetachVolumeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ForceDetach", required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]

        /// Set to true to forcibly remove the iSCSI connection of the target volume and detach the volume. The default is false. If this value is set to false, you must manually disconnect the iSCSI connection from the target volume.
        public let forceDetach: Bool?
        /// The Amazon Resource Name (ARN) of the volume to detach from the gateway.
        public let volumeARN: String

        public init(forceDetach: Bool? = nil, volumeARN: String) {
            self.forceDetach = forceDetach
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case forceDetach = "ForceDetach"
            case volumeARN = "VolumeARN"
        }
    }

    public struct DetachVolumeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the volume that was detached.
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DeviceiSCSIAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChapEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfacePort", required: false, type: .integer), 
            AWSShapeMember(label: "TargetARN", required: false, type: .string)
        ]

        /// Indicates whether mutual CHAP is enabled for the iSCSI target.
        public let chapEnabled: Bool?
        /// The network interface identifier of the VTL device.
        public let networkInterfaceId: String?
        /// The port used to communicate with iSCSI VTL device targets.
        public let networkInterfacePort: Int32?
        /// Specifies the unique Amazon Resource Name (ARN) that encodes the iSCSI qualified name(iqn) of a tape drive or media changer target.
        public let targetARN: String?

        public init(chapEnabled: Bool? = nil, networkInterfaceId: String? = nil, networkInterfacePort: Int32? = nil, targetARN: String? = nil) {
            self.chapEnabled = chapEnabled
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePort = networkInterfacePort
            self.targetARN = targetARN
        }

        public func validate() throws {
            try validate(networkInterfaceId, name:"networkInterfaceId", pattern: "\\A(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}\\z")
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case chapEnabled = "ChapEnabled"
            case networkInterfaceId = "NetworkInterfaceId"
            case networkInterfacePort = "NetworkInterfacePort"
            case targetARN = "TargetARN"
        }
    }

    public struct DisableGatewayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DisableGatewayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        /// The unique Amazon Resource Name (ARN) of the disabled gateway.
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct Disk: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskAllocationResource", required: false, type: .string), 
            AWSShapeMember(label: "DiskAllocationType", required: false, type: .string), 
            AWSShapeMember(label: "DiskAttributeList", required: false, type: .list), 
            AWSShapeMember(label: "DiskId", required: false, type: .string), 
            AWSShapeMember(label: "DiskNode", required: false, type: .string), 
            AWSShapeMember(label: "DiskPath", required: false, type: .string), 
            AWSShapeMember(label: "DiskSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "DiskStatus", required: false, type: .string)
        ]

        /// The iSCSI qualified name (IQN) that is defined for a disk. This field is not included in the response if the local disk is not defined as an iSCSI target. The format of this field is targetIqn::LUNNumber::region-volumeId. 
        public let diskAllocationResource: String?
        public let diskAllocationType: String?
        public let diskAttributeList: [String]?
        /// The unique device ID or other distinguishing data that identifies a local disk.
        public let diskId: String?
        /// The device node of a local disk as assigned by the virtualization environment.
        public let diskNode: String?
        /// The path of a local disk in the gateway virtual machine (VM).
        public let diskPath: String?
        /// The local disk size in bytes.
        public let diskSizeInBytes: Int64?
        /// A value that represents the status of a local disk.
        public let diskStatus: String?

        public init(diskAllocationResource: String? = nil, diskAllocationType: String? = nil, diskAttributeList: [String]? = nil, diskId: String? = nil, diskNode: String? = nil, diskPath: String? = nil, diskSizeInBytes: Int64? = nil, diskStatus: String? = nil) {
            self.diskAllocationResource = diskAllocationResource
            self.diskAllocationType = diskAllocationType
            self.diskAttributeList = diskAttributeList
            self.diskId = diskId
            self.diskNode = diskNode
            self.diskPath = diskPath
            self.diskSizeInBytes = diskSizeInBytes
            self.diskStatus = diskStatus
        }

        public func validate() throws {
            try validate(diskAllocationType, name:"diskAllocationType", max: 100)
            try validate(diskAllocationType, name:"diskAllocationType", min: 3)
            try diskAttributeList?.forEach {
                try validate($0, name:"diskAttributeList[]", max: 64)
                try validate($0, name:"diskAttributeList[]", min: 1)
            }
            try validate(diskAttributeList, name:"diskAttributeList", max: 10)
            try validate(diskAttributeList, name:"diskAttributeList", min: 0)
            try validate(diskId, name:"diskId", max: 300)
            try validate(diskId, name:"diskId", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case diskAllocationResource = "DiskAllocationResource"
            case diskAllocationType = "DiskAllocationType"
            case diskAttributeList = "DiskAttributeList"
            case diskId = "DiskId"
            case diskNode = "DiskNode"
            case diskPath = "DiskPath"
            case diskSizeInBytes = "DiskSizeInBytes"
            case diskStatus = "DiskStatus"
        }
    }

    public enum ErrorCode: String, CustomStringConvertible, Codable {
        case activationkeyexpired = "ActivationKeyExpired"
        case activationkeyinvalid = "ActivationKeyInvalid"
        case activationkeynotfound = "ActivationKeyNotFound"
        case gatewayinternalerror = "GatewayInternalError"
        case gatewaynotconnected = "GatewayNotConnected"
        case gatewaynotfound = "GatewayNotFound"
        case gatewayproxynetworkconnectionbusy = "GatewayProxyNetworkConnectionBusy"
        case authenticationfailure = "AuthenticationFailure"
        case bandwidththrottleschedulenotfound = "BandwidthThrottleScheduleNotFound"
        case blocked = "Blocked"
        case cannotexportsnapshot = "CannotExportSnapshot"
        case chapcredentialnotfound = "ChapCredentialNotFound"
        case diskalreadyallocated = "DiskAlreadyAllocated"
        case diskdoesnotexist = "DiskDoesNotExist"
        case disksizegreaterthanvolumemaxsize = "DiskSizeGreaterThanVolumeMaxSize"
        case disksizelessthanvolumesize = "DiskSizeLessThanVolumeSize"
        case disksizenotgigaligned = "DiskSizeNotGigAligned"
        case duplicatecertificateinfo = "DuplicateCertificateInfo"
        case duplicateschedule = "DuplicateSchedule"
        case endpointnotfound = "EndpointNotFound"
        case iamnotsupported = "IAMNotSupported"
        case initiatorinvalid = "InitiatorInvalid"
        case initiatornotfound = "InitiatorNotFound"
        case internalerror = "InternalError"
        case invalidgateway = "InvalidGateway"
        case invalidendpoint = "InvalidEndpoint"
        case invalidparameters = "InvalidParameters"
        case invalidschedule = "InvalidSchedule"
        case localstoragelimitexceeded = "LocalStorageLimitExceeded"
        case lunalreadyallocated = "LunAlreadyAllocated "
        case luninvalid = "LunInvalid"
        case maximumcontentlengthexceeded = "MaximumContentLengthExceeded"
        case maximumtapecartridgecountexceeded = "MaximumTapeCartridgeCountExceeded"
        case maximumvolumecountexceeded = "MaximumVolumeCountExceeded"
        case networkconfigurationchanged = "NetworkConfigurationChanged"
        case nodisksavailable = "NoDisksAvailable"
        case notimplemented = "NotImplemented"
        case notsupported = "NotSupported"
        case operationaborted = "OperationAborted"
        case outdatedgateway = "OutdatedGateway"
        case parametersnotimplemented = "ParametersNotImplemented"
        case regioninvalid = "RegionInvalid"
        case requesttimeout = "RequestTimeout"
        case serviceunavailable = "ServiceUnavailable"
        case snapshotdeleted = "SnapshotDeleted"
        case snapshotidinvalid = "SnapshotIdInvalid"
        case snapshotinprogress = "SnapshotInProgress"
        case snapshotnotfound = "SnapshotNotFound"
        case snapshotschedulenotfound = "SnapshotScheduleNotFound"
        case stagingareafull = "StagingAreaFull"
        case storagefailure = "StorageFailure"
        case tapecartridgenotfound = "TapeCartridgeNotFound"
        case targetalreadyexists = "TargetAlreadyExists"
        case targetinvalid = "TargetInvalid"
        case targetnotfound = "TargetNotFound"
        case unauthorizedoperation = "UnauthorizedOperation"
        case volumealreadyexists = "VolumeAlreadyExists"
        case volumeidinvalid = "VolumeIdInvalid"
        case volumeinuse = "VolumeInUse"
        case volumenotfound = "VolumeNotFound"
        case volumenotready = "VolumeNotReady"
        public var description: String { return self.rawValue }
    }

    public struct FileShareInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "FileShareId", required: false, type: .string), 
            AWSShapeMember(label: "FileShareStatus", required: false, type: .string), 
            AWSShapeMember(label: "FileShareType", required: false, type: .enum), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let fileShareARN: String?
        public let fileShareId: String?
        public let fileShareStatus: String?
        public let fileShareType: FileShareType?
        public let gatewayARN: String?

        public init(fileShareARN: String? = nil, fileShareId: String? = nil, fileShareStatus: String? = nil, fileShareType: FileShareType? = nil, gatewayARN: String? = nil) {
            self.fileShareARN = fileShareARN
            self.fileShareId = fileShareId
            self.fileShareStatus = fileShareStatus
            self.fileShareType = fileShareType
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
            try validate(fileShareId, name:"fileShareId", max: 30)
            try validate(fileShareId, name:"fileShareId", min: 12)
            try validate(fileShareStatus, name:"fileShareStatus", max: 50)
            try validate(fileShareStatus, name:"fileShareStatus", min: 3)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
            case fileShareId = "FileShareId"
            case fileShareStatus = "FileShareStatus"
            case fileShareType = "FileShareType"
            case gatewayARN = "GatewayARN"
        }
    }

    public enum FileShareType: String, CustomStringConvertible, Codable {
        case nfs = "NFS"
        case smb = "SMB"
        public var description: String { return self.rawValue }
    }

    public struct GatewayInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ec2InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Ec2InstanceRegion", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", required: false, type: .string), 
            AWSShapeMember(label: "GatewayName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayOperationalState", required: false, type: .string), 
            AWSShapeMember(label: "GatewayType", required: false, type: .string)
        ]

        /// The ID of the Amazon EC2 instance that was used to launch the gateway.
        public let ec2InstanceId: String?
        /// The AWS Region where the Amazon EC2 instance is located.
        public let ec2InstanceRegion: String?
        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.
        public let gatewayId: String?
        /// The name of the gateway.
        public let gatewayName: String?
        /// The state of the gateway. Valid Values: DISABLED or ACTIVE
        public let gatewayOperationalState: String?
        /// The type of the gateway.
        public let gatewayType: String?

        public init(ec2InstanceId: String? = nil, ec2InstanceRegion: String? = nil, gatewayARN: String? = nil, gatewayId: String? = nil, gatewayName: String? = nil, gatewayOperationalState: String? = nil, gatewayType: String? = nil) {
            self.ec2InstanceId = ec2InstanceId
            self.ec2InstanceRegion = ec2InstanceRegion
            self.gatewayARN = gatewayARN
            self.gatewayId = gatewayId
            self.gatewayName = gatewayName
            self.gatewayOperationalState = gatewayOperationalState
            self.gatewayType = gatewayType
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(gatewayId, name:"gatewayId", max: 30)
            try validate(gatewayId, name:"gatewayId", min: 12)
            try validate(gatewayOperationalState, name:"gatewayOperationalState", max: 25)
            try validate(gatewayOperationalState, name:"gatewayOperationalState", min: 2)
            try validate(gatewayType, name:"gatewayType", max: 20)
            try validate(gatewayType, name:"gatewayType", min: 2)
        }

        private enum CodingKeys: String, CodingKey {
            case ec2InstanceId = "Ec2InstanceId"
            case ec2InstanceRegion = "Ec2InstanceRegion"
            case gatewayARN = "GatewayARN"
            case gatewayId = "GatewayId"
            case gatewayName = "GatewayName"
            case gatewayOperationalState = "GatewayOperationalState"
            case gatewayType = "GatewayType"
        }
    }

    public struct JoinDomainInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainControllers", required: false, type: .list), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationalUnit", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "UserName", required: true, type: .string)
        ]

        /// List of IPv4 addresses, NetBIOS names, or host names of your domain server. If you need to specify the port number include it after the colon (“:”). For example, mydc.mydomain.com:389.
        public let domainControllers: [String]?
        /// The name of the domain that you want the gateway to join.
        public let domainName: String
        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String
        /// The organizational unit (OU) is a container with an Active Directory that can hold users, groups, computers, and other OUs and this parameter specifies the OU that the gateway will join within the AD domain.
        public let organizationalUnit: String?
        /// Sets the password of the user who has permission to add the gateway to the Active Directory domain.
        public let password: String
        /// Sets the user name of user who has permission to add the gateway to the Active Directory domain.
        public let userName: String

        public init(domainControllers: [String]? = nil, domainName: String, gatewayARN: String, organizationalUnit: String? = nil, password: String, userName: String) {
            self.domainControllers = domainControllers
            self.domainName = domainName
            self.gatewayARN = gatewayARN
            self.organizationalUnit = organizationalUnit
            self.password = password
            self.userName = userName
        }

        public func validate() throws {
            try domainControllers?.forEach {
                try validate($0, name:"domainControllers[]", pattern: "^(([a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9\\-]*[A-Za-z0-9])(:(\\d+))?$")
            }
            try validate(domainName, name:"domainName", max: 1024)
            try validate(domainName, name:"domainName", min: 1)
            try validate(domainName, name:"domainName", pattern: "^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$")
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(organizationalUnit, name:"organizationalUnit", max: 1024)
            try validate(organizationalUnit, name:"organizationalUnit", min: 1)
            try validate(password, name:"password", max: 1024)
            try validate(password, name:"password", min: 1)
            try validate(password, name:"password", pattern: "^[ -~]+$")
            try validate(userName, name:"userName", max: 1024)
            try validate(userName, name:"userName", min: 1)
            try validate(userName, name:"userName", pattern: "^\\w[\\w\\.\\- ]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case domainControllers = "DomainControllers"
            case domainName = "DomainName"
            case gatewayARN = "GatewayARN"
            case organizationalUnit = "OrganizationalUnit"
            case password = "Password"
            case userName = "UserName"
        }
    }

    public struct JoinDomainOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        /// The unique Amazon Resource Name (ARN) of the gateway that joined the domain.
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListFileSharesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The Amazon resource Name (ARN) of the gateway whose file shares you want to list. If this field is not present, all file shares under your account are listed.
        public let gatewayARN: String?
        /// The maximum number of file shares to return in the response. The value must be an integer with a value greater than zero. Optional.
        public let limit: Int32?
        /// Opaque pagination token returned from a previous ListFileShares operation. If present, Marker specifies where to continue the list from after a previous call to ListFileShares. Optional.
        public let marker: String?

        public init(gatewayARN: String? = nil, limit: Int32? = nil, marker: String? = nil) {
            self.gatewayARN = gatewayARN
            self.limit = limit
            self.marker = marker
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(limit, name:"limit", min: 1)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct ListFileSharesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareInfoList", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]

        /// An array of information about the file gateway's file shares. 
        public let fileShareInfoList: [FileShareInfo]?
        /// If the request includes Marker, the response returns that value in this field. 
        public let marker: String?
        /// If a value is present, there are more file shares to return. In a subsequent request, use NextMarker as the value for Marker to retrieve the next set of file shares. 
        public let nextMarker: String?

        public init(fileShareInfoList: [FileShareInfo]? = nil, marker: String? = nil, nextMarker: String? = nil) {
            self.fileShareInfoList = fileShareInfoList
            self.marker = marker
            self.nextMarker = nextMarker
        }

        public func validate() throws {
            try fileShareInfoList?.forEach {
                try $0.validate()
            }
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try validate(nextMarker, name:"nextMarker", max: 1000)
            try validate(nextMarker, name:"nextMarker", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareInfoList = "FileShareInfoList"
            case marker = "Marker"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListGatewaysInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// Specifies that the list of gateways returned be limited to the specified number of items.
        public let limit: Int32?
        /// An opaque string that indicates the position at which to begin the returned list of gateways.
        public let marker: String?

        public init(limit: Int32? = nil, marker: String? = nil) {
            self.limit = limit
            self.marker = marker
        }

        public func validate() throws {
            try validate(limit, name:"limit", min: 1)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct ListGatewaysOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Gateways", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// An array of GatewayInfo objects.
        public let gateways: [GatewayInfo]?
        /// Use the marker in your next request to fetch the next set of gateways in the list. If there are no more gateways to list, this field does not appear in the response.
        public let marker: String?

        public init(gateways: [GatewayInfo]? = nil, marker: String? = nil) {
            self.gateways = gateways
            self.marker = marker
        }

        public func validate() throws {
            try gateways?.forEach {
                try $0.validate()
            }
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gateways = "Gateways"
            case marker = "Marker"
        }
    }

    public struct ListLocalDisksInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListLocalDisksOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Disks", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        /// A JSON object containing the following fields:    ListLocalDisksOutput$Disks   
        public let disks: [Disk]?
        public let gatewayARN: String?

        public init(disks: [Disk]? = nil, gatewayARN: String? = nil) {
            self.disks = disks
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try disks?.forEach {
                try $0.validate()
            }
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case disks = "Disks"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListTagsForResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]

        /// Specifies that the list of tags returned be limited to the specified number of items.
        public let limit: Int32?
        /// An opaque string that indicates the position at which to begin returning the list of tags.
        public let marker: String?
        /// The Amazon Resource Name (ARN) of the resource for which you want to list tags.
        public let resourceARN: String

        public init(limit: Int32? = nil, marker: String? = nil, resourceARN: String) {
            self.limit = limit
            self.marker = marker
            self.resourceARN = resourceARN
        }

        public func validate() throws {
            try validate(limit, name:"limit", min: 1)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try validate(resourceARN, name:"resourceARN", max: 500)
            try validate(resourceARN, name:"resourceARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case marker = "Marker"
            case resourceARN = "ResourceARN"
        }
    }

    public struct ListTagsForResourceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]

        /// An opaque string that indicates the position at which to stop returning the list of tags.
        public let marker: String?
        /// he Amazon Resource Name (ARN) of the resource for which you want to list tags.
        public let resourceARN: String?
        /// An array that contains the tags for the specified resource.
        public let tags: [Tag]?

        public init(marker: String? = nil, resourceARN: String? = nil, tags: [Tag]? = nil) {
            self.marker = marker
            self.resourceARN = resourceARN
            self.tags = tags
        }

        public func validate() throws {
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try validate(resourceARN, name:"resourceARN", max: 500)
            try validate(resourceARN, name:"resourceARN", min: 50)
            try tags?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct ListTapesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeARNs", required: false, type: .list)
        ]

        /// An optional number limit for the tapes in the list returned by this call.
        public let limit: Int32?
        /// A string that indicates the position at which to begin the returned list of tapes.
        public let marker: String?
        public let tapeARNs: [String]?

        public init(limit: Int32? = nil, marker: String? = nil, tapeARNs: [String]? = nil) {
            self.limit = limit
            self.marker = marker
            self.tapeARNs = tapeARNs
        }

        public func validate() throws {
            try validate(limit, name:"limit", min: 1)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try tapeARNs?.forEach {
                try validate($0, name:"tapeARNs[]", max: 500)
                try validate($0, name:"tapeARNs[]", min: 50)
                try validate($0, name:"tapeARNs[]", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case marker = "Marker"
            case tapeARNs = "TapeARNs"
        }
    }

    public struct ListTapesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeInfos", required: false, type: .list)
        ]

        /// A string that indicates the position at which to begin returning the next list of tapes. Use the marker in your next request to continue pagination of tapes. If there are no more tapes to list, this element does not appear in the response body.
        public let marker: String?
        public let tapeInfos: [TapeInfo]?

        public init(marker: String? = nil, tapeInfos: [TapeInfo]? = nil) {
            self.marker = marker
            self.tapeInfos = tapeInfos
        }

        public func validate() throws {
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try tapeInfos?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapeInfos = "TapeInfos"
        }
    }

    public struct ListVolumeInitiatorsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes for the gateway.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct ListVolumeInitiatorsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Initiators", required: false, type: .list)
        ]

        /// The host names and port numbers of all iSCSI initiators that are connected to the gateway.
        public let initiators: [String]?

        public init(initiators: [String]? = nil) {
            self.initiators = initiators
        }

        public func validate() throws {
            try initiators?.forEach {
                try validate($0, name:"initiators[]", max: 50)
                try validate($0, name:"initiators[]", min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case initiators = "Initiators"
        }
    }

    public struct ListVolumeRecoveryPointsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListVolumeRecoveryPointsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeRecoveryPointInfos", required: false, type: .list)
        ]

        public let gatewayARN: String?
        /// An array of VolumeRecoveryPointInfo objects.
        public let volumeRecoveryPointInfos: [VolumeRecoveryPointInfo]?

        public init(gatewayARN: String? = nil, volumeRecoveryPointInfos: [VolumeRecoveryPointInfo]? = nil) {
            self.gatewayARN = gatewayARN
            self.volumeRecoveryPointInfos = volumeRecoveryPointInfos
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try volumeRecoveryPointInfos?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case volumeRecoveryPointInfos = "VolumeRecoveryPointInfos"
        }
    }

    public struct ListVolumesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        public let gatewayARN: String?
        /// Specifies that the list of volumes returned be limited to the specified number of items.
        public let limit: Int32?
        /// A string that indicates the position at which to begin the returned list of volumes. Obtain the marker from the response of a previous List iSCSI Volumes request.
        public let marker: String?

        public init(gatewayARN: String? = nil, limit: Int32? = nil, marker: String? = nil) {
            self.gatewayARN = gatewayARN
            self.limit = limit
            self.marker = marker
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(limit, name:"limit", min: 1)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct ListVolumesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "VolumeInfos", required: false, type: .list)
        ]

        public let gatewayARN: String?
        /// Use the marker in your next request to continue pagination of iSCSI volumes. If there are no more volumes to list, this field does not appear in the response body.
        public let marker: String?
        /// An array of VolumeInfo objects, where each object describes an iSCSI volume. If no volumes are defined for the gateway, then VolumeInfos is an empty array "[]".
        public let volumeInfos: [VolumeInfo]?

        public init(gatewayARN: String? = nil, marker: String? = nil, volumeInfos: [VolumeInfo]? = nil) {
            self.gatewayARN = gatewayARN
            self.marker = marker
            self.volumeInfos = volumeInfos
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(marker, name:"marker", max: 1000)
            try validate(marker, name:"marker", min: 1)
            try volumeInfos?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case marker = "Marker"
            case volumeInfos = "VolumeInfos"
        }
    }

    public struct NFSFileShareDefaults: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryMode", required: false, type: .string), 
            AWSShapeMember(label: "FileMode", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .long), 
            AWSShapeMember(label: "OwnerId", required: false, type: .long)
        ]

        /// The Unix directory mode in the form "nnnn". For example, "0666" represents the default access mode for all directories inside the file share. The default value is 0777.
        public let directoryMode: String?
        /// The Unix file mode in the form "nnnn". For example, "0666" represents the default file mode inside the file share. The default value is 0666. 
        public let fileMode: String?
        /// The default group ID for the file share (unless the files have another group ID specified). The default value is nfsnobody. 
        public let groupId: Int64?
        /// The default owner ID for files in the file share (unless the files have another owner ID specified). The default value is nfsnobody. 
        public let ownerId: Int64?

        public init(directoryMode: String? = nil, fileMode: String? = nil, groupId: Int64? = nil, ownerId: Int64? = nil) {
            self.directoryMode = directoryMode
            self.fileMode = fileMode
            self.groupId = groupId
            self.ownerId = ownerId
        }

        public func validate() throws {
            try validate(directoryMode, name:"directoryMode", max: 4)
            try validate(directoryMode, name:"directoryMode", min: 1)
            try validate(directoryMode, name:"directoryMode", pattern: "^[0-7]{4}$")
            try validate(fileMode, name:"fileMode", max: 4)
            try validate(fileMode, name:"fileMode", min: 1)
            try validate(fileMode, name:"fileMode", pattern: "^[0-7]{4}$")
            try validate(groupId, name:"groupId", max: 4294967294)
            try validate(groupId, name:"groupId", min: 0)
            try validate(ownerId, name:"ownerId", max: 4294967294)
            try validate(ownerId, name:"ownerId", min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case directoryMode = "DirectoryMode"
            case fileMode = "FileMode"
            case groupId = "GroupId"
            case ownerId = "OwnerId"
        }
    }

    public struct NFSFileShareInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientList", required: false, type: .list), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "FileShareId", required: false, type: .string), 
            AWSShapeMember(label: "FileShareStatus", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "LocationARN", required: false, type: .string), 
            AWSShapeMember(label: "NFSFileShareDefaults", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "Role", required: false, type: .string), 
            AWSShapeMember(label: "Squash", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]

        public let clientList: [String]?
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        public let fileShareARN: String?
        public let fileShareId: String?
        public let fileShareStatus: String?
        public let gatewayARN: String?
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional. 
        public let kMSEncrypted: Bool?
        public let kMSKey: String?
        public let locationARN: String?
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        public let objectACL: ObjectACL?
        public let path: String?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?
        /// A value that sets who pays the cost of the request and the cost associated with data download from the S3 bucket. If this value is set to true, the requester pays the costs. Otherwise the S3 bucket owner pays. However, the S3 bucket owner always pays the cost of storing data.   RequesterPays is a configuration for the S3 bucket that backs the file share, so make sure that the configuration on the file share is the same as the S3 bucket configuration. 
        public let requesterPays: Bool?
        public let role: String?
        public let squash: String?
        /// A list of up to 50 tags assigned to the NFS file share, sorted alphabetically by key name. Each tag is a key-value pair. For a gateway with more than 10 tags assigned, you can view all tags using the ListTagsForResource API operation.
        public let tags: [Tag]?

        public init(clientList: [String]? = nil, defaultStorageClass: String? = nil, fileShareARN: String? = nil, fileShareId: String? = nil, fileShareStatus: String? = nil, gatewayARN: String? = nil, guessMIMETypeEnabled: Bool? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, locationARN: String? = nil, nFSFileShareDefaults: NFSFileShareDefaults? = nil, objectACL: ObjectACL? = nil, path: String? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, role: String? = nil, squash: String? = nil, tags: [Tag]? = nil) {
            self.clientList = clientList
            self.defaultStorageClass = defaultStorageClass
            self.fileShareARN = fileShareARN
            self.fileShareId = fileShareId
            self.fileShareStatus = fileShareStatus
            self.gatewayARN = gatewayARN
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.locationARN = locationARN
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.objectACL = objectACL
            self.path = path
            self.readOnly = readOnly
            self.requesterPays = requesterPays
            self.role = role
            self.squash = squash
            self.tags = tags
        }

        public func validate() throws {
            try clientList?.forEach {
                try validate($0, name:"clientList[]", pattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))?$")
            }
            try validate(clientList, name:"clientList", max: 100)
            try validate(clientList, name:"clientList", min: 1)
            try validate(defaultStorageClass, name:"defaultStorageClass", max: 20)
            try validate(defaultStorageClass, name:"defaultStorageClass", min: 5)
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
            try validate(fileShareId, name:"fileShareId", max: 30)
            try validate(fileShareId, name:"fileShareId", min: 12)
            try validate(fileShareStatus, name:"fileShareStatus", max: 50)
            try validate(fileShareStatus, name:"fileShareStatus", min: 3)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(locationARN, name:"locationARN", max: 310)
            try validate(locationARN, name:"locationARN", min: 16)
            try nFSFileShareDefaults?.validate()
            try validate(role, name:"role", max: 2048)
            try validate(role, name:"role", min: 20)
            try validate(squash, name:"squash", max: 15)
            try validate(squash, name:"squash", min: 5)
            try tags?.forEach {
                try $0.validate()
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clientList = "ClientList"
            case defaultStorageClass = "DefaultStorageClass"
            case fileShareARN = "FileShareARN"
            case fileShareId = "FileShareId"
            case fileShareStatus = "FileShareStatus"
            case gatewayARN = "GatewayARN"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case locationARN = "LocationARN"
            case nFSFileShareDefaults = "NFSFileShareDefaults"
            case objectACL = "ObjectACL"
            case path = "Path"
            case readOnly = "ReadOnly"
            case requesterPays = "RequesterPays"
            case role = "Role"
            case squash = "Squash"
            case tags = "Tags"
        }
    }

    public struct NetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv4Address", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Address", required: false, type: .string), 
            AWSShapeMember(label: "MacAddress", required: false, type: .string)
        ]

        /// The Internet Protocol version 4 (IPv4) address of the interface.
        public let ipv4Address: String?
        /// The Internet Protocol version 6 (IPv6) address of the interface. Currently not supported.
        public let ipv6Address: String?
        /// The Media Access Control (MAC) address of the interface.  This is currently unsupported and will not be returned in output. 
        public let macAddress: String?

        public init(ipv4Address: String? = nil, ipv6Address: String? = nil, macAddress: String? = nil) {
            self.ipv4Address = ipv4Address
            self.ipv6Address = ipv6Address
            self.macAddress = macAddress
        }

        private enum CodingKeys: String, CodingKey {
            case ipv4Address = "Ipv4Address"
            case ipv6Address = "Ipv6Address"
            case macAddress = "MacAddress"
        }
    }

    public struct NotifyWhenUploadedInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: true, type: .string)
        ]

        public let fileShareARN: String

        public init(fileShareARN: String) {
            self.fileShareARN = fileShareARN
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct NotifyWhenUploadedOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "NotificationId", required: false, type: .string)
        ]

        public let fileShareARN: String?
        public let notificationId: String?

        public init(fileShareARN: String? = nil, notificationId: String? = nil) {
            self.fileShareARN = fileShareARN
            self.notificationId = notificationId
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
            try validate(notificationId, name:"notificationId", max: 2048)
            try validate(notificationId, name:"notificationId", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
            case notificationId = "NotificationId"
        }
    }

    public enum ObjectACL: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case authenticatedRead = "authenticated-read"
        case bucketOwnerRead = "bucket-owner-read"
        case bucketOwnerFullControl = "bucket-owner-full-control"
        case awsExecRead = "aws-exec-read"
        public var description: String { return self.rawValue }
    }

    public struct RefreshCacheInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: true, type: .string), 
            AWSShapeMember(label: "FolderList", required: false, type: .list), 
            AWSShapeMember(label: "Recursive", required: false, type: .boolean)
        ]

        /// The Amazon Resource Name (ARN) of the file share you want to refresh.
        public let fileShareARN: String
        /// A comma-separated list of the paths of folders to refresh in the cache. The default is ["/"]. The default refreshes objects and folders at the root of the Amazon S3 bucket. If Recursive is set to "true", the entire S3 bucket that the file share has access to is refreshed.
        public let folderList: [String]?
        /// A value that specifies whether to recursively refresh folders in the cache. The refresh includes folders that were in the cache the last time the gateway listed the folder's contents. If this value set to "true", each folder that is listed in FolderList is recursively updated. Otherwise, subfolders listed in FolderList are not refreshed. Only objects that are in folders listed directly under FolderList are found and used for the update. The default is "true".
        public let recursive: Bool?

        public init(fileShareARN: String, folderList: [String]? = nil, recursive: Bool? = nil) {
            self.fileShareARN = fileShareARN
            self.folderList = folderList
            self.recursive = recursive
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
            try folderList?.forEach {
                try validate($0, name:"folderList[]", max: 1024)
                try validate($0, name:"folderList[]", min: 1)
            }
            try validate(folderList, name:"folderList", max: 50)
            try validate(folderList, name:"folderList", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
            case folderList = "FolderList"
            case recursive = "Recursive"
        }
    }

    public struct RefreshCacheOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "NotificationId", required: false, type: .string)
        ]

        public let fileShareARN: String?
        public let notificationId: String?

        public init(fileShareARN: String? = nil, notificationId: String? = nil) {
            self.fileShareARN = fileShareARN
            self.notificationId = notificationId
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
            try validate(notificationId, name:"notificationId", max: 2048)
            try validate(notificationId, name:"notificationId", min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
            case notificationId = "NotificationId"
        }
    }

    public struct RemoveTagsFromResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]

        /// The Amazon Resource Name (ARN) of the resource you want to remove the tags from.
        public let resourceARN: String
        /// The keys of the tags you want to remove from the specified resource. A tag is composed of a key/value pair.
        public let tagKeys: [String]

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

        public func validate() throws {
            try validate(resourceARN, name:"resourceARN", max: 500)
            try validate(resourceARN, name:"resourceARN", min: 50)
            try tagKeys.forEach {
                try validate($0, name:"tagKeys[]", max: 128)
                try validate($0, name:"tagKeys[]", min: 1)
                try validate($0, name:"tagKeys[]", pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tagKeys = "TagKeys"
        }
    }

    public struct RemoveTagsFromResourceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the resource that the tags were removed from.
        public let resourceARN: String?

        public init(resourceARN: String? = nil) {
            self.resourceARN = resourceARN
        }

        public func validate() throws {
            try validate(resourceARN, name:"resourceARN", max: 500)
            try validate(resourceARN, name:"resourceARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct ResetCacheInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ResetCacheOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct RetrieveTapeArchiveInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "TapeARN", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the gateway you want to retrieve the virtual tape to. Use the ListGateways operation to return a list of gateways for your account and region. You retrieve archived virtual tapes to only one gateway and the gateway must be a tape gateway.
        public let gatewayARN: String
        /// The Amazon Resource Name (ARN) of the virtual tape you want to retrieve from the virtual tape shelf (VTS).
        public let tapeARN: String

        public init(gatewayARN: String, tapeARN: String) {
            self.gatewayARN = gatewayARN
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case tapeARN = "TapeARN"
        }
    }

    public struct RetrieveTapeArchiveOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the retrieved virtual tape.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct RetrieveTapeRecoveryPointInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "TapeARN", required: true, type: .string)
        ]

        public let gatewayARN: String
        /// The Amazon Resource Name (ARN) of the virtual tape for which you want to retrieve the recovery point.
        public let tapeARN: String

        public init(gatewayARN: String, tapeARN: String) {
            self.gatewayARN = gatewayARN
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case tapeARN = "TapeARN"
        }
    }

    public struct RetrieveTapeRecoveryPointOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the virtual tape for which the recovery point was retrieved.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public func validate() throws {
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct SMBFileShareInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdminUserList", required: false, type: .list), 
            AWSShapeMember(label: "Authentication", required: false, type: .string), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "FileShareId", required: false, type: .string), 
            AWSShapeMember(label: "FileShareStatus", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "InvalidUserList", required: false, type: .list), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "LocationARN", required: false, type: .string), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "Role", required: false, type: .string), 
            AWSShapeMember(label: "SMBACLEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ValidUserList", required: false, type: .list)
        ]

        /// A list of users or groups in the Active Directory that have administrator rights to the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let adminUserList: [String]?
        public let authentication: String?
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        public let fileShareARN: String?
        public let fileShareId: String?
        public let fileShareStatus: String?
        public let gatewayARN: String?
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// A list of users or groups in the Active Directory that are not allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let invalidUserList: [String]?
        /// True to use Amazon S3 server-side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional. 
        public let kMSEncrypted: Bool?
        public let kMSKey: String?
        public let locationARN: String?
        public let objectACL: ObjectACL?
        /// The file share path used by the SMB client to identify the mount point.
        public let path: String?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?
        /// A value that sets who pays the cost of the request and the cost associated with data download from the S3 bucket. If this value is set to true, the requester pays the costs. Otherwise the S3 bucket owner pays. However, the S3 bucket owner always pays the cost of storing data.   RequesterPays is a configuration for the S3 bucket that backs the file share, so make sure that the configuration on the file share is the same as the S3 bucket configuration. 
        public let requesterPays: Bool?
        public let role: String?
        /// If this value is set to "true", indicates that ACL (access control list) is enabled on the SMB file share. If it is set to "false", it indicates that file and directory permissions are mapped to the POSIX permission. For more information, see https://docs.aws.amazon.com/storagegateway/latest/userguide/smb-acl.html in the Storage Gateway User Guide.
        public let sMBACLEnabled: Bool?
        /// A list of up to 50 tags assigned to the SMB file share, sorted alphabetically by key name. Each tag is a key-value pair. For a gateway with more than 10 tags assigned, you can view all tags using the ListTagsForResource API operation.
        public let tags: [Tag]?
        /// A list of users or groups in the Active Directory that are allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let validUserList: [String]?

        public init(adminUserList: [String]? = nil, authentication: String? = nil, defaultStorageClass: String? = nil, fileShareARN: String? = nil, fileShareId: String? = nil, fileShareStatus: String? = nil, gatewayARN: String? = nil, guessMIMETypeEnabled: Bool? = nil, invalidUserList: [String]? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, locationARN: String? = nil, objectACL: ObjectACL? = nil, path: String? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, role: String? = nil, sMBACLEnabled: Bool? = nil, tags: [Tag]? = nil, validUserList: [String]? = nil) {
            self.adminUserList = adminUserList
            self.authentication = authentication
            self.defaultStorageClass = defaultStorageClass
            self.fileShareARN = fileShareARN
            self.fileShareId = fileShareId
            self.fileShareStatus = fileShareStatus
            self.gatewayARN = gatewayARN
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.invalidUserList = invalidUserList
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.locationARN = locationARN
            self.objectACL = objectACL
            self.path = path
            self.readOnly = readOnly
            self.requesterPays = requesterPays
            self.role = role
            self.sMBACLEnabled = sMBACLEnabled
            self.tags = tags
            self.validUserList = validUserList
        }

        public func validate() throws {
            try adminUserList?.forEach {
                try validate($0, name:"adminUserList[]", max: 64)
                try validate($0, name:"adminUserList[]", min: 1)
            }
            try validate(adminUserList, name:"adminUserList", max: 100)
            try validate(adminUserList, name:"adminUserList", min: 0)
            try validate(authentication, name:"authentication", max: 15)
            try validate(authentication, name:"authentication", min: 5)
            try validate(defaultStorageClass, name:"defaultStorageClass", max: 20)
            try validate(defaultStorageClass, name:"defaultStorageClass", min: 5)
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
            try validate(fileShareId, name:"fileShareId", max: 30)
            try validate(fileShareId, name:"fileShareId", min: 12)
            try validate(fileShareStatus, name:"fileShareStatus", max: 50)
            try validate(fileShareStatus, name:"fileShareStatus", min: 3)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try invalidUserList?.forEach {
                try validate($0, name:"invalidUserList[]", max: 64)
                try validate($0, name:"invalidUserList[]", min: 1)
            }
            try validate(invalidUserList, name:"invalidUserList", max: 100)
            try validate(invalidUserList, name:"invalidUserList", min: 0)
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(locationARN, name:"locationARN", max: 310)
            try validate(locationARN, name:"locationARN", min: 16)
            try validate(role, name:"role", max: 2048)
            try validate(role, name:"role", min: 20)
            try tags?.forEach {
                try $0.validate()
            }
            try validUserList?.forEach {
                try validate($0, name:"validUserList[]", max: 64)
                try validate($0, name:"validUserList[]", min: 1)
            }
            try validate(validUserList, name:"validUserList", max: 100)
            try validate(validUserList, name:"validUserList", min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case adminUserList = "AdminUserList"
            case authentication = "Authentication"
            case defaultStorageClass = "DefaultStorageClass"
            case fileShareARN = "FileShareARN"
            case fileShareId = "FileShareId"
            case fileShareStatus = "FileShareStatus"
            case gatewayARN = "GatewayARN"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case invalidUserList = "InvalidUserList"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case locationARN = "LocationARN"
            case objectACL = "ObjectACL"
            case path = "Path"
            case readOnly = "ReadOnly"
            case requesterPays = "RequesterPays"
            case role = "Role"
            case sMBACLEnabled = "SMBACLEnabled"
            case tags = "Tags"
            case validUserList = "ValidUserList"
        }
    }

    public enum SMBSecurityStrategy: String, CustomStringConvertible, Codable {
        case clientspecified = "ClientSpecified"
        case mandatorysigning = "MandatorySigning"
        case mandatoryencryption = "MandatoryEncryption"
        public var description: String { return self.rawValue }
    }

    public struct SetLocalConsolePasswordInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "LocalConsolePassword", required: true, type: .string)
        ]

        public let gatewayARN: String
        /// The password you want to set for your VM local console.
        public let localConsolePassword: String

        public init(gatewayARN: String, localConsolePassword: String) {
            self.gatewayARN = gatewayARN
            self.localConsolePassword = localConsolePassword
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(localConsolePassword, name:"localConsolePassword", max: 512)
            try validate(localConsolePassword, name:"localConsolePassword", min: 6)
            try validate(localConsolePassword, name:"localConsolePassword", pattern: "^[ -~]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case localConsolePassword = "LocalConsolePassword"
        }
    }

    public struct SetLocalConsolePasswordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct SetSMBGuestPasswordInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the file gateway the SMB file share is associated with.
        public let gatewayARN: String
        /// The password that you want to set for your SMB Server.
        public let password: String

        public init(gatewayARN: String, password: String) {
            self.gatewayARN = gatewayARN
            self.password = password
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(password, name:"password", max: 512)
            try validate(password, name:"password", min: 6)
            try validate(password, name:"password", pattern: "^[ -~]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case password = "Password"
        }
    }

    public struct SetSMBGuestPasswordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ShutdownGatewayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ShutdownGatewayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct StartGatewayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct StartGatewayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct StorageGatewayError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "errorCode", required: false, type: .enum), 
            AWSShapeMember(label: "errorDetails", required: false, type: .map)
        ]

        /// Additional information about the error.
        public let errorCode: ErrorCode?
        /// Human-readable text that provides detail about the error that occurred.
        public let errorDetails: [String: String]?

        public init(errorCode: ErrorCode? = nil, errorDetails: [String: String]? = nil) {
            self.errorCode = errorCode
            self.errorDetails = errorDetails
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "errorCode"
            case errorDetails = "errorDetails"
        }
    }

    public struct StorediSCSIVolume: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "PreservedExistingData", required: false, type: .boolean), 
            AWSShapeMember(label: "SourceSnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "TargetName", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeAttachmentStatus", required: false, type: .string), 
            AWSShapeMember(label: "VolumeDiskId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeiSCSIAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "VolumeProgress", required: false, type: .double), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeStatus", required: false, type: .string), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string), 
            AWSShapeMember(label: "VolumeUsedInBytes", required: false, type: .long)
        ]

        /// The date the volume was created. Volumes created prior to March 28, 2017 don’t have this time stamp.
        public let createdDate: TimeStamp?
        public let kMSKey: String?
        /// Indicates if when the stored volume was created, existing data on the underlying local disk was preserved.  Valid Values: true, false
        public let preservedExistingData: Bool?
        /// If the stored volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
        public let sourceSnapshotId: String?
        /// The name of the iSCSI target used by an initiator to connect to a volume and used as a suffix for the target ARN. For example, specifying TargetName as myvolume results in the target ARN of arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes on a gateway. If you don't specify a value, Storage Gateway uses the value that was previously used for this volume as the new target name.
        public let targetName: String?
        /// The Amazon Resource Name (ARN) of the storage volume.
        public let volumeARN: String?
        /// A value that indicates whether a storage volume is attached to, detached from, or is in the process of detaching from a gateway. For more information, see Moving Your Volumes to a Different Gateway.
        public let volumeAttachmentStatus: String?
        /// The ID of the local disk that was specified in the CreateStorediSCSIVolume operation.
        public let volumeDiskId: String?
        /// The unique identifier of the volume, e.g. vol-AE4B946D.
        public let volumeId: String?
        /// An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.
        public let volumeiSCSIAttributes: VolumeiSCSIAttributes?
        /// Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the stored volume is not restoring or bootstrapping.
        public let volumeProgress: Double?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?
        /// One of the VolumeStatus values that indicates the state of the storage volume.
        public let volumeStatus: String?
        /// One of the VolumeType enumeration values describing the type of the volume.
        public let volumeType: String?
        /// The size of the data stored on the volume in bytes. This value is calculated based on the number of blocks that are touched, instead of the actual amount of data written. This value can be useful for sequential write patterns but less accurate for random write patterns. VolumeUsedInBytes is different from the compressed size of the volume, which is the value that is used to calculate your bill.  This value is not available for volumes created prior to May 13, 2015, until you store data on the volume. 
        public let volumeUsedInBytes: Int64?

        public init(createdDate: TimeStamp? = nil, kMSKey: String? = nil, preservedExistingData: Bool? = nil, sourceSnapshotId: String? = nil, targetName: String? = nil, volumeARN: String? = nil, volumeAttachmentStatus: String? = nil, volumeDiskId: String? = nil, volumeId: String? = nil, volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil, volumeProgress: Double? = nil, volumeSizeInBytes: Int64? = nil, volumeStatus: String? = nil, volumeType: String? = nil, volumeUsedInBytes: Int64? = nil) {
            self.createdDate = createdDate
            self.kMSKey = kMSKey
            self.preservedExistingData = preservedExistingData
            self.sourceSnapshotId = sourceSnapshotId
            self.targetName = targetName
            self.volumeARN = volumeARN
            self.volumeAttachmentStatus = volumeAttachmentStatus
            self.volumeDiskId = volumeDiskId
            self.volumeId = volumeId
            self.volumeiSCSIAttributes = volumeiSCSIAttributes
            self.volumeProgress = volumeProgress
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeStatus = volumeStatus
            self.volumeType = volumeType
            self.volumeUsedInBytes = volumeUsedInBytes
        }

        public func validate() throws {
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(sourceSnapshotId, name:"sourceSnapshotId", pattern: "\\Asnap-([0-9A-Fa-f]{8}|[0-9A-Fa-f]{17})\\z")
            try validate(targetName, name:"targetName", max: 200)
            try validate(targetName, name:"targetName", min: 1)
            try validate(targetName, name:"targetName", pattern: "^[-\\.;a-z0-9]+$")
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
            try validate(volumeAttachmentStatus, name:"volumeAttachmentStatus", max: 50)
            try validate(volumeAttachmentStatus, name:"volumeAttachmentStatus", min: 3)
            try validate(volumeDiskId, name:"volumeDiskId", max: 300)
            try validate(volumeDiskId, name:"volumeDiskId", min: 1)
            try validate(volumeId, name:"volumeId", max: 30)
            try validate(volumeId, name:"volumeId", min: 12)
            try volumeiSCSIAttributes?.validate()
            try validate(volumeStatus, name:"volumeStatus", max: 50)
            try validate(volumeStatus, name:"volumeStatus", min: 3)
            try validate(volumeType, name:"volumeType", max: 100)
            try validate(volumeType, name:"volumeType", min: 3)
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "CreatedDate"
            case kMSKey = "KMSKey"
            case preservedExistingData = "PreservedExistingData"
            case sourceSnapshotId = "SourceSnapshotId"
            case targetName = "TargetName"
            case volumeARN = "VolumeARN"
            case volumeAttachmentStatus = "VolumeAttachmentStatus"
            case volumeDiskId = "VolumeDiskId"
            case volumeId = "VolumeId"
            case volumeiSCSIAttributes = "VolumeiSCSIAttributes"
            case volumeProgress = "VolumeProgress"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case volumeStatus = "VolumeStatus"
            case volumeType = "VolumeType"
            case volumeUsedInBytes = "VolumeUsedInBytes"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]

        /// Tag key (String). The key can't start with aws:. 
        public let key: String
        /// Value of the tag key.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate() throws {
            try validate(key, name:"key", max: 128)
            try validate(key, name:"key", min: 1)
            try validate(key, name:"key", pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try validate(value, name:"value", max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct Tape: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "PoolId", required: false, type: .string), 
            AWSShapeMember(label: "Progress", required: false, type: .double), 
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeBarcode", required: false, type: .string), 
            AWSShapeMember(label: "TapeCreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string), 
            AWSShapeMember(label: "TapeUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VTLDevice", required: false, type: .string)
        ]

        public let kMSKey: String?
        /// The ID of the pool that contains tapes that will be archived. The tapes in this pool are archived in the S3 storage class that is associated with the pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (Glacier or Deep Archive) that corresponds to the pool. Valid values: "GLACIER", "DEEP_ARCHIVE"
        public let poolId: String?
        /// For archiving virtual tapes, indicates how much data remains to be uploaded before archiving is complete. Range: 0 (not started) to 100 (complete).
        public let progress: Double?
        /// The Amazon Resource Name (ARN) of the virtual tape.
        public let tapeARN: String?
        /// The barcode that identifies a specific virtual tape.
        public let tapeBarcode: String?
        /// The date the virtual tape was created.
        public let tapeCreatedDate: TimeStamp?
        /// The size, in bytes, of the virtual tape capacity.
        public let tapeSizeInBytes: Int64?
        /// The current state of the virtual tape.
        public let tapeStatus: String?
        /// The size, in bytes, of data stored on the virtual tape.  This value is not available for tapes created prior to May 13, 2015. 
        public let tapeUsedInBytes: Int64?
        /// The virtual tape library (VTL) device that the virtual tape is associated with.
        public let vTLDevice: String?

        public init(kMSKey: String? = nil, poolId: String? = nil, progress: Double? = nil, tapeARN: String? = nil, tapeBarcode: String? = nil, tapeCreatedDate: TimeStamp? = nil, tapeSizeInBytes: Int64? = nil, tapeStatus: String? = nil, tapeUsedInBytes: Int64? = nil, vTLDevice: String? = nil) {
            self.kMSKey = kMSKey
            self.poolId = poolId
            self.progress = progress
            self.tapeARN = tapeARN
            self.tapeBarcode = tapeBarcode
            self.tapeCreatedDate = tapeCreatedDate
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeStatus = tapeStatus
            self.tapeUsedInBytes = tapeUsedInBytes
            self.vTLDevice = vTLDevice
        }

        public func validate() throws {
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(poolId, name:"poolId", max: 100)
            try validate(poolId, name:"poolId", min: 1)
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
            try validate(tapeBarcode, name:"tapeBarcode", max: 16)
            try validate(tapeBarcode, name:"tapeBarcode", min: 7)
            try validate(tapeBarcode, name:"tapeBarcode", pattern: "^[A-Z0-9]*$")
            try validate(vTLDevice, name:"vTLDevice", max: 500)
            try validate(vTLDevice, name:"vTLDevice", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case kMSKey = "KMSKey"
            case poolId = "PoolId"
            case progress = "Progress"
            case tapeARN = "TapeARN"
            case tapeBarcode = "TapeBarcode"
            case tapeCreatedDate = "TapeCreatedDate"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case tapeStatus = "TapeStatus"
            case tapeUsedInBytes = "TapeUsedInBytes"
            case vTLDevice = "VTLDevice"
        }
    }

    public struct TapeArchive: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompletionTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "PoolId", required: false, type: .string), 
            AWSShapeMember(label: "RetrievedTo", required: false, type: .string), 
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeBarcode", required: false, type: .string), 
            AWSShapeMember(label: "TapeCreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string), 
            AWSShapeMember(label: "TapeUsedInBytes", required: false, type: .long)
        ]

        /// The time that the archiving of the virtual tape was completed. The default time stamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.
        public let completionTime: TimeStamp?
        public let kMSKey: String?
        /// The ID of the pool that was used to archive the tape. The tapes in this pool are archived in the S3 storage class that is associated with the pool. Valid values: "GLACIER", "DEEP_ARCHIVE"
        public let poolId: String?
        /// The Amazon Resource Name (ARN) of the tape gateway that the virtual tape is being retrieved to. The virtual tape is retrieved from the virtual tape shelf (VTS).
        public let retrievedTo: String?
        /// The Amazon Resource Name (ARN) of an archived virtual tape.
        public let tapeARN: String?
        /// The barcode that identifies the archived virtual tape.
        public let tapeBarcode: String?
        /// The date the virtual tape was created.
        public let tapeCreatedDate: TimeStamp?
        /// The size, in bytes, of the archived virtual tape.
        public let tapeSizeInBytes: Int64?
        /// The current state of the archived virtual tape.
        public let tapeStatus: String?
        /// The size, in bytes, of data stored on the virtual tape.  This value is not available for tapes created prior to May 13, 2015. 
        public let tapeUsedInBytes: Int64?

        public init(completionTime: TimeStamp? = nil, kMSKey: String? = nil, poolId: String? = nil, retrievedTo: String? = nil, tapeARN: String? = nil, tapeBarcode: String? = nil, tapeCreatedDate: TimeStamp? = nil, tapeSizeInBytes: Int64? = nil, tapeStatus: String? = nil, tapeUsedInBytes: Int64? = nil) {
            self.completionTime = completionTime
            self.kMSKey = kMSKey
            self.poolId = poolId
            self.retrievedTo = retrievedTo
            self.tapeARN = tapeARN
            self.tapeBarcode = tapeBarcode
            self.tapeCreatedDate = tapeCreatedDate
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeStatus = tapeStatus
            self.tapeUsedInBytes = tapeUsedInBytes
        }

        public func validate() throws {
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validate(poolId, name:"poolId", max: 100)
            try validate(poolId, name:"poolId", min: 1)
            try validate(retrievedTo, name:"retrievedTo", max: 500)
            try validate(retrievedTo, name:"retrievedTo", min: 50)
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
            try validate(tapeBarcode, name:"tapeBarcode", max: 16)
            try validate(tapeBarcode, name:"tapeBarcode", min: 7)
            try validate(tapeBarcode, name:"tapeBarcode", pattern: "^[A-Z0-9]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case completionTime = "CompletionTime"
            case kMSKey = "KMSKey"
            case poolId = "PoolId"
            case retrievedTo = "RetrievedTo"
            case tapeARN = "TapeARN"
            case tapeBarcode = "TapeBarcode"
            case tapeCreatedDate = "TapeCreatedDate"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case tapeStatus = "TapeStatus"
            case tapeUsedInBytes = "TapeUsedInBytes"
        }
    }

    public struct TapeInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "PoolId", required: false, type: .string), 
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeBarcode", required: false, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String?
        /// The ID of the pool that you want to add your tape to for archiving. The tape in this pool is archived in the S3 storage class that is associated with the pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (Glacier or Deep Archive) that corresponds to the pool. Valid values: "GLACIER", "DEEP_ARCHIVE"
        public let poolId: String?
        /// The Amazon Resource Name (ARN) of a virtual tape.
        public let tapeARN: String?
        /// The barcode that identifies a specific virtual tape.
        public let tapeBarcode: String?
        /// The size, in bytes, of a virtual tape.
        public let tapeSizeInBytes: Int64?
        /// The status of the tape.
        public let tapeStatus: String?

        public init(gatewayARN: String? = nil, poolId: String? = nil, tapeARN: String? = nil, tapeBarcode: String? = nil, tapeSizeInBytes: Int64? = nil, tapeStatus: String? = nil) {
            self.gatewayARN = gatewayARN
            self.poolId = poolId
            self.tapeARN = tapeARN
            self.tapeBarcode = tapeBarcode
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeStatus = tapeStatus
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(poolId, name:"poolId", max: 100)
            try validate(poolId, name:"poolId", min: 1)
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
            try validate(tapeBarcode, name:"tapeBarcode", max: 16)
            try validate(tapeBarcode, name:"tapeBarcode", min: 7)
            try validate(tapeBarcode, name:"tapeBarcode", pattern: "^[A-Z0-9]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case poolId = "PoolId"
            case tapeARN = "TapeARN"
            case tapeBarcode = "TapeBarcode"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case tapeStatus = "TapeStatus"
        }
    }

    public struct TapeRecoveryPointInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeRecoveryPointTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the virtual tape.
        public let tapeARN: String?
        /// The time when the point-in-time view of the virtual tape was replicated for later recovery. The default time stamp format of the tape recovery point time is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.
        public let tapeRecoveryPointTime: TimeStamp?
        /// The size, in bytes, of the virtual tapes to recover.
        public let tapeSizeInBytes: Int64?
        /// The status of the virtual tapes.
        public let tapeStatus: String?

        public init(tapeARN: String? = nil, tapeRecoveryPointTime: TimeStamp? = nil, tapeSizeInBytes: Int64? = nil, tapeStatus: String? = nil) {
            self.tapeARN = tapeARN
            self.tapeRecoveryPointTime = tapeRecoveryPointTime
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeStatus = tapeStatus
        }

        public func validate() throws {
            try validate(tapeARN, name:"tapeARN", max: 500)
            try validate(tapeARN, name:"tapeARN", min: 50)
            try validate(tapeARN, name:"tapeARN", pattern: "^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\\-0-9]+:[0-9]+:tape\\/[0-9A-Z]{7,16}$")
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case tapeRecoveryPointTime = "TapeRecoveryPointTime"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case tapeStatus = "TapeStatus"
        }
    }

    public struct UpdateBandwidthRateLimitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AverageDownloadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "AverageUploadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        /// The average download bandwidth rate limit in bits per second.
        public let averageDownloadRateLimitInBitsPerSec: Int64?
        /// The average upload bandwidth rate limit in bits per second.
        public let averageUploadRateLimitInBitsPerSec: Int64?
        public let gatewayARN: String

        public init(averageDownloadRateLimitInBitsPerSec: Int64? = nil, averageUploadRateLimitInBitsPerSec: Int64? = nil, gatewayARN: String) {
            self.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec
            self.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(averageDownloadRateLimitInBitsPerSec, name:"averageDownloadRateLimitInBitsPerSec", min: 102400)
            try validate(averageUploadRateLimitInBitsPerSec, name:"averageUploadRateLimitInBitsPerSec", min: 51200)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case averageDownloadRateLimitInBitsPerSec = "AverageDownloadRateLimitInBitsPerSec"
            case averageUploadRateLimitInBitsPerSec = "AverageUploadRateLimitInBitsPerSec"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateBandwidthRateLimitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateChapCredentialsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitiatorName", required: true, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateInitiator", required: true, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateTarget", required: false, type: .string), 
            AWSShapeMember(label: "TargetARN", required: true, type: .string)
        ]

        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String
        /// The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.  The secret key must be between 12 and 16 bytes when encoded in UTF-8. 
        public let secretToAuthenticateInitiator: String
        /// The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client). Byte constraints: Minimum bytes of 12. Maximum bytes of 16.  The secret key must be between 12 and 16 bytes when encoded in UTF-8. 
        public let secretToAuthenticateTarget: String?
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return the TargetARN for specified VolumeARN.
        public let targetARN: String

        public init(initiatorName: String, secretToAuthenticateInitiator: String, secretToAuthenticateTarget: String? = nil, targetARN: String) {
            self.initiatorName = initiatorName
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            self.secretToAuthenticateTarget = secretToAuthenticateTarget
            self.targetARN = targetARN
        }

        public func validate() throws {
            try validate(initiatorName, name:"initiatorName", max: 255)
            try validate(initiatorName, name:"initiatorName", min: 1)
            try validate(initiatorName, name:"initiatorName", pattern: "[0-9a-z:.-]+")
            try validate(secretToAuthenticateInitiator, name:"secretToAuthenticateInitiator", max: 100)
            try validate(secretToAuthenticateInitiator, name:"secretToAuthenticateInitiator", min: 1)
            try validate(secretToAuthenticateTarget, name:"secretToAuthenticateTarget", max: 100)
            try validate(secretToAuthenticateTarget, name:"secretToAuthenticateTarget", min: 1)
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case initiatorName = "InitiatorName"
            case secretToAuthenticateInitiator = "SecretToAuthenticateInitiator"
            case secretToAuthenticateTarget = "SecretToAuthenticateTarget"
            case targetARN = "TargetARN"
        }
    }

    public struct UpdateChapCredentialsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitiatorName", required: false, type: .string), 
            AWSShapeMember(label: "TargetARN", required: false, type: .string)
        ]

        /// The iSCSI initiator that connects to the target. This is the same initiator name specified in the request.
        public let initiatorName: String?
        /// The Amazon Resource Name (ARN) of the target. This is the same target specified in the request.
        public let targetARN: String?

        public init(initiatorName: String? = nil, targetARN: String? = nil) {
            self.initiatorName = initiatorName
            self.targetARN = targetARN
        }

        public func validate() throws {
            try validate(initiatorName, name:"initiatorName", max: 255)
            try validate(initiatorName, name:"initiatorName", min: 1)
            try validate(initiatorName, name:"initiatorName", pattern: "[0-9a-z:.-]+")
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case initiatorName = "InitiatorName"
            case targetARN = "TargetARN"
        }
    }

    public struct UpdateGatewayInformationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayTimezone", required: false, type: .string)
        ]

        public let gatewayARN: String
        public let gatewayName: String?
        /// A value that indicates the time zone of the gateway.
        public let gatewayTimezone: String?

        public init(gatewayARN: String, gatewayName: String? = nil, gatewayTimezone: String? = nil) {
            self.gatewayARN = gatewayARN
            self.gatewayName = gatewayName
            self.gatewayTimezone = gatewayTimezone
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(gatewayName, name:"gatewayName", max: 255)
            try validate(gatewayName, name:"gatewayName", min: 2)
            try validate(gatewayName, name:"gatewayName", pattern: "^[ -\\.0-\\[\\]-~]*[!-\\.0-\\[\\]-~][ -\\.0-\\[\\]-~]*$")
            try validate(gatewayTimezone, name:"gatewayTimezone", max: 10)
            try validate(gatewayTimezone, name:"gatewayTimezone", min: 3)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case gatewayName = "GatewayName"
            case gatewayTimezone = "GatewayTimezone"
        }
    }

    public struct UpdateGatewayInformationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "GatewayName", required: false, type: .string)
        ]

        public let gatewayARN: String?
        /// The name you configured for your gateway.
        public let gatewayName: String?

        public init(gatewayARN: String? = nil, gatewayName: String? = nil) {
            self.gatewayARN = gatewayARN
            self.gatewayName = gatewayName
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case gatewayName = "GatewayName"
        }
    }

    public struct UpdateGatewaySoftwareNowInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]

        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateGatewaySoftwareNowOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateMaintenanceStartTimeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DayOfMonth", required: false, type: .integer), 
            AWSShapeMember(label: "DayOfWeek", required: false, type: .integer), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "HourOfDay", required: true, type: .integer), 
            AWSShapeMember(label: "MinuteOfHour", required: true, type: .integer)
        ]

        /// The day of the month component of the maintenance start time represented as an ordinal number from 1 to 28, where 1 represents the first day of the month and 28 represents the last day of the month.  This value is only available for tape and volume gateways. 
        public let dayOfMonth: Int32?
        /// The day of the week component of the maintenance start time week represented as an ordinal number from 0 to 6, where 0 represents Sunday and 6 Saturday.
        public let dayOfWeek: Int32?
        public let gatewayARN: String
        /// The hour component of the maintenance start time represented as hh, where hh is the hour (00 to 23). The hour of the day is in the time zone of the gateway.
        public let hourOfDay: Int32
        /// The minute component of the maintenance start time represented as mm, where mm is the minute (00 to 59). The minute of the hour is in the time zone of the gateway.
        public let minuteOfHour: Int32

        public init(dayOfMonth: Int32? = nil, dayOfWeek: Int32? = nil, gatewayARN: String, hourOfDay: Int32, minuteOfHour: Int32) {
            self.dayOfMonth = dayOfMonth
            self.dayOfWeek = dayOfWeek
            self.gatewayARN = gatewayARN
            self.hourOfDay = hourOfDay
            self.minuteOfHour = minuteOfHour
        }

        public func validate() throws {
            try validate(dayOfMonth, name:"dayOfMonth", max: 28)
            try validate(dayOfMonth, name:"dayOfMonth", min: 1)
            try validate(dayOfWeek, name:"dayOfWeek", max: 6)
            try validate(dayOfWeek, name:"dayOfWeek", min: 0)
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(hourOfDay, name:"hourOfDay", max: 23)
            try validate(hourOfDay, name:"hourOfDay", min: 0)
            try validate(minuteOfHour, name:"minuteOfHour", max: 59)
            try validate(minuteOfHour, name:"minuteOfHour", min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfMonth = "DayOfMonth"
            case dayOfWeek = "DayOfWeek"
            case gatewayARN = "GatewayARN"
            case hourOfDay = "HourOfDay"
            case minuteOfHour = "MinuteOfHour"
        }
    }

    public struct UpdateMaintenanceStartTimeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateNFSFileShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientList", required: false, type: .list), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "FileShareARN", required: true, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "NFSFileShareDefaults", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "Squash", required: false, type: .string)
        ]

        /// The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks.
        public let clientList: [String]?
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// The Amazon Resource Name (ARN) of the file share to be updated. 
        public let fileShareARN: String
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional. 
        public let kMSEncrypted: Bool?
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional. 
        public let kMSKey: String?
        /// The default values for the file share. Optional.
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        /// A value that sets the access control list permission for objects in the S3 bucket that a file gateway puts objects into. The default value is "private".
        public let objectACL: ObjectACL?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?
        /// A value that sets who pays the cost of the request and the cost associated with data download from the S3 bucket. If this value is set to true, the requester pays the costs. Otherwise the S3 bucket owner pays. However, the S3 bucket owner always pays the cost of storing data.   RequesterPays is a configuration for the S3 bucket that backs the file share, so make sure that the configuration on the file share is the same as the S3 bucket configuration. 
        public let requesterPays: Bool?
        /// The user mapped to anonymous user. Valid options are the following:    RootSquash - Only root is mapped to anonymous user.    NoSquash - No one is mapped to anonymous user    AllSquash - Everyone is mapped to anonymous user.  
        public let squash: String?

        public init(clientList: [String]? = nil, defaultStorageClass: String? = nil, fileShareARN: String, guessMIMETypeEnabled: Bool? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, nFSFileShareDefaults: NFSFileShareDefaults? = nil, objectACL: ObjectACL? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, squash: String? = nil) {
            self.clientList = clientList
            self.defaultStorageClass = defaultStorageClass
            self.fileShareARN = fileShareARN
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.objectACL = objectACL
            self.readOnly = readOnly
            self.requesterPays = requesterPays
            self.squash = squash
        }

        public func validate() throws {
            try clientList?.forEach {
                try validate($0, name:"clientList[]", pattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))?$")
            }
            try validate(clientList, name:"clientList", max: 100)
            try validate(clientList, name:"clientList", min: 1)
            try validate(defaultStorageClass, name:"defaultStorageClass", max: 20)
            try validate(defaultStorageClass, name:"defaultStorageClass", min: 5)
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try nFSFileShareDefaults?.validate()
            try validate(squash, name:"squash", max: 15)
            try validate(squash, name:"squash", min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientList = "ClientList"
            case defaultStorageClass = "DefaultStorageClass"
            case fileShareARN = "FileShareARN"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case nFSFileShareDefaults = "NFSFileShareDefaults"
            case objectACL = "ObjectACL"
            case readOnly = "ReadOnly"
            case requesterPays = "RequesterPays"
            case squash = "Squash"
        }
    }

    public struct UpdateNFSFileShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the updated file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct UpdateSMBFileShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdminUserList", required: false, type: .list), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "FileShareARN", required: true, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "InvalidUserList", required: false, type: .list), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "SMBACLEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ValidUserList", required: false, type: .list)
        ]

        /// A list of users or groups in the Active Directory that have administrator rights to the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let adminUserList: [String]?
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// The Amazon Resource Name (ARN) of the SMB file share that you want to update.
        public let fileShareARN: String
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// A list of users or groups in the Active Directory that are not allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let invalidUserList: [String]?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// A value that sets the access control list permission for objects in the S3 bucket that a file gateway puts objects into. The default value is "private".
        public let objectACL: ObjectACL?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?
        /// A value that sets who pays the cost of the request and the cost associated with data download from the S3 bucket. If this value is set to true, the requester pays the costs. Otherwise the S3 bucket owner pays. However, the S3 bucket owner always pays the cost of storing data.   RequesterPays is a configuration for the S3 bucket that backs the file share, so make sure that the configuration on the file share is the same as the S3 bucket configuration. 
        public let requesterPays: Bool?
        /// Set this value to "true to enable ACL (access control list) on the SMB file share. Set it to "false" to map file and directory permissions to the POSIX permissions. For more information, see https://docs.aws.amazon.com/storagegateway/latest/userguide/smb-acl.htmlin the Storage Gateway User Guide.
        public let sMBACLEnabled: Bool?
        /// A list of users or groups in the Active Directory that are allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let validUserList: [String]?

        public init(adminUserList: [String]? = nil, defaultStorageClass: String? = nil, fileShareARN: String, guessMIMETypeEnabled: Bool? = nil, invalidUserList: [String]? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, objectACL: ObjectACL? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, sMBACLEnabled: Bool? = nil, validUserList: [String]? = nil) {
            self.adminUserList = adminUserList
            self.defaultStorageClass = defaultStorageClass
            self.fileShareARN = fileShareARN
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.invalidUserList = invalidUserList
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.objectACL = objectACL
            self.readOnly = readOnly
            self.requesterPays = requesterPays
            self.sMBACLEnabled = sMBACLEnabled
            self.validUserList = validUserList
        }

        public func validate() throws {
            try adminUserList?.forEach {
                try validate($0, name:"adminUserList[]", max: 64)
                try validate($0, name:"adminUserList[]", min: 1)
            }
            try validate(adminUserList, name:"adminUserList", max: 100)
            try validate(adminUserList, name:"adminUserList", min: 0)
            try validate(defaultStorageClass, name:"defaultStorageClass", max: 20)
            try validate(defaultStorageClass, name:"defaultStorageClass", min: 5)
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
            try invalidUserList?.forEach {
                try validate($0, name:"invalidUserList[]", max: 64)
                try validate($0, name:"invalidUserList[]", min: 1)
            }
            try validate(invalidUserList, name:"invalidUserList", max: 100)
            try validate(invalidUserList, name:"invalidUserList", min: 0)
            try validate(kMSKey, name:"kMSKey", max: 2048)
            try validate(kMSKey, name:"kMSKey", min: 7)
            try validUserList?.forEach {
                try validate($0, name:"validUserList[]", max: 64)
                try validate($0, name:"validUserList[]", min: 1)
            }
            try validate(validUserList, name:"validUserList", max: 100)
            try validate(validUserList, name:"validUserList", min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case adminUserList = "AdminUserList"
            case defaultStorageClass = "DefaultStorageClass"
            case fileShareARN = "FileShareARN"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case invalidUserList = "InvalidUserList"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case objectACL = "ObjectACL"
            case readOnly = "ReadOnly"
            case requesterPays = "RequesterPays"
            case sMBACLEnabled = "SMBACLEnabled"
            case validUserList = "ValidUserList"
        }
    }

    public struct UpdateSMBFileShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the updated SMB file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        public func validate() throws {
            try validate(fileShareARN, name:"fileShareARN", max: 500)
            try validate(fileShareARN, name:"fileShareARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct UpdateSMBSecurityStrategyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "SMBSecurityStrategy", required: true, type: .enum)
        ]

        public let gatewayARN: String
        /// Specifies the type of security strategy. ClientSpecified: SMBv1 is enabled, SMB signing is offered but not required, SMB encryption is offered but not required. MandatorySigning: SMBv1 is disabled, SMB signing is required, SMB encryption is offered but not required. MandatoryEncryption: SMBv1 is disabled, SMB signing is offered but not required, SMB encryption is required.
        public let sMBSecurityStrategy: SMBSecurityStrategy

        public init(gatewayARN: String, sMBSecurityStrategy: SMBSecurityStrategy) {
            self.gatewayARN = gatewayARN
            self.sMBSecurityStrategy = sMBSecurityStrategy
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case sMBSecurityStrategy = "SMBSecurityStrategy"
        }
    }

    public struct UpdateSMBSecurityStrategyOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]

        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateSnapshotScheduleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RecurrenceInHours", required: true, type: .integer), 
            AWSShapeMember(label: "StartAt", required: true, type: .integer), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]

        /// Optional description of the snapshot that overwrites the existing description.
        public let description: String?
        /// Frequency of snapshots. Specify the number of hours between snapshots.
        public let recurrenceInHours: Int32
        /// The hour of the day at which the snapshot schedule begins represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        public let startAt: Int32
        /// A list of up to 50 tags that can be assigned to a snapshot. Each tag is a key-value pair.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256. 
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(description: String? = nil, recurrenceInHours: Int32, startAt: Int32, tags: [Tag]? = nil, volumeARN: String) {
            self.description = description
            self.recurrenceInHours = recurrenceInHours
            self.startAt = startAt
            self.tags = tags
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(description, name:"description", max: 255)
            try validate(description, name:"description", min: 1)
            try validate(recurrenceInHours, name:"recurrenceInHours", max: 24)
            try validate(recurrenceInHours, name:"recurrenceInHours", min: 1)
            try validate(startAt, name:"startAt", max: 23)
            try validate(startAt, name:"startAt", min: 0)
            try tags?.forEach {
                try $0.validate()
            }
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case recurrenceInHours = "RecurrenceInHours"
            case startAt = "StartAt"
            case tags = "Tags"
            case volumeARN = "VolumeARN"
        }
    }

    public struct UpdateSnapshotScheduleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        public func validate() throws {
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct UpdateVTLDeviceTypeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceType", required: true, type: .string), 
            AWSShapeMember(label: "VTLDeviceARN", required: true, type: .string)
        ]

        /// The type of medium changer you want to select.  Valid Values: "STK-L700", "AWS-Gateway-VTL"
        public let deviceType: String
        /// The Amazon Resource Name (ARN) of the medium changer you want to select.
        public let vTLDeviceARN: String

        public init(deviceType: String, vTLDeviceARN: String) {
            self.deviceType = deviceType
            self.vTLDeviceARN = vTLDeviceARN
        }

        public func validate() throws {
            try validate(deviceType, name:"deviceType", max: 50)
            try validate(deviceType, name:"deviceType", min: 2)
            try validate(vTLDeviceARN, name:"vTLDeviceARN", max: 500)
            try validate(vTLDeviceARN, name:"vTLDeviceARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case deviceType = "DeviceType"
            case vTLDeviceARN = "VTLDeviceARN"
        }
    }

    public struct UpdateVTLDeviceTypeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VTLDeviceARN", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the medium changer you have selected.
        public let vTLDeviceARN: String?

        public init(vTLDeviceARN: String? = nil) {
            self.vTLDeviceARN = vTLDeviceARN
        }

        public func validate() throws {
            try validate(vTLDeviceARN, name:"vTLDeviceARN", max: 500)
            try validate(vTLDeviceARN, name:"vTLDeviceARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case vTLDeviceARN = "VTLDeviceARN"
        }
    }

    public struct VTLDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceiSCSIAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "VTLDeviceARN", required: false, type: .string), 
            AWSShapeMember(label: "VTLDeviceProductIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "VTLDeviceType", required: false, type: .string), 
            AWSShapeMember(label: "VTLDeviceVendor", required: false, type: .string)
        ]

        /// A list of iSCSI information about a VTL device.
        public let deviceiSCSIAttributes: DeviceiSCSIAttributes?
        /// Specifies the unique Amazon Resource Name (ARN) of the device (tape drive or media changer).
        public let vTLDeviceARN: String?
        /// Specifies the model number of device that the VTL device emulates.
        public let vTLDeviceProductIdentifier: String?
        /// Specifies the type of device that the VTL device emulates.
        public let vTLDeviceType: String?
        /// Specifies the vendor of the device that the VTL device object emulates.
        public let vTLDeviceVendor: String?

        public init(deviceiSCSIAttributes: DeviceiSCSIAttributes? = nil, vTLDeviceARN: String? = nil, vTLDeviceProductIdentifier: String? = nil, vTLDeviceType: String? = nil, vTLDeviceVendor: String? = nil) {
            self.deviceiSCSIAttributes = deviceiSCSIAttributes
            self.vTLDeviceARN = vTLDeviceARN
            self.vTLDeviceProductIdentifier = vTLDeviceProductIdentifier
            self.vTLDeviceType = vTLDeviceType
            self.vTLDeviceVendor = vTLDeviceVendor
        }

        public func validate() throws {
            try deviceiSCSIAttributes?.validate()
            try validate(vTLDeviceARN, name:"vTLDeviceARN", max: 500)
            try validate(vTLDeviceARN, name:"vTLDeviceARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case deviceiSCSIAttributes = "DeviceiSCSIAttributes"
            case vTLDeviceARN = "VTLDeviceARN"
            case vTLDeviceProductIdentifier = "VTLDeviceProductIdentifier"
            case vTLDeviceType = "VTLDeviceType"
            case vTLDeviceVendor = "VTLDeviceVendor"
        }
    }

    public struct VolumeInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeAttachmentStatus", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string)
        ]

        public let gatewayARN: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let gatewayId: String?
        /// The Amazon Resource Name (ARN) for the storage volume. For example, the following is a valid ARN:  arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB   Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeARN: String?
        /// One of the VolumeStatus values that indicates the state of the storage volume. 
        public let volumeAttachmentStatus: String?
        /// The unique identifier assigned to the volume. This ID becomes part of the volume Amazon Resource Name (ARN), which you use as input for other operations.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeId: String?
        /// The size of the volume in bytes. Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeSizeInBytes: Int64?
        /// One of the VolumeType enumeration values describing the type of the volume.
        public let volumeType: String?

        public init(gatewayARN: String? = nil, gatewayId: String? = nil, volumeARN: String? = nil, volumeAttachmentStatus: String? = nil, volumeId: String? = nil, volumeSizeInBytes: Int64? = nil, volumeType: String? = nil) {
            self.gatewayARN = gatewayARN
            self.gatewayId = gatewayId
            self.volumeARN = volumeARN
            self.volumeAttachmentStatus = volumeAttachmentStatus
            self.volumeId = volumeId
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeType = volumeType
        }

        public func validate() throws {
            try validate(gatewayARN, name:"gatewayARN", max: 500)
            try validate(gatewayARN, name:"gatewayARN", min: 50)
            try validate(gatewayId, name:"gatewayId", max: 30)
            try validate(gatewayId, name:"gatewayId", min: 12)
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
            try validate(volumeAttachmentStatus, name:"volumeAttachmentStatus", max: 50)
            try validate(volumeAttachmentStatus, name:"volumeAttachmentStatus", min: 3)
            try validate(volumeId, name:"volumeId", max: 30)
            try validate(volumeId, name:"volumeId", min: 12)
            try validate(volumeType, name:"volumeType", max: 100)
            try validate(volumeType, name:"volumeType", min: 3)
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case gatewayId = "GatewayId"
            case volumeARN = "VolumeARN"
            case volumeAttachmentStatus = "VolumeAttachmentStatus"
            case volumeId = "VolumeId"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case volumeType = "VolumeType"
        }
    }

    public struct VolumeRecoveryPointInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeRecoveryPointTime", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeUsageInBytes", required: false, type: .long)
        ]

        /// The Amazon Resource Name (ARN) of the volume target.
        public let volumeARN: String?
        /// The time the recovery point was taken.
        public let volumeRecoveryPointTime: String?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?
        /// The size of the data stored on the volume in bytes.  This value is not available for volumes created prior to May 13, 2015, until you store data on the volume. 
        public let volumeUsageInBytes: Int64?

        public init(volumeARN: String? = nil, volumeRecoveryPointTime: String? = nil, volumeSizeInBytes: Int64? = nil, volumeUsageInBytes: Int64? = nil) {
            self.volumeARN = volumeARN
            self.volumeRecoveryPointTime = volumeRecoveryPointTime
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeUsageInBytes = volumeUsageInBytes
        }

        public func validate() throws {
            try validate(volumeARN, name:"volumeARN", max: 500)
            try validate(volumeARN, name:"volumeARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
            case volumeRecoveryPointTime = "VolumeRecoveryPointTime"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case volumeUsageInBytes = "VolumeUsageInBytes"
        }
    }

    public struct VolumeiSCSIAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChapEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LunNumber", required: false, type: .integer), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfacePort", required: false, type: .integer), 
            AWSShapeMember(label: "TargetARN", required: false, type: .string)
        ]

        /// Indicates whether mutual CHAP is enabled for the iSCSI target.
        public let chapEnabled: Bool?
        /// The logical disk number.
        public let lunNumber: Int32?
        /// The network interface identifier.
        public let networkInterfaceId: String?
        /// The port used to communicate with iSCSI targets.
        public let networkInterfacePort: Int32?
        /// The Amazon Resource Name (ARN) of the volume target.
        public let targetARN: String?

        public init(chapEnabled: Bool? = nil, lunNumber: Int32? = nil, networkInterfaceId: String? = nil, networkInterfacePort: Int32? = nil, targetARN: String? = nil) {
            self.chapEnabled = chapEnabled
            self.lunNumber = lunNumber
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePort = networkInterfacePort
            self.targetARN = targetARN
        }

        public func validate() throws {
            try validate(lunNumber, name:"lunNumber", min: 1)
            try validate(networkInterfaceId, name:"networkInterfaceId", pattern: "\\A(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}\\z")
            try validate(targetARN, name:"targetARN", max: 800)
            try validate(targetARN, name:"targetARN", min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case chapEnabled = "ChapEnabled"
            case lunNumber = "LunNumber"
            case networkInterfaceId = "NetworkInterfaceId"
            case networkInterfacePort = "NetworkInterfacePort"
            case targetARN = "TargetARN"
        }
    }
}
