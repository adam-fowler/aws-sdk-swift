// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore
import NIO

/**
AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur.
*/
public struct IoTEvents {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "iotevents",
            serviceProtocol: ServiceProtocol(type: .restjson),
            apiVersion: "2018-07-27",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [IoTEventsErrorType.self]
        )
    }

    ///  Creates a detector model.
    public func createDetectorModel(_ input: CreateDetectorModelRequest) throws -> Future<CreateDetectorModelResponse> {
        return try client.send(operation: "CreateDetectorModel", path: "/detector-models", httpMethod: "POST", input: input)
    }

    ///  Creates an input.
    public func createInput(_ input: CreateInputRequest) throws -> Future<CreateInputResponse> {
        return try client.send(operation: "CreateInput", path: "/inputs", httpMethod: "POST", input: input)
    }

    ///  Deletes a detector model. Any active instances of the detector model are also deleted.
    public func deleteDetectorModel(_ input: DeleteDetectorModelRequest) throws -> Future<DeleteDetectorModelResponse> {
        return try client.send(operation: "DeleteDetectorModel", path: "/detector-models/{detectorModelName}", httpMethod: "DELETE", input: input)
    }

    ///  Deletes an input.
    public func deleteInput(_ input: DeleteInputRequest) throws -> Future<DeleteInputResponse> {
        return try client.send(operation: "DeleteInput", path: "/inputs/{inputName}", httpMethod: "DELETE", input: input)
    }

    ///  Describes a detector model. If the version parameter is not specified, information about the latest version is returned.
    public func describeDetectorModel(_ input: DescribeDetectorModelRequest) throws -> Future<DescribeDetectorModelResponse> {
        return try client.send(operation: "DescribeDetectorModel", path: "/detector-models/{detectorModelName}", httpMethod: "GET", input: input)
    }

    ///  Describes an input.
    public func describeInput(_ input: DescribeInputRequest) throws -> Future<DescribeInputResponse> {
        return try client.send(operation: "DescribeInput", path: "/inputs/{inputName}", httpMethod: "GET", input: input)
    }

    ///  Retrieves the current settings of the AWS IoT Events logging options.
    public func describeLoggingOptions(_ input: DescribeLoggingOptionsRequest) throws -> Future<DescribeLoggingOptionsResponse> {
        return try client.send(operation: "DescribeLoggingOptions", path: "/logging", httpMethod: "GET", input: input)
    }

    ///  Lists all the versions of a detector model. Only the metadata associated with each detector model version is returned.
    public func listDetectorModelVersions(_ input: ListDetectorModelVersionsRequest) throws -> Future<ListDetectorModelVersionsResponse> {
        return try client.send(operation: "ListDetectorModelVersions", path: "/detector-models/{detectorModelName}/versions", httpMethod: "GET", input: input)
    }

    ///  Lists the detector models you have created. Only the metadata associated with each detector model is returned.
    public func listDetectorModels(_ input: ListDetectorModelsRequest) throws -> Future<ListDetectorModelsResponse> {
        return try client.send(operation: "ListDetectorModels", path: "/detector-models", httpMethod: "GET", input: input)
    }

    ///  Lists the inputs you have created.
    public func listInputs(_ input: ListInputsRequest) throws -> Future<ListInputsResponse> {
        return try client.send(operation: "ListInputs", path: "/inputs", httpMethod: "GET", input: input)
    }

    ///  Lists the tags (metadata) you have assigned to the resource.
    public func listTagsForResource(_ input: ListTagsForResourceRequest) throws -> Future<ListTagsForResourceResponse> {
        return try client.send(operation: "ListTagsForResource", path: "/tags", httpMethod: "GET", input: input)
    }

    ///  Sets or updates the AWS IoT Events logging options. Note that if you update the value of any loggingOptions field, it takes up to one minute for the change to take effect. Also, if you change the policy attached to the role you specified in the roleArn field (for example, to correct an invalid policy) it takes up to five minutes for that change to take effect.
    @discardableResult public func putLoggingOptions(_ input: PutLoggingOptionsRequest) throws -> Future<Void> {
        return try client.send(operation: "PutLoggingOptions", path: "/logging", httpMethod: "PUT", input: input)
    }

    ///  Add to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
    public func tagResource(_ input: TagResourceRequest) throws -> Future<TagResourceResponse> {
        return try client.send(operation: "TagResource", path: "/tags", httpMethod: "POST", input: input)
    }

    ///  Removes the given tags (metadata) from the resource.
    public func untagResource(_ input: UntagResourceRequest) throws -> Future<UntagResourceResponse> {
        return try client.send(operation: "UntagResource", path: "/tags", httpMethod: "DELETE", input: input)
    }

    ///  Updates a detector model. Detectors (instances) spawned by the previous version will be deleted and re-created as new inputs arrive.
    public func updateDetectorModel(_ input: UpdateDetectorModelRequest) throws -> Future<UpdateDetectorModelResponse> {
        return try client.send(operation: "UpdateDetectorModel", path: "/detector-models/{detectorModelName}", httpMethod: "POST", input: input)
    }

    ///  Updates an input.
    public func updateInput(_ input: UpdateInputRequest) throws -> Future<UpdateInputResponse> {
        return try client.send(operation: "UpdateInput", path: "/inputs/{inputName}", httpMethod: "PUT", input: input)
    }
}
