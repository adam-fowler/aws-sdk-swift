// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

/// Error enum for SES
public enum SESErrorType: AWSErrorType {
    case accountSendingPausedException(message: String?)
    case alreadyExistsException(message: String?)
    case cannotDeleteException(message: String?)
    case configurationSetAlreadyExistsException(message: String?)
    case configurationSetDoesNotExistException(message: String?)
    case configurationSetSendingPausedException(message: String?)
    case customVerificationEmailInvalidContentException(message: String?)
    case customVerificationEmailTemplateAlreadyExistsException(message: String?)
    case customVerificationEmailTemplateDoesNotExistException(message: String?)
    case eventDestinationAlreadyExistsException(message: String?)
    case eventDestinationDoesNotExistException(message: String?)
    case fromEmailAddressNotVerifiedException(message: String?)
    case invalidCloudWatchDestinationException(message: String?)
    case invalidConfigurationSetException(message: String?)
    case invalidDeliveryOptionsException(message: String?)
    case invalidFirehoseDestinationException(message: String?)
    case invalidLambdaFunctionException(message: String?)
    case invalidPolicyException(message: String?)
    case invalidRenderingParameterException(message: String?)
    case invalidS3ConfigurationException(message: String?)
    case invalidSNSDestinationException(message: String?)
    case invalidSnsTopicException(message: String?)
    case invalidTemplateException(message: String?)
    case invalidTrackingOptionsException(message: String?)
    case limitExceededException(message: String?)
    case mailFromDomainNotVerifiedException(message: String?)
    case messageRejected(message: String?)
    case missingRenderingAttributeException(message: String?)
    case productionAccessNotGrantedException(message: String?)
    case ruleDoesNotExistException(message: String?)
    case ruleSetDoesNotExistException(message: String?)
    case templateDoesNotExistException(message: String?)
    case trackingOptionsAlreadyExistsException(message: String?)
    case trackingOptionsDoesNotExistException(message: String?)
}

extension SESErrorType {
    public init?(errorCode: String, message: String?){
        var errorCode = errorCode
        if let index = errorCode.index(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AccountSendingPausedException":
            self = .accountSendingPausedException(message: message)
        case "AlreadyExistsException":
            self = .alreadyExistsException(message: message)
        case "CannotDeleteException":
            self = .cannotDeleteException(message: message)
        case "ConfigurationSetAlreadyExistsException":
            self = .configurationSetAlreadyExistsException(message: message)
        case "ConfigurationSetDoesNotExistException":
            self = .configurationSetDoesNotExistException(message: message)
        case "ConfigurationSetSendingPausedException":
            self = .configurationSetSendingPausedException(message: message)
        case "CustomVerificationEmailInvalidContentException":
            self = .customVerificationEmailInvalidContentException(message: message)
        case "CustomVerificationEmailTemplateAlreadyExistsException":
            self = .customVerificationEmailTemplateAlreadyExistsException(message: message)
        case "CustomVerificationEmailTemplateDoesNotExistException":
            self = .customVerificationEmailTemplateDoesNotExistException(message: message)
        case "EventDestinationAlreadyExistsException":
            self = .eventDestinationAlreadyExistsException(message: message)
        case "EventDestinationDoesNotExistException":
            self = .eventDestinationDoesNotExistException(message: message)
        case "FromEmailAddressNotVerifiedException":
            self = .fromEmailAddressNotVerifiedException(message: message)
        case "InvalidCloudWatchDestinationException":
            self = .invalidCloudWatchDestinationException(message: message)
        case "InvalidConfigurationSetException":
            self = .invalidConfigurationSetException(message: message)
        case "InvalidDeliveryOptionsException":
            self = .invalidDeliveryOptionsException(message: message)
        case "InvalidFirehoseDestinationException":
            self = .invalidFirehoseDestinationException(message: message)
        case "InvalidLambdaFunctionException":
            self = .invalidLambdaFunctionException(message: message)
        case "InvalidPolicyException":
            self = .invalidPolicyException(message: message)
        case "InvalidRenderingParameterException":
            self = .invalidRenderingParameterException(message: message)
        case "InvalidS3ConfigurationException":
            self = .invalidS3ConfigurationException(message: message)
        case "InvalidSNSDestinationException":
            self = .invalidSNSDestinationException(message: message)
        case "InvalidSnsTopicException":
            self = .invalidSnsTopicException(message: message)
        case "InvalidTemplateException":
            self = .invalidTemplateException(message: message)
        case "InvalidTrackingOptionsException":
            self = .invalidTrackingOptionsException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "MailFromDomainNotVerifiedException":
            self = .mailFromDomainNotVerifiedException(message: message)
        case "MessageRejected":
            self = .messageRejected(message: message)
        case "MissingRenderingAttributeException":
            self = .missingRenderingAttributeException(message: message)
        case "ProductionAccessNotGrantedException":
            self = .productionAccessNotGrantedException(message: message)
        case "RuleDoesNotExistException":
            self = .ruleDoesNotExistException(message: message)
        case "RuleSetDoesNotExistException":
            self = .ruleSetDoesNotExistException(message: message)
        case "TemplateDoesNotExistException":
            self = .templateDoesNotExistException(message: message)
        case "TrackingOptionsAlreadyExistsException":
            self = .trackingOptionsAlreadyExistsException(message: message)
        case "TrackingOptionsDoesNotExistException":
            self = .trackingOptionsDoesNotExistException(message: message)
        default:
            return nil
        }
    }
}

extension SESErrorType : CustomStringConvertible {
    public var description : String {
        switch self {
        case .accountSendingPausedException(let message):
            return "AccountSendingPausedException: \(message ?? "")"
        case .alreadyExistsException(let message):
            return "AlreadyExistsException: \(message ?? "")"
        case .cannotDeleteException(let message):
            return "CannotDeleteException: \(message ?? "")"
        case .configurationSetAlreadyExistsException(let message):
            return "ConfigurationSetAlreadyExistsException: \(message ?? "")"
        case .configurationSetDoesNotExistException(let message):
            return "ConfigurationSetDoesNotExistException: \(message ?? "")"
        case .configurationSetSendingPausedException(let message):
            return "ConfigurationSetSendingPausedException: \(message ?? "")"
        case .customVerificationEmailInvalidContentException(let message):
            return "CustomVerificationEmailInvalidContentException: \(message ?? "")"
        case .customVerificationEmailTemplateAlreadyExistsException(let message):
            return "CustomVerificationEmailTemplateAlreadyExistsException: \(message ?? "")"
        case .customVerificationEmailTemplateDoesNotExistException(let message):
            return "CustomVerificationEmailTemplateDoesNotExistException: \(message ?? "")"
        case .eventDestinationAlreadyExistsException(let message):
            return "EventDestinationAlreadyExistsException: \(message ?? "")"
        case .eventDestinationDoesNotExistException(let message):
            return "EventDestinationDoesNotExistException: \(message ?? "")"
        case .fromEmailAddressNotVerifiedException(let message):
            return "FromEmailAddressNotVerifiedException: \(message ?? "")"
        case .invalidCloudWatchDestinationException(let message):
            return "InvalidCloudWatchDestinationException: \(message ?? "")"
        case .invalidConfigurationSetException(let message):
            return "InvalidConfigurationSetException: \(message ?? "")"
        case .invalidDeliveryOptionsException(let message):
            return "InvalidDeliveryOptionsException: \(message ?? "")"
        case .invalidFirehoseDestinationException(let message):
            return "InvalidFirehoseDestinationException: \(message ?? "")"
        case .invalidLambdaFunctionException(let message):
            return "InvalidLambdaFunctionException: \(message ?? "")"
        case .invalidPolicyException(let message):
            return "InvalidPolicyException: \(message ?? "")"
        case .invalidRenderingParameterException(let message):
            return "InvalidRenderingParameterException: \(message ?? "")"
        case .invalidS3ConfigurationException(let message):
            return "InvalidS3ConfigurationException: \(message ?? "")"
        case .invalidSNSDestinationException(let message):
            return "InvalidSNSDestinationException: \(message ?? "")"
        case .invalidSnsTopicException(let message):
            return "InvalidSnsTopicException: \(message ?? "")"
        case .invalidTemplateException(let message):
            return "InvalidTemplateException: \(message ?? "")"
        case .invalidTrackingOptionsException(let message):
            return "InvalidTrackingOptionsException: \(message ?? "")"
        case .limitExceededException(let message):
            return "LimitExceededException: \(message ?? "")"
        case .mailFromDomainNotVerifiedException(let message):
            return "MailFromDomainNotVerifiedException: \(message ?? "")"
        case .messageRejected(let message):
            return "MessageRejected: \(message ?? "")"
        case .missingRenderingAttributeException(let message):
            return "MissingRenderingAttributeException: \(message ?? "")"
        case .productionAccessNotGrantedException(let message):
            return "ProductionAccessNotGrantedException: \(message ?? "")"
        case .ruleDoesNotExistException(let message):
            return "RuleDoesNotExistException: \(message ?? "")"
        case .ruleSetDoesNotExistException(let message):
            return "RuleSetDoesNotExistException: \(message ?? "")"
        case .templateDoesNotExistException(let message):
            return "TemplateDoesNotExistException: \(message ?? "")"
        case .trackingOptionsAlreadyExistsException(let message):
            return "TrackingOptionsAlreadyExistsException: \(message ?? "")"
        case .trackingOptionsDoesNotExistException(let message):
            return "TrackingOptionsDoesNotExistException: \(message ?? "")"
        }
    }
}
