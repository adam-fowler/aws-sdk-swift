// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

/// Error enum for ELB
public enum ELBErrorType: AWSErrorType {
    case accessPointNotFoundException(message: String?)
    case certificateNotFoundException(message: String?)
    case dependencyThrottleException(message: String?)
    case duplicateAccessPointNameException(message: String?)
    case duplicateListenerException(message: String?)
    case duplicatePolicyNameException(message: String?)
    case duplicateTagKeysException(message: String?)
    case invalidConfigurationRequestException(message: String?)
    case invalidEndPointException(message: String?)
    case invalidSchemeException(message: String?)
    case invalidSecurityGroupException(message: String?)
    case invalidSubnetException(message: String?)
    case listenerNotFoundException(message: String?)
    case loadBalancerAttributeNotFoundException(message: String?)
    case operationNotPermittedException(message: String?)
    case policyNotFoundException(message: String?)
    case policyTypeNotFoundException(message: String?)
    case subnetNotFoundException(message: String?)
    case tooManyAccessPointsException(message: String?)
    case tooManyPoliciesException(message: String?)
    case tooManyTagsException(message: String?)
    case unsupportedProtocolException(message: String?)
}

extension ELBErrorType {
    public init?(errorCode: String, message: String?){
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AccessPointNotFoundException":
            self = .accessPointNotFoundException(message: message)
        case "CertificateNotFoundException":
            self = .certificateNotFoundException(message: message)
        case "DependencyThrottleException":
            self = .dependencyThrottleException(message: message)
        case "DuplicateAccessPointNameException":
            self = .duplicateAccessPointNameException(message: message)
        case "DuplicateListenerException":
            self = .duplicateListenerException(message: message)
        case "DuplicatePolicyNameException":
            self = .duplicatePolicyNameException(message: message)
        case "DuplicateTagKeysException":
            self = .duplicateTagKeysException(message: message)
        case "InvalidConfigurationRequestException":
            self = .invalidConfigurationRequestException(message: message)
        case "InvalidEndPointException":
            self = .invalidEndPointException(message: message)
        case "InvalidSchemeException":
            self = .invalidSchemeException(message: message)
        case "InvalidSecurityGroupException":
            self = .invalidSecurityGroupException(message: message)
        case "InvalidSubnetException":
            self = .invalidSubnetException(message: message)
        case "ListenerNotFoundException":
            self = .listenerNotFoundException(message: message)
        case "LoadBalancerAttributeNotFoundException":
            self = .loadBalancerAttributeNotFoundException(message: message)
        case "OperationNotPermittedException":
            self = .operationNotPermittedException(message: message)
        case "PolicyNotFoundException":
            self = .policyNotFoundException(message: message)
        case "PolicyTypeNotFoundException":
            self = .policyTypeNotFoundException(message: message)
        case "SubnetNotFoundException":
            self = .subnetNotFoundException(message: message)
        case "TooManyAccessPointsException":
            self = .tooManyAccessPointsException(message: message)
        case "TooManyPoliciesException":
            self = .tooManyPoliciesException(message: message)
        case "TooManyTagsException":
            self = .tooManyTagsException(message: message)
        case "UnsupportedProtocolException":
            self = .unsupportedProtocolException(message: message)
        default:
            return nil
        }
    }
}

extension ELBErrorType : CustomStringConvertible {
    public var description : String {
        switch self {
        case .accessPointNotFoundException(let message):
            return "AccessPointNotFoundException: \(message ?? "")"
        case .certificateNotFoundException(let message):
            return "CertificateNotFoundException: \(message ?? "")"
        case .dependencyThrottleException(let message):
            return "DependencyThrottleException: \(message ?? "")"
        case .duplicateAccessPointNameException(let message):
            return "DuplicateAccessPointNameException: \(message ?? "")"
        case .duplicateListenerException(let message):
            return "DuplicateListenerException: \(message ?? "")"
        case .duplicatePolicyNameException(let message):
            return "DuplicatePolicyNameException: \(message ?? "")"
        case .duplicateTagKeysException(let message):
            return "DuplicateTagKeysException: \(message ?? "")"
        case .invalidConfigurationRequestException(let message):
            return "InvalidConfigurationRequestException: \(message ?? "")"
        case .invalidEndPointException(let message):
            return "InvalidEndPointException: \(message ?? "")"
        case .invalidSchemeException(let message):
            return "InvalidSchemeException: \(message ?? "")"
        case .invalidSecurityGroupException(let message):
            return "InvalidSecurityGroupException: \(message ?? "")"
        case .invalidSubnetException(let message):
            return "InvalidSubnetException: \(message ?? "")"
        case .listenerNotFoundException(let message):
            return "ListenerNotFoundException: \(message ?? "")"
        case .loadBalancerAttributeNotFoundException(let message):
            return "LoadBalancerAttributeNotFoundException: \(message ?? "")"
        case .operationNotPermittedException(let message):
            return "OperationNotPermittedException: \(message ?? "")"
        case .policyNotFoundException(let message):
            return "PolicyNotFoundException: \(message ?? "")"
        case .policyTypeNotFoundException(let message):
            return "PolicyTypeNotFoundException: \(message ?? "")"
        case .subnetNotFoundException(let message):
            return "SubnetNotFoundException: \(message ?? "")"
        case .tooManyAccessPointsException(let message):
            return "TooManyAccessPointsException: \(message ?? "")"
        case .tooManyPoliciesException(let message):
            return "TooManyPoliciesException: \(message ?? "")"
        case .tooManyTagsException(let message):
            return "TooManyTagsException: \(message ?? "")"
        case .unsupportedProtocolException(let message):
            return "UnsupportedProtocolException: \(message ?? "")"
        }
    }
}
