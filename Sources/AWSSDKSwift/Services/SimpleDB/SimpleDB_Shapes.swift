// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension SimpleDB {

    public struct Attribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlternateNameEncoding", required: false, type: .string), 
            AWSShapeMember(label: "AlternateValueEncoding", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        public let alternateNameEncoding: String?
        public let alternateValueEncoding: String?
        /// The name of the attribute.
        public let name: String
        /// The value of the attribute.
        public let value: String

        public init(alternateNameEncoding: String? = nil, alternateValueEncoding: String? = nil, name: String, value: String) {
            self.alternateNameEncoding = alternateNameEncoding
            self.alternateValueEncoding = alternateValueEncoding
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case alternateNameEncoding = "AlternateNameEncoding"
            case alternateValueEncoding = "AlternateValueEncoding"
            case name = "Name"
            case value = "Value"
        }
    }

    public struct BatchDeleteAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        /// The name of the domain in which the attributes are being deleted.
        public let domainName: String
        public let item: [DeletableItem]?

        public init(domainName: String, item: [DeletableItem]? = nil) {
            self.domainName = domainName
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case item = "Item"
        }
    }

    public struct BatchPutAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        /// The name of the domain in which the attributes are being stored.
        public let domainName: String
        public let item: [ReplaceableItem]?

        public init(domainName: String, item: [ReplaceableItem]? = nil) {
            self.domainName = domainName
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case item = "Item"
        }
    }

    public struct CreateDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, '_', '-', and '.'.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct DeletableAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The name of the attribute.
        public let name: String
        /// The value of the attribute.
        public let value: String?

        public init(name: String, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct DeletableItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "ItemName"), required: true, type: .string)
        ]
        public let attribute: [DeletableAttribute]?
        public let name: String

        public init(attribute: [DeletableAttribute]? = nil, name: String) {
            self.attribute = attribute
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case name = "ItemName"
        }
    }

    public struct DeleteAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .list), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Expected", required: false, type: .structure), 
            AWSShapeMember(label: "ItemName", required: true, type: .string)
        ]
        public let attribute: [DeletableAttribute]?
        /// The name of the domain in which to perform the operation.
        public let domainName: String
        /// The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.
        public let expected: UpdateCondition?
        /// The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.
        public let itemName: String

        public init(attribute: [DeletableAttribute]? = nil, domainName: String, expected: UpdateCondition? = nil, itemName: String) {
            self.attribute = attribute
            self.domainName = domainName
            self.expected = expected
            self.itemName = itemName
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case domainName = "DomainName"
            case expected = "Expected"
            case itemName = "ItemName"
        }
    }

    public struct DeleteDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// The name of the domain to delete.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct DomainMetadataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// The name of the domain for which to display the metadata of.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct DomainMetadataResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeNameCount", required: false, type: .integer), 
            AWSShapeMember(label: "AttributeNamesSizeBytes", required: false, type: .long), 
            AWSShapeMember(label: "AttributeValueCount", required: false, type: .integer), 
            AWSShapeMember(label: "AttributeValuesSizeBytes", required: false, type: .long), 
            AWSShapeMember(label: "ItemCount", required: false, type: .integer), 
            AWSShapeMember(label: "ItemNamesSizeBytes", required: false, type: .long), 
            AWSShapeMember(label: "Timestamp", required: false, type: .integer)
        ]
        /// The number of unique attribute names in the domain.
        public let attributeNameCount: Int32?
        /// The total size of all unique attribute names in the domain, in bytes.
        public let attributeNamesSizeBytes: Int64?
        /// The number of all attribute name/value pairs in the domain.
        public let attributeValueCount: Int32?
        /// The total size of all attribute values in the domain, in bytes.
        public let attributeValuesSizeBytes: Int64?
        /// The number of all items in the domain.
        public let itemCount: Int32?
        /// The total size of all item names in the domain, in bytes.
        public let itemNamesSizeBytes: Int64?
        /// The data and time when metadata was calculated, in Epoch (UNIX) seconds.
        public let timestamp: Int32?

        public init(attributeNameCount: Int32? = nil, attributeNamesSizeBytes: Int64? = nil, attributeValueCount: Int32? = nil, attributeValuesSizeBytes: Int64? = nil, itemCount: Int32? = nil, itemNamesSizeBytes: Int64? = nil, timestamp: Int32? = nil) {
            self.attributeNameCount = attributeNameCount
            self.attributeNamesSizeBytes = attributeNamesSizeBytes
            self.attributeValueCount = attributeValueCount
            self.attributeValuesSizeBytes = attributeValuesSizeBytes
            self.itemCount = itemCount
            self.itemNamesSizeBytes = itemNamesSizeBytes
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNameCount = "AttributeNameCount"
            case attributeNamesSizeBytes = "AttributeNamesSizeBytes"
            case attributeValueCount = "AttributeValueCount"
            case attributeValuesSizeBytes = "AttributeValuesSizeBytes"
            case itemCount = "ItemCount"
            case itemNamesSizeBytes = "ItemNamesSizeBytes"
            case timestamp = "Timestamp"
        }
    }

    public struct GetAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .list), 
            AWSShapeMember(label: "ConsistentRead", required: false, type: .boolean), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "ItemName", required: true, type: .string)
        ]
        public let attributeName: [String]?
        /// Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If true, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
        public let consistentRead: Bool?
        /// The name of the domain in which to perform the operation.
        public let domainName: String
        /// The name of the item.
        public let itemName: String

        public init(attributeName: [String]? = nil, consistentRead: Bool? = nil, domainName: String, itemName: String) {
            self.attributeName = attributeName
            self.consistentRead = consistentRead
            self.domainName = domainName
            self.itemName = itemName
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case consistentRead = "ConsistentRead"
            case domainName = "DomainName"
            case itemName = "ItemName"
        }
    }

    public struct GetAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .list)
        ]
        public let attribute: [Attribute]?

        public init(attribute: [Attribute]? = nil) {
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
        }
    }

    public struct Item: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlternateNameEncoding", required: false, type: .string), 
            AWSShapeMember(label: "Attribute", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        public let alternateNameEncoding: String?
        public let attribute: [Attribute]?
        /// The name of the item.
        public let name: String

        public init(alternateNameEncoding: String? = nil, attribute: [Attribute]? = nil, name: String) {
            self.alternateNameEncoding = alternateNameEncoding
            self.attribute = attribute
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case alternateNameEncoding = "AlternateNameEncoding"
            case attribute = "Attribute"
            case name = "Name"
        }
    }

    public struct ListDomainsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxNumberOfDomains", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.
        public let maxNumberOfDomains: Int32?
        /// A string informing Amazon SimpleDB where to start the next list of domain names.
        public let nextToken: String?

        public init(maxNumberOfDomains: Int32? = nil, nextToken: String? = nil) {
            self.maxNumberOfDomains = maxNumberOfDomains
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxNumberOfDomains = "MaxNumberOfDomains"
            case nextToken = "NextToken"
        }
    }

    public struct ListDomainsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let domainName: [String]?
        /// An opaque token indicating that there are more domains than the specified MaxNumberOfDomains still available.
        public let nextToken: String?

        public init(domainName: [String]? = nil, nextToken: String? = nil) {
            self.domainName = domainName
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case nextToken = "NextToken"
        }
    }

    public struct PutAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .list), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Expected", required: false, type: .structure), 
            AWSShapeMember(label: "ItemName", required: true, type: .string)
        ]
        public let attribute: [ReplaceableAttribute]?
        /// The name of the domain in which to perform the operation.
        public let domainName: String
        /// The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.
        public let expected: UpdateCondition?
        /// The name of the item.
        public let itemName: String

        public init(attribute: [ReplaceableAttribute]? = nil, domainName: String, expected: UpdateCondition? = nil, itemName: String) {
            self.attribute = attribute
            self.domainName = domainName
            self.expected = expected
            self.itemName = itemName
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case domainName = "DomainName"
            case expected = "Expected"
            case itemName = "ItemName"
        }
    }

    public struct ReplaceableAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Replace", required: false, type: .boolean), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// The name of the replaceable attribute.
        public let name: String
        /// A flag specifying whether or not to replace the attribute/value pair or to add a new attribute/value pair. The default setting is false.
        public let replace: Bool?
        /// The value of the replaceable attribute.
        public let value: String

        public init(name: String, replace: Bool? = nil, value: String) {
            self.name = name
            self.replace = replace
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case replace = "Replace"
            case value = "Value"
        }
    }

    public struct ReplaceableItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "ItemName"), required: true, type: .string)
        ]
        public let attribute: [ReplaceableAttribute]?
        /// The name of the replaceable item.
        public let name: String

        public init(attribute: [ReplaceableAttribute]? = nil, name: String) {
            self.attribute = attribute
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case name = "ItemName"
        }
    }

    public struct SelectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistentRead", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SelectExpression", required: true, type: .string)
        ]
        /// Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If true, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
        public let consistentRead: Bool?
        /// A string informing Amazon SimpleDB where to start the next list of ItemNames.
        public let nextToken: String?
        /// The expression used to query the domain.
        public let selectExpression: String

        public init(consistentRead: Bool? = nil, nextToken: String? = nil, selectExpression: String) {
            self.consistentRead = consistentRead
            self.nextToken = nextToken
            self.selectExpression = selectExpression
        }

        private enum CodingKeys: String, CodingKey {
            case consistentRead = "ConsistentRead"
            case nextToken = "NextToken"
            case selectExpression = "SelectExpression"
        }
    }

    public struct SelectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let item: [Item]?
        /// An opaque token indicating that more items than MaxNumberOfItems were matched, the response size exceeded 1 megabyte, or the execution time exceeded 5 seconds.
        public let nextToken: String?

        public init(item: [Item]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateCondition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Exists", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify true if the attribute must exist for the update condition to be satisfied. Specify false if the attribute should not exist in order for the update condition to be satisfied.
        public let exists: Bool?
        /// The name of the attribute involved in the condition.
        public let name: String?
        /// The value of an attribute. This value can only be specified when the Exists parameter is equal to true.
        public let value: String?

        public init(exists: Bool? = nil, name: String? = nil, value: String? = nil) {
            self.exists = exists
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case exists = "Exists"
            case name = "Name"
            case value = "Value"
        }
    }

}