// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension KinesisVideoArchivedMedia {

    public enum ContainerFormat: String, CustomStringConvertible, Codable {
        case fragmentedMp4 = "FRAGMENTED_MP4"
        case mpegTs = "MPEG_TS"
        public var description: String { return self.rawValue }
    }

    public enum DiscontinuityMode: String, CustomStringConvertible, Codable {
        case always = "ALWAYS"
        case never = "NEVER"
        public var description: String { return self.rawValue }
    }

    public enum DisplayFragmentTimestamp: String, CustomStringConvertible, Codable {
        case always = "ALWAYS"
        case never = "NEVER"
        public var description: String { return self.rawValue }
    }

    public struct Fragment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FragmentLengthInMilliseconds", required: false, type: .long), 
            AWSShapeMember(label: "FragmentNumber", required: false, type: .string), 
            AWSShapeMember(label: "FragmentSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "ProducerTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ServerTimestamp", required: false, type: .timestamp)
        ]
        /// The playback duration or other time value associated with the fragment.
        public let fragmentLengthInMilliseconds: Int64?
        /// The index value of the fragment.
        public let fragmentNumber: String?
        /// The total fragment size, including information about the fragment and contained media data.
        public let fragmentSizeInBytes: Int64?
        /// The timestamp from the producer corresponding to the fragment.
        public let producerTimestamp: TimeStamp?
        /// The timestamp from the AWS server corresponding to the fragment.
        public let serverTimestamp: TimeStamp?

        public init(fragmentLengthInMilliseconds: Int64? = nil, fragmentNumber: String? = nil, fragmentSizeInBytes: Int64? = nil, producerTimestamp: TimeStamp? = nil, serverTimestamp: TimeStamp? = nil) {
            self.fragmentLengthInMilliseconds = fragmentLengthInMilliseconds
            self.fragmentNumber = fragmentNumber
            self.fragmentSizeInBytes = fragmentSizeInBytes
            self.producerTimestamp = producerTimestamp
            self.serverTimestamp = serverTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case fragmentLengthInMilliseconds = "FragmentLengthInMilliseconds"
            case fragmentNumber = "FragmentNumber"
            case fragmentSizeInBytes = "FragmentSizeInBytes"
            case producerTimestamp = "ProducerTimestamp"
            case serverTimestamp = "ServerTimestamp"
        }
    }

    public struct FragmentSelector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FragmentSelectorType", required: true, type: .enum), 
            AWSShapeMember(label: "TimestampRange", required: true, type: .structure)
        ]
        /// The origin of the timestamps to use (Server or Producer).
        public let fragmentSelectorType: FragmentSelectorType
        /// The range of timestamps to return.
        public let timestampRange: TimestampRange

        public init(fragmentSelectorType: FragmentSelectorType, timestampRange: TimestampRange) {
            self.fragmentSelectorType = fragmentSelectorType
            self.timestampRange = timestampRange
        }

        private enum CodingKeys: String, CodingKey {
            case fragmentSelectorType = "FragmentSelectorType"
            case timestampRange = "TimestampRange"
        }
    }

    public enum FragmentSelectorType: String, CustomStringConvertible, Codable {
        case producerTimestamp = "PRODUCER_TIMESTAMP"
        case serverTimestamp = "SERVER_TIMESTAMP"
        public var description: String { return self.rawValue }
    }

    public struct GetHLSStreamingSessionURLInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContainerFormat", required: false, type: .enum), 
            AWSShapeMember(label: "DiscontinuityMode", required: false, type: .enum), 
            AWSShapeMember(label: "DisplayFragmentTimestamp", required: false, type: .enum), 
            AWSShapeMember(label: "Expires", required: false, type: .integer), 
            AWSShapeMember(label: "HLSFragmentSelector", required: false, type: .structure), 
            AWSShapeMember(label: "MaxMediaPlaylistFragmentResults", required: false, type: .long), 
            AWSShapeMember(label: "PlaybackMode", required: false, type: .enum), 
            AWSShapeMember(label: "StreamARN", required: false, type: .string), 
            AWSShapeMember(label: "StreamName", required: false, type: .string)
        ]
        /// Specifies which format should be used for packaging the media. Specifying the FRAGMENTED_MP4 container format packages the media into MP4 fragments (fMP4 or CMAF). This is the recommended packaging because there is minimal packaging overhead. The other container format option is MPEG_TS. HLS has supported MPEG TS chunks since it was released and is sometimes the only supported packaging on older HLS players. MPEG TS typically has a 5-25 percent packaging overhead. This means MPEG TS typically requires 5-25 percent more bandwidth and cost than fMP4. The default is FRAGMENTED_MP4.
        public let containerFormat: ContainerFormat?
        /// Specifies when flags marking discontinuities between fragments will be added to the media playlists. The default is ALWAYS when HLSFragmentSelector is SERVER_TIMESTAMP, and NEVER when it is PRODUCER_TIMESTAMP. Media players typically build a timeline of media content to play, based on the timestamps of each fragment. This means that if there is any overlap between fragments (as is typical if HLSFragmentSelector is SERVER_TIMESTAMP), the media player timeline has small gaps between fragments in some places, and overwrites frames in other places. When there are discontinuity flags between fragments, the media player is expected to reset the timeline, resulting in the fragment being played immediately after the previous fragment. We recommend that you always have discontinuity flags between fragments if the fragment timestamps are not accurate or if fragments might be missing. You should not place discontinuity flags between fragments for the player timeline to accurately map to the producer timestamps.
        public let discontinuityMode: DiscontinuityMode?
        /// Specifies when the fragment start timestamps should be included in the HLS media playlist. Typically, media players report the playhead position as a time relative to the start of the first fragment in the playback session. However, when the start timestamps are included in the HLS media playlist, some media players might report the current playhead as an absolute time based on the fragment timestamps. This can be useful for creating a playback experience that shows viewers the wall-clock time of the media. The default is NEVER. When HLSFragmentSelector is SERVER_TIMESTAMP, the timestamps will be the server start timestamps. Similarly, when HLSFragmentSelector is PRODUCER_TIMESTAMP, the timestamps will be the producer start timestamps. 
        public let displayFragmentTimestamp: DisplayFragmentTimestamp?
        /// The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours). When a session expires, no new calls to GetHLSMasterPlaylist, GetHLSMediaPlaylist, GetMP4InitFragment, or GetMP4MediaFragment can be made for that session. The default is 300 (5 minutes).
        public let expires: Int32?
        /// The time range of the requested fragment, and the source of the timestamps. This parameter is required if PlaybackMode is ON_DEMAND. This parameter is optional if PlaybackMode is LIVE. If PlaybackMode is LIVE, the FragmentSelectorType can be set, but the TimestampRange should not be set. If PlaybackMode is ON_DEMAND, both FragmentSelectorType and TimestampRange must be set.
        public let hLSFragmentSelector: HLSFragmentSelector?
        /// The maximum number of fragments that are returned in the HLS media playlists. When the PlaybackMode is LIVE, the most recent fragments are returned up to this value. When the PlaybackMode is ON_DEMAND, the oldest fragments are returned, up to this maximum number. When there are a higher number of fragments available in a live HLS media playlist, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live HLS media playlist have a minimum of 3 fragments and a maximum of 10 fragments. The default is 5 fragments if PlaybackMode is LIVE, and 1,000 if PlaybackMode is ON_DEMAND.  The maximum value of 1,000 fragments corresponds to more than 16 minutes of video on streams with 1-second fragments, and more than 2 1/2 hours of video on streams with 10-second fragments.
        public let maxMediaPlaylistFragmentResults: Int64?
        /// Whether to retrieve live or archived, on-demand data. Features of the two types of session include the following:     LIVE : For sessions of this type, the HLS media playlist is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new playlist on a one-second interval. When this type of session is played in a media player, the user interface typically displays a "live" notification, with no scrubber control for choosing the position in the playback window to display.  In LIVE mode, the newest available fragments are included in an HLS media playlist, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the HLS media playlist if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the playlist, the older fragment is not added, and the gap is not filled.      ON_DEMAND : For sessions of this type, the HLS media playlist contains all the fragments for the session, up to the number that is specified in MaxMediaPlaylistFragmentResults. The playlist must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.   In both playback modes, if FragmentSelectorType is PRODUCER_TIMESTAMP, and if there are multiple fragments with the same start timestamp, the fragment that has the larger fragment number (that is, the newer fragment) is included in the HLS media playlist. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the HLS media playlist. This can lead to unexpected behavior in the media player. The default is LIVE.
        public let playbackMode: PlaybackMode?
        /// The Amazon Resource Name (ARN) of the stream for which to retrieve the HLS master playlist URL. You must specify either the StreamName or the StreamARN.
        public let streamARN: String?
        /// The name of the stream for which to retrieve the HLS master playlist URL. You must specify either the StreamName or the StreamARN.
        public let streamName: String?

        public init(containerFormat: ContainerFormat? = nil, discontinuityMode: DiscontinuityMode? = nil, displayFragmentTimestamp: DisplayFragmentTimestamp? = nil, expires: Int32? = nil, hLSFragmentSelector: HLSFragmentSelector? = nil, maxMediaPlaylistFragmentResults: Int64? = nil, playbackMode: PlaybackMode? = nil, streamARN: String? = nil, streamName: String? = nil) {
            self.containerFormat = containerFormat
            self.discontinuityMode = discontinuityMode
            self.displayFragmentTimestamp = displayFragmentTimestamp
            self.expires = expires
            self.hLSFragmentSelector = hLSFragmentSelector
            self.maxMediaPlaylistFragmentResults = maxMediaPlaylistFragmentResults
            self.playbackMode = playbackMode
            self.streamARN = streamARN
            self.streamName = streamName
        }

        private enum CodingKeys: String, CodingKey {
            case containerFormat = "ContainerFormat"
            case discontinuityMode = "DiscontinuityMode"
            case displayFragmentTimestamp = "DisplayFragmentTimestamp"
            case expires = "Expires"
            case hLSFragmentSelector = "HLSFragmentSelector"
            case maxMediaPlaylistFragmentResults = "MaxMediaPlaylistFragmentResults"
            case playbackMode = "PlaybackMode"
            case streamARN = "StreamARN"
            case streamName = "StreamName"
        }
    }

    public struct GetHLSStreamingSessionURLOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HLSStreamingSessionURL", required: false, type: .string)
        ]
        /// The URL (containing the session token) that a media player can use to retrieve the HLS master playlist.
        public let hLSStreamingSessionURL: String?

        public init(hLSStreamingSessionURL: String? = nil) {
            self.hLSStreamingSessionURL = hLSStreamingSessionURL
        }

        private enum CodingKeys: String, CodingKey {
            case hLSStreamingSessionURL = "HLSStreamingSessionURL"
        }
    }

    public struct GetMediaForFragmentListInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fragments", required: true, type: .list), 
            AWSShapeMember(label: "StreamName", required: true, type: .string)
        ]
        /// A list of the numbers of fragments for which to retrieve media. You retrieve these values with ListFragments.
        public let fragments: [String]
        /// The name of the stream from which to retrieve fragment media.
        public let streamName: String

        public init(fragments: [String], streamName: String) {
            self.fragments = fragments
            self.streamName = streamName
        }

        private enum CodingKeys: String, CodingKey {
            case fragments = "Fragments"
            case streamName = "StreamName"
        }
    }

    public struct GetMediaForFragmentListOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Payload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "Payload", required: false, type: .blob)
        ]
        /// The content type of the requested media.
        public let contentType: String?
        /// The payload that Kinesis Video Streams returns is a sequence of chunks from the specified stream. For information about the chunks, see PutMedia. The chunks that Kinesis Video Streams returns in the GetMediaForFragmentList call also include the following additional Matroska (MKV) tags:    AWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the chunk.   AWS_KINESISVIDEO_SERVER_SIDE_TIMESTAMP - Server-side timestamp of the fragment.   AWS_KINESISVIDEO_PRODUCER_SIDE_TIMESTAMP - Producer-side timestamp of the fragment.   The following tags will be included if an exception occurs:   AWS_KINESISVIDEO_FRAGMENT_NUMBER - The number of the fragment that threw the exception   AWS_KINESISVIDEO_EXCEPTION_ERROR_CODE - The integer code of the exception   AWS_KINESISVIDEO_EXCEPTION_MESSAGE - A text description of the exception  
        public let payload: Data?

        public init(contentType: String? = nil, payload: Data? = nil) {
            self.contentType = contentType
            self.payload = payload
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "Content-Type"
            case payload = "Payload"
        }
    }

    public struct HLSFragmentSelector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FragmentSelectorType", required: false, type: .enum), 
            AWSShapeMember(label: "TimestampRange", required: false, type: .structure)
        ]
        /// The source of the timestamps for the requested media. When FragmentSelectorType is set to PRODUCER_TIMESTAMP and GetHLSStreamingSessionURLInput$PlaybackMode is ON_DEMAND, the first fragment ingested with a producer timestamp within the specified FragmentSelector$TimestampRange is included in the media playlist. In addition, the fragments with producer timestamps within the TimestampRange ingested immediately following the first fragment (up to the GetHLSStreamingSessionURLInput$MaxMediaPlaylistFragmentResults value) are included.  Fragments that have duplicate producer timestamps are deduplicated. This means that if producers are producing a stream of fragments with producer timestamps that are approximately equal to the true clock time, the HLS media playlists will contain all of the fragments within the requested timestamp range. If some fragments are ingested within the same time range and very different points in time, only the oldest ingested collection of fragments are returned. When FragmentSelectorType is set to PRODUCER_TIMESTAMP and GetHLSStreamingSessionURLInput$PlaybackMode is LIVE, the producer timestamps are used in the MP4 fragments and for deduplication. But the most recently ingested fragments based on server timestamps are included in the HLS media playlist. This means that even if fragments ingested in the past have producer timestamps with values now, they are not included in the HLS media playlist. The default is SERVER_TIMESTAMP.
        public let fragmentSelectorType: HLSFragmentSelectorType?
        /// The start and end of the timestamp range for the requested media. This value should not be present if PlaybackType is LIVE.
        public let timestampRange: HLSTimestampRange?

        public init(fragmentSelectorType: HLSFragmentSelectorType? = nil, timestampRange: HLSTimestampRange? = nil) {
            self.fragmentSelectorType = fragmentSelectorType
            self.timestampRange = timestampRange
        }

        private enum CodingKeys: String, CodingKey {
            case fragmentSelectorType = "FragmentSelectorType"
            case timestampRange = "TimestampRange"
        }
    }

    public enum HLSFragmentSelectorType: String, CustomStringConvertible, Codable {
        case producerTimestamp = "PRODUCER_TIMESTAMP"
        case serverTimestamp = "SERVER_TIMESTAMP"
        public var description: String { return self.rawValue }
    }

    public struct HLSTimestampRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "StartTimestamp", required: false, type: .timestamp)
        ]
        /// The end of the timestamp range for the requested media. This value must be within 3 hours of the specified StartTimestamp, and it must be later than the StartTimestamp value. If FragmentSelectorType for the request is SERVER_TIMESTAMP, this value must be in the past. If the HLSTimestampRange value is specified, the EndTimestamp value is required.  This value is inclusive. The EndTimestamp is compared to the (starting) timestamp of the fragment. Fragments that start before the EndTimestamp value and continue past it are included in the session. 
        public let endTimestamp: TimeStamp?
        /// The start of the timestamp range for the requested media. If the HLSTimestampRange value is specified, the StartTimestamp value is required.  This value is inclusive. Fragments that start before the StartTimestamp and continue past it are included in the session. If FragmentSelectorType is SERVER_TIMESTAMP, the StartTimestamp must be later than the stream head. 
        public let startTimestamp: TimeStamp?

        public init(endTimestamp: TimeStamp? = nil, startTimestamp: TimeStamp? = nil) {
            self.endTimestamp = endTimestamp
            self.startTimestamp = startTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case endTimestamp = "EndTimestamp"
            case startTimestamp = "StartTimestamp"
        }
    }

    public struct ListFragmentsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FragmentSelector", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .long), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "StreamName", required: true, type: .string)
        ]
        /// Describes the timestamp range and timestamp origin for the range of fragments to return.
        public let fragmentSelector: FragmentSelector?
        /// The total number of fragments to return. If the total number of fragments available is more than the value specified in max-results, then a ListFragmentsOutput$NextToken is provided in the output that you can use to resume pagination.
        public let maxResults: Int64?
        /// A token to specify where to start paginating. This is the ListFragmentsOutput$NextToken from a previously truncated response.
        public let nextToken: String?
        /// The name of the stream from which to retrieve a fragment list.
        public let streamName: String

        public init(fragmentSelector: FragmentSelector? = nil, maxResults: Int64? = nil, nextToken: String? = nil, streamName: String) {
            self.fragmentSelector = fragmentSelector
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.streamName = streamName
        }

        private enum CodingKeys: String, CodingKey {
            case fragmentSelector = "FragmentSelector"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case streamName = "StreamName"
        }
    }

    public struct ListFragmentsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fragments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of archived Fragment objects from the stream that meet the selector criteria. Results are in no specific order, even across pages.
        public let fragments: [Fragment]?
        /// If the returned list is truncated, the operation returns this token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(fragments: [Fragment]? = nil, nextToken: String? = nil) {
            self.fragments = fragments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fragments = "Fragments"
            case nextToken = "NextToken"
        }
    }

    public enum PlaybackMode: String, CustomStringConvertible, Codable {
        case live = "LIVE"
        case onDemand = "ON_DEMAND"
        public var description: String { return self.rawValue }
    }

    public struct TimestampRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "StartTimestamp", required: true, type: .timestamp)
        ]
        /// The ending timestamp in the range of timestamps for which to return fragments.
        public let endTimestamp: TimeStamp
        /// The starting timestamp in the range of timestamps for which to return fragments.
        public let startTimestamp: TimeStamp

        public init(endTimestamp: TimeStamp, startTimestamp: TimeStamp) {
            self.endTimestamp = endTimestamp
            self.startTimestamp = startTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case endTimestamp = "EndTimestamp"
            case startTimestamp = "StartTimestamp"
        }
    }

}